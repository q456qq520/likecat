<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://q456qq520.github.io</id>
    <title>LIKECAT</title>
    <updated>2023-03-12T05:00:31.975Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://q456qq520.github.io"/>
    <link rel="self" href="https://q456qq520.github.io/atom.xml"/>
    <subtitle>一条小咸鱼</subtitle>
    <logo>https://q456qq520.github.io/images/avatar.png</logo>
    <icon>https://q456qq520.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, LIKECAT</rights>
    <entry>
        <title type="html"><![CDATA[面试题（三）]]></title>
        <id>https://q456qq520.github.io/post/mian-shi-ti-san/</id>
        <link href="https://q456qq520.github.io/post/mian-shi-ti-san/">
        </link>
        <updated>2023-03-12T04:28:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="mysql">mysql</h2>
<h3 id="1-什么是mysql中的降序索引">1. 什么是mysql中的降序索引</h3>
<p>降序索引是mysql8.0中才有的一种索引排序类型，默认为升序。</p>
<p>在MySQL中，降序索引是一种索引类型，可以帮助优化查询性能。与普通的升序索引不同，降序索引将索引键值按照降序排列，这意味着在查询时可以更快地找到符合条件的数据。</p>
<p>例如，假设有一个包含数百万条记录的表，其中有一个日期列，你经常需要按照日期倒序查找最新的数据。如果你在该列上创建了一个降序索引，则查询将非常快，因为MySQL将从索引的末尾开始查找最新的数据。</p>
<p>创建降序索引的语法与创建普通升序索引的语法类似，只需在索引定义中使用DESC关键字即可。例如，创建一个名为date_index的降序索引，可以使用以下语句：</p>
<pre><code class="language-mysql">CREATE INDEX date_index ON mytable (date_column DESC);
</code></pre>
<h2 id="线程池">线程池</h2>
<h3 id="1-线程池中线程是如何保活和回收的">1. 线程池中线程是如何保活和回收的</h3>
<p>线程保活：线程池中的线程通过调用线程管理器中的addWorker()方法来创建新的线程，这些线程被创建后会一直保活在线程池中。当任务到来时，线程池会通过线程管理器的getWorker()方法获取一个空闲线程来执行任务。线程池还会定期调用线程管理器的keepAlive()方法来检查空闲线程的数量，如果发现空闲线程过多，线程池会将多余的线程置为等待状态，以便在需要时能够立即响应任务。</p>
<p>线程回收：线程池中的线程在执行完任务后，并不会立即退出，而是会等待新的任务到来。线程池会通过线程管理器的getTask()方法获取任务，并将任务分配给空闲线程执行。如果线程空闲时间超过设定的时间，线程管理器会将该线程置为等待状态，并等待新的任务到来。如果等待的时间超过了设定的线程空闲时间，线程管理器会将该线程回收，并从线程池中移除该线程。</p>
<p>线程池的线程保活和回收机制是由线程管理器来管理的，线程管理器是线程池的核心组件之一。线程管理器通过对线程的创建、调度、回收等过程进行管理，保证线程池的运行效率和稳定性。同时，线程管理器还会通过使用锁、条件变量等机制来保证线程的安全性和可靠性。</p>
<h3 id="2-线程池有哪几种状态分别是如何变化的">2. 线程池有哪几种状态，分别是如何变化的</h3>
<p>Running（运行状态）：线程池处于正常运行状态，可以接受新的任务。<br>
Shutdown（关闭状态）：线程池不再接受新的任务，但会执行完已经提交的任务。<br>
Stop（停止状态）：线程池不再接受新的任务，并且会中断正在执行的任务。<br>
Tidying（整理状态）：所有的任务都已经执行完毕，工作线程数量为0，线程池将会转换到Terminated状态。<br>
Terminated（终止状态）：线程池彻底终止，不再处理任何任务。</p>
<p>线程池的状态转换通常是通过线程池的状态控制变量来实现的。例如，当线程池接收到shutdown()方法的调用时，线程池的状态会从Running状态转换为Shutdown状态。当线程池中的所有任务都执行完毕时，线程池的状态会从Tidying状态转换为Terminated状态。</p>
<h2 id="tomcat">tomcat</h2>
<h3 id="1-tomcat的最大线程数为什么默认是200">1. tomcat的最大线程数为什么默认是200</h3>
<p>Tomcat默认的最大线程数是200，这是一个经验值。具体来说，这个值取决于以下几个因素：</p>
<p>硬件资源：Tomcat所运行的服务器的硬件资源（如CPU和内存）越高，最大线程数就可以设置得更高。<br>
应用程序的负载：应用程序的负载越高，需要更多的线程来处理请求，最大线程数也就需要设置得更高。<br>
并发请求的处理时间：如果应用程序中的每个请求都需要大量的时间来处理，那么处理每个请求的线程就需要更长的时间。在这种情况下，最大线程数需要设置得更高，以便同时处理更多的请求。<br>
服务器的负载：如果Tomcat所运行的服务器还运行着其他的应用程序，那么这些应用程序也需要共享服务器的资源。因此，在这种情况下，最大线程数需要设置得更低，以免影响其他应用程序的运行。</p>
<p>总之，200作为Tomcat默认的最大线程数，是一个经验值，并不适用于所有情况。在实际应用中，最大线程数的设置应该根据应用程序的负载、硬件资源和服务器的负载等因素进行调整。</p>
<h2 id="分布式">分布式</h2>
<h3 id="1-什么是集群脑裂如何解决脑裂问题">1. 什么是集群脑裂，如何解决脑裂问题</h3>
<p>集群脑裂是指分布式系统中的节点之间失去联系或者通信故障，导致系统出现不一致的状态或无法提供服务的问题。举个例子，假设有一个由3个节点组成的集群，当节点1和节点2之间的通信故障时，这个集群就出现了脑裂问题，因为节点1和节点2之间的状态不一致会导致集群无法正常工作。</p>
<p>解决集群脑裂问题的方法有很多种，以下是一些常见的解决方法：</p>
<ol>
<li>心跳检测：在分布式系统中，通常使用心跳检测来检测节点之间的通信状态。当某个节点长时间无响应时，系统会将该节点视为已经失效，避免了因失效节点导致的脑裂问题。心跳检测可以使用UDP协议来实现，因为UDP协议的开销比TCP协议低，更适合在分布式系统中使用。</li>
<li>选举机制：在集群中选举一个“领导者”节点来负责处理请求，避免出现不一致的状态。当发生脑裂问题时，每个节点都会进行选举，选择一个新的领导者来处理请求。</li>
<li>数据复制：在分布式系统中，数据复制可以避免因为某个节点失效导致的脑裂问题。当某个节点失效时，可以使用其他节点上的备份数据来保证系统的一致性。</li>
<li>分布式锁：在分布式系统中，使用分布式锁可以避免因为不同节点之间的操作冲突导致的脑裂问题。例如，当多个节点同时对一个资源进行读写操作时，可以使用分布式锁来保证只有一个节点可以进行写操作，从而避免脑裂问题的发生。</li>
</ol>
<p>总之，解决集群脑裂问题的方法很多，具体选择哪种方法需要根据具体的应用场景和系统架构来进行评估和选择。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringCloud微服务实战(二)]]></title>
        <id>https://q456qq520.github.io/post/springcloud-wei-fu-wu-shi-zhan-er/</id>
        <link href="https://q456qq520.github.io/post/springcloud-wei-fu-wu-shi-zhan-er/">
        </link>
        <updated>2023-03-07T08:22:24.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="四-服务容错保护-spring-cloud-hystrix">四 服务容错保护: Spring Cloud Hystrix</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="四-服务容错保护-spring-cloud-hystrix">四 服务容错保护: Spring Cloud Hystrix</h2>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringCloud微服务实战(一)]]></title>
        <id>https://q456qq520.github.io/post/springcloud-wei-fu-wu-shi-zhan-yi/</id>
        <link href="https://q456qq520.github.io/post/springcloud-wei-fu-wu-shi-zhan-yi/">
        </link>
        <updated>2023-03-02T08:30:07.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="一-spring-cloud简介">一 Spring Cloud简介</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="一-spring-cloud简介">一 Spring Cloud简介</h2>
<!-- more -->
<p>Spring Cloud是一个基千SpringBoot实现的微服务架构开发 工具。它为微服务架构中<br>
涉及的 配置管理、服务治理、 断路器、 智能路由、微代理、 控制总线、 全局锁、 决策竞选、<br>
分布式会话和集群状态管理等操作提供了一种简单的开发方式。</p>
<p>Spring Cloud包含了多个子项目，如下所示：</p>
<ol>
<li>Spring Cloud Config: 配置管理工具， 支持使用Git存储配置内容， 可以使用它实现<br>
应用配置的外部化存储，并支持客户端配置信息刷新、 加密／解密配置内容等。</li>
<li>Spring Cloud Netflix: 核心 组件，对多个Netflix OSS开源套件进行整合。
<ul>
<li>Eureka: 服务治理组件， 包含服务注册中心、 服务注册与发现机制的实现。</li>
<li>Hystrix: 容错管理组件，实现断路器模式，帮助服务依赖中出现的延迟和为故障<br>
提供强大的容错能力。</li>
<li>Ribbon: 客户端负载均衡的服务调用组件。</li>
<li>Feign: 基于Ribbon 和 Hystrix 的声明式服务调用组件。</li>
<li>Zuul: 网关组件，提供智能路由、 访问过滤等功能。</li>
<li>Archaius: 外部化配置组件。</li>
</ul>
</li>
<li>Spring Cloud Bus: 事件、 消息总线， 用于传播集群中的状态变化或事件， 以触发后<br>
续的处理， 比如用来动态刷新配置等。</li>
<li>Spring Cloud Cluster: 针对 ZooKeeper、 Redis、 Hazelcast、 Consul 的选举算法和通用<br>
状态模式的实现。</li>
<li>Spring Cloud Cloudfoundry: 与 Pivotal Cloudfoundry 的整合支持。</li>
<li>Spring Cloud Consul: 服务发现与配置管理工具。</li>
<li>Spring Cloud Stream: 通过 Redis、 Rabbit 或者 Kafka 实现的消费微服务， 可以通过<br>
简单的声明式模型来发送和接收消息。</li>
<li>Spring Cloud A WS: 用千简化整合 Amazon Web Service 的组件。</li>
<li>Spring Cloud Security: 安全工具包， 提供在 Zuul 代理中对 0Auth2 客户端请求的中<br>
继器。</li>
<li>Spring Cloud Sleuth: Spring Cloud 应用的分布式跟踪实现， 可以完美整合 Zipkin。</li>
<li>Spring Cloud ZooKeeper: 基于 ZooKeeper 的服务发现与配置管理组件。</li>
<li>Spring Cloud Starters: Spring Cloud 的基础组件， 它是基于Spring Boot 风格项目的<br>
基础依赖模块。</li>
<li>Spring Cloud CLI: 用于在 Groovy 中快速创建 Spring Cloud 应用的 Spring Boot CLI<br>
插件。</li>
</ol>
<h2 id="二-服务治理-spring-cloud-eureka">二 服务治理： Spring Cloud Eureka</h2>
<p>Spring Cloud Eureka 是 Spring Cloud Netflix 微服务套件中的一部分， 它基于 Netflix<br>
Eureka 做了二次封装， 主要负责完成微服务架构中的服务治理功能。 Spring Cloud 通过为<br>
Eureka 增加了 Spring Boot 风格的自动化配置，我们只需通过简单引入依赖和注解配置就能<br>
让 Spring Boot 构建的微服务应用轻松地与 Eureka 服务治理体系进行整合。</p>
<h3 id="21-服务治理">2.1 服务治理</h3>
<p>为了解决微服务架构中的服务实例维护问题， 产生了大量的服务治理框架和产品。 这<br>
些框架和产品的实现都围绕着服务注册与服务发现机制来完成对微服务应用实例的自动化<br>
管理。</p>
<ol>
<li>
<p>服务注册<br>
在服务治理框架中， 通常都会构建一个注册中心， 每个服务单元向注册中心登记自己提供的服务， 将主机与端口号、 版本号、 通信协议等一些附加信息告知注册中心， 注册中心按服务名分类组织服务清单。</p>
</li>
<li>
<p>服务发现<br>
由于在服务治理框架下运作， 服务间的调用不再通过指定具体的实例地址来实现， 而是通过向服务名发起请求调用实现。 所以，服务调用方在调用服务提供方接口的时候， 并不知道具体的服务实例位置。 因此， 调用方需要向服务注册中心咨询服务， 并获取所有服务的实例清单， 以实现对具体服务实例的访问。</p>
</li>
</ol>
<h3 id="22-netflix-eureka">2.2 Netflix Eureka</h3>
<p>Spring Cloud Eureka, 使用Netflix Eureka来实现服务注册与发现， 它既包含了服务端组件，也包含了客户端组件，并且服务端与客户端均采用Java编写，所以Eureka主要适用于通过Java实现的分布式系统，或是与JVM兼容语言构建的系统。</p>
<p>Eureka服务端，我们也称为服务注册中心。 它同其他服务注册中心一样，支持高可用配置。它依托于强一致性提供良好的服务实例可用性，可以应对多种不同的故障场景。 如果Eureka以集群模式部署，当集群中有分片出现故障时，那么Eureka就转入自我保护模式。它允许在分片故障期间继续提供服务的发现和注册，当故障分片恢复运行时， 集群中的其他分片会把它们的状态再次同步回来。</p>
<p>Eureka客户端，主要处理服务的注册与发现。客户端服务通过注解和参数配置的方式，嵌入在客户端应用程序的代码中，在应用程序运行时，Eureka客户端向注册中心注册自身提供的服务并周期性地发送心跳来更新它的服务租约。同时，它也能从服务端查询当前注册的服务信息并把它们缓存到本地并周期性地刷新服务状态。</p>
<figure data-type="image" tabindex="1"><img src="https://q456qq520.github.io/post-images/1677827704328.png" alt="" loading="lazy"></figure>
<h4 id="221-服务提供者">2.2.1 服务提供者</h4>
<h5 id="服务注册">服务注册</h5>
<p>“服务提供者” 在启动的时候会通过发送REST请求的方式将自己注册到EurekaServer上， 同时带上了自身服务的一些元数据信息。<mark>Eureka Server接收到这个REST请求之后，将元数据信息存储在一个<code>双层结构Map</code>中， 其中第一层的key是服务名， 第二层的key是具体服务的实例名</mark>。</p>
<blockquote>
<p>在服务注册时， 需要确认一下 eureka.client.register-with-eureka=true参数是否正确， 该值默认为true。 若设置为false将不会启动注册操作。</p>
</blockquote>
<h5 id="服务同步">服务同步</h5>
<p>如架构图中所示， 这里的两个服务提供者分别注册到了两个不同的服务注册中心上，也就是说， 它们的信息分别被两个服务注册中心所维护。 此时， 由于服务注册中心之间因互相注册为服务， 当服务提供者发送注册请求到一个服务注册中心时， 它会将该请求转发给集群中相连的其他注册中心， 从而实现注册中心之间的服务同步 。 通过服务同步，两个服务提供者的服务信息就可以通过这两台服务注册中心中的任意一台获取到。</p>
<h5 id="服务续约">服务续约</h5>
<p>在注册完服务之后，服务提供者会维护一个心跳用来持续告诉EurekaServer: &quot;我还活着 ”， 以防止Eureka Server 的 “ 剔除任务 ” 将该服务实例 从服务列表中排除出去， 我们称该操作为服务续约(Renew)。</p>
<h4 id="222-服务消费者">2.2.2 服务消费者</h4>
<h5 id="获取服务">获取服务</h5>
<p>到这里，在服务注册中心已经注册了一个服务，并且该服务有两个实例。当我们启动服务消费者的时候， 它会发送一个REST请求给服务注册中心，来获取上面注册的服务清单。为了性能考虑，Eureka Server会维护一份只读的服务清单来返回给客户端，同时该缓存清单会每隔30秒更新一次。</p>
<p>获取服务是服务消费者的基础，所以必须确保eureka.client.fetch-registry= true参数没有被修改成false, 该值默认为true。若希望修改缓存清单的更新时间，可以通过 eureka.client.registry-fetch-interval-seconds=30参数进行修改，该参数默认值为30, 单位为秒。</p>
<h5 id="服务调用">服务调用</h5>
<p>服务消费者在获取服务清单后，通过服务名可以获得具体提供服务的实例名和该实例的元数据信息。 因为有这些服务实例的详细信息， 所以客户端可以根据自己的需要决定具 体调用哪个实例，在ribbon中会默认采用轮询的方式进行调用，从而实现客户端的负载均衡。</p>
<p>对于访问实例的选择，Eureka中有Region和Zone的概念，一个Region中可以包含多个 Zone, 每个服务客户端需要被注册到一个Zone中，所以每个客户端对应一个Region和一个Zone。 在进行服务调用的时候，优先访问同处一个Zone中的服务提供方，若访问不到，就访问其他的Zone。</p>
<h5 id="服务下线">服务下线</h5>
<p>在系统运行过程中必然会面临关闭或重启服务的某个实例的情况， 在服务关闭期间， 我们自然不希望客户端会继续调用关闭了的实例。 所以在客户端程序中，当服务实例进行正常的关闭操作时， 它会触发一个服务下线的REST请求给Eueka Server, 告诉服务注册中心:“我要下线了”。 服务端在接收到请求之后， 将该服务状态置为下线(DOWN), 并把 该下线事件传播出去。</p>
<h4 id="223-服务注册中心">2.2.3 服务注册中心</h4>
<h5 id="失效剔除">失效剔除</h5>
<p>有些时候， 我们的服务实例并不一定会正常下线， 可能由于内存溢出、 网络故障等原因使得服务不能正常工作， 而服务注册中心并未收到 “ 服务下线 ” 的请求。 为了从服务列表中将这些无法提供服务的实例剔除， Eureka Srevre 在启动的时候会创建一个定时任务， 默认每隔一段时间(默认为60秒) 将当前清单中超时(默认为90秒)没有续约的服务剔除出去。</p>
<h5 id="自我保护">自我保护</h5>
<p>服务注 册到EurekaSrever 之后，会维护一个心跳连接，告诉EurekaServer自己还活着。EurekaServer 在运行期间，会统计心跳失败的比例在15分钟之内是否低于85%, 如果出现低于的情况，Eureka Server会将当前的实例注册信息保护起来，让这些实例不会过期，尽可能保护这些注册信息。但是 在这段保护期间内实例若出现问题，那么客户端很容易拿到实际已经不存在的服务实例，会出现调用失败的清况，所以客户端必须要有容错机制，比如可以使用请求重试、 断路器等机制。</p>
<p>由于本地调试很容易触发注册中心的保护机制， 这会使得注册中心维护的服务实例不那么准确。 所以， 我们在本地进行开发的时候， 可以使用eureka.server.enable­-self-preservervation=false参数来关闭保护机制， 以确保注册中心可以将不可用的实例正确剔除。</p>
<h3 id="23-源码分析">2.3 源码分析</h3>
<p>首先，对于服务注册中心、服务提供者、服务消费者这三个主要元素来说，后两者(也就是 Eureka 客户端)在整个运行机制中是大部分通信行为的主动发起者，而注册中 心主要是处理请求的接收者。所以，我们可以从Eureka的客户端作为入口看看它是如何完 成这些主动通信行为的。</p>
<p>我们在将一个普通的 Spring Boot 应用注册到 Eureka Server 或是从 Eureka Server 中获取服务列表时， 主要就做了两件事:</p>
<ul>
<li>在应用主类中配置了@EnableDiscoveryClient注解。</li>
<li>在application.properties中用eureka.client.serviceUrl.defaultZone参数指定了服务注册中心的位置。</li>
</ul>
<p>我们来看看@EnableDiscoveryClient 的源码， 具体如下:</p>
<pre><code class="language-java">@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@Import({EnableDiscoveryClientImportSelector.class})
public @interface EnableDiscoveryClient {
    boolean autoRegister() default true;
}
</code></pre>
<p>它主要用来开启DiscoveryClient 的实例。通过搜索DiscoveryClient, 我们可以发现有 个类和一个接口。 通过梳理可以得到如下图所示的关系:<br>
<img src="https://q456qq520.github.io/post-images/1677830336714.png" alt="" loading="lazy"></p>
<p>其中， 左边的org.springframework.cloud.client.discovery.DiscoveryClient 是Spring Cloud的接口，它定义了用来发现服务的常用抽象方法， 通过该接口可以有效地 屏蔽服务治理的实现细节， 所以使用 Spring Cloud 构建的微服务应用可以方便地切换不同服务治理框架， 而不改动程序代码， 只需要另外添加一些针对服务治理框架的配置即可。</p>
<p>org.springframework.cloud.netflix.eureka.EurekaDiscoveryClient是对该接口的实现，从命名来判断， 它实现的是对 Eureka 发现服务的封装。 所以 EurekaDiscoveryClient 依赖了 Netflix Eureka 的 com.netflix.discovery. EurekaClient 接口， EurekaClient 继承了 LookupService 接口， 它们都是Netflix 开源包中的内容， 主要定义了针对Eureka的发现服务的抽象方法， 而真正实现发现服务的 则是Netflix 包中的 com.netflix.discovery.DiscoveryClient类。</p>
<p>EurekaClient负责下面的任务:</p>
<ul>
<li>向Eureka Server注册服务实例</li>
<li>向Eureka Server服务租约</li>
<li>当服务关闭期间， 向Eureka Server取消租约</li>
<li>查询Eureka Server中的服务实例列表</li>
</ul>
<p>在具体研究 Eureka Client负责完成的任务之前，我们先看看在哪里对 Eureka Server的URL列表进行配置。根据我们配置的属性名eureka.client.serviceUrl.defaultZone, 通过serviceUrl可以找到该属性相关的加载属性，但是在 SR5 版本中它们都被 @Deprecated 标注为不再建议使用，并@link到了替代类com.netflix.discovery.endpoint.EndpointUtils, 所以我们可以在该类中找到下面这个函数:</p>
<pre><code class="language-java">public static List&lt;String&gt; getServiceUrlsFromConfig(EurekaClientConfig clientConfig, String instanceZone, boolean preferSameZone) {
    List&lt;String&gt; orderedUrls = new ArrayList();
    String region = getRegion(clientConfig);
    String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());
    if (availZones == null || availZones.length == 0) {
        availZones = new String[]{&quot;default&quot;};
    }
    int myZoneOffset = getZoneOffset(instanceZone, preferSameZone, availZones);
    List&lt;String&gt; serviceUrls = clientConfig.getEurekaServerServiceUrls(availZones[myZoneOffset]);
    if (serviceUrls != null) {
        orderedUrls.addAll(serviceUrls);
    }
    int currentOffset = myZoneOffset == availZones.length - 1 ? 0 : myZoneOffset + 1;
    while(currentOffset != myZoneOffset) {
        serviceUrls = clientConfig.getEurekaServerServiceUrls(availZones[currentOffset]);
        if (serviceUrls != null) {
            orderedUrls.addAll(serviceUrls);
        }
        if (currentOffset == availZones.length - 1) {
            currentOffset = 0;
        } else {
            ++currentOffset;
        }
    }
    if (orderedUrls.size() &lt; 1) {
        throw new IllegalArgumentException(&quot;DiscoveryClient: invalid serviceUrl specified!&quot;);
    } else {
        return orderedUrls;
    }
}
</code></pre>
<h4 id="231-region-zone">2.3.1 Region、Zone</h4>
<p>在上面的函数中， 可以发现， 客户端依次加载了两个内容， 第一个是Region, 第二个 是Zone, 从其加载逻辑上我们可以判断它们之间的关系:<br>
通过getRegion函数，我们可以看到它从配置中读取了一个Region返回， 所以一个微服务应用只可以属于 一个Region, 如果不特别配置， 默认为default。若我们要自己设置， 可以通过eureka.client.region属性来定义。</p>
<pre><code class="language-java">public static String getRegion(EurekaClientConfig clientConfig) {
    String region = clientConfig.getRegion();
    if (region == null) {
        region = &quot;default&quot;;
    }
    region = region.trim().toLowerCase();
    return region;
}
</code></pre>
<p>通过 getAvailabi让tyZones函数，可以知道当我们没有特别为Region配置Zone的时候，将默认采用defaultZone , 这也是我们之前配置参数 eureka.client.serviceUrl.defaultZone的由来。 若要为应用指定Zone, 可以通过 eureka.client.availability-zones属性来进行设置。从该函数的return内容， 我们可以知道Zone能够设置多个，并且通过逗号分隔来配置。 由此， 我们可以判断<mark>Region与Zone是一对多的关系</mark>。</p>
<pre><code class="language-java">public String[] getAvailabilityZones(String region) {
    String value = (String)this.availabilityZones.get(region);
    if (value == null) {
        value = &quot;defaultZone&quot;;
    }
    return value.split(&quot;,&quot;);
}
</code></pre>
<p>在获取了Region和Zone的信息之后，才开始真正加载 Eureka Server 的具体地址。它根据传入的参数按 一定算法确定加载位于哪一个Zone配置的serviceUris。</p>
<pre><code class="language-java">int myZoneOffset = getZoneOffset(instanceZone, preferSameZone, availZones);
List&lt;String&gt; serviceUrls = clientConfig.getEurekaServerServiceUrls(availZones[myZoneOffset]);
</code></pre>
<p>具体获取 serviceUrls 的实现， 我们可以详细查看 getEurekaServerServiceUrls 函数的具体实现类 EurekaClientConfigBean, 该类是 EurekaClientConfig 和 EurekaConstants 接口的实现，用来加载配置文件中的内容。</p>
<pre><code class="language-java">public List&lt;String&gt; getEurekaServerServiceUrls(String myZone) {
    String serviceUrls = (String)this.serviceUrl.get(myZone);
    if (serviceUrls == null || serviceUrls.isEmpty()) {
        serviceUrls = (String)this.serviceUrl.get(&quot;defaultZone&quot;);
    }
    if (!StringUtils.isEmpty(serviceUrls)) {
        String[] serviceUrlsSplit = StringUtils.commaDelimitedListToStringArray(serviceUrls);
        List&lt;String&gt; eurekaServiceUrls = new ArrayList(serviceUrlsSplit.length);
        String[] var5 = serviceUrlsSplit;
        int var6 = serviceUrlsSplit.length;
        for(int var7 = 0; var7 &lt; var6; ++var7) {
            String eurekaServiceUrl = var5[var7];
            if (!this.endsWithSlash(eurekaServiceUrl)) {
                eurekaServiceUrl = eurekaServiceUrl + &quot;/&quot;;
            }
            eurekaServiceUrls.add(eurekaServiceUrl);
        }
        return eurekaServiceUrls;
    } else {
        return new ArrayList();
    }
}
</code></pre>
<p>当我们在微服务应用中使用 Ribbon 来实现服务调用时，Zone 的设置可以在负载均衡时实现区域亲和特性,，Ribbon 的默认策略会优先访问同客户端处于一个Zone中的服务端实例，只有当同一个Zone 中没有可用服务端实例的时候才会访问其他Zone中的实例。所以通过Zone属性的定义，配合实际部署的物理结构，我们就可以有效地设计出对区域性故障的容错集群。</p>
<h4 id="232-服务注册">2.3.2 服务注册</h4>
<p>在理解了多个服务注册中心信息的加载后，我们再回头看看 DiscoveryClient类是 如何实现<mark>服务注册</mark>行为的， 通过查看它的构造类，可以找到它调用了下面这个函数:</p>
<pre><code class="language-java">private void initScheduledTasks() {
    int renewalIntervalInSecs;
    int expBackOffBound;
    if (this.clientConfig.shouldFetchRegistry()) {
        renewalIntervalInSecs = this.clientConfig.getRegistryFetchIntervalSeconds();
        expBackOffBound = this.clientConfig.getCacheRefreshExecutorExponentialBackOffBound();
        //服务获取
        this.scheduler.schedule(new TimedSupervisorTask(&quot;cacheRefresh&quot;, this.scheduler, this.cacheRefreshExecutor, renewalIntervalInSecs, TimeUnit.SECONDS, expBackOffBound, new DiscoveryClient.CacheRefreshThread()), (long)renewalIntervalInSecs, TimeUnit.SECONDS);
    }
    if (this.clientConfig.shouldRegisterWithEureka()) {
        renewalIntervalInSecs = this.instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();
        expBackOffBound = this.clientConfig.getHeartbeatExecutorExponentialBackOffBound();
        logger.info(&quot;Starting heartbeat executor: renew interval is: &quot; + renewalIntervalInSecs);
        //维持心跳，服务续约
        this.scheduler.schedule(new TimedSupervisorTask(&quot;heartbeat&quot;, this.scheduler, this.heartbeatExecutor, renewalIntervalInSecs, TimeUnit.SECONDS, expBackOffBound, new DiscoveryClient.HeartbeatThread()), (long)renewalIntervalInSecs, TimeUnit.SECONDS);
        // 创建了一个InstanceinfoReplicator类的实例，它会执行一个定时任务进行服务注册
        this.instanceInfoReplicator = new InstanceInfoReplicator(this, this.instanceInfo, this.clientConfig.getInstanceInfoReplicationIntervalSeconds(), 2);
        this.statusChangeListener = new StatusChangeListener() {
            public String getId() {
                return &quot;statusChangeListener&quot;;
            }
            public void notify(StatusChangeEvent statusChangeEvent) {
                if (InstanceStatus.DOWN != statusChangeEvent.getStatus() &amp;&amp; InstanceStatus.DOWN != statusChangeEvent.getPreviousStatus()) {
                    DiscoveryClient.logger.info(&quot;Saw local status change event {}&quot;, statusChangeEvent);
                } else {
                    DiscoveryClient.logger.warn(&quot;Saw local status change event {}&quot;, statusChangeEvent);
                }
                DiscoveryClient.this.instanceInfoReplicator.onDemandUpdate();
            }
        };
        if (this.clientConfig.shouldOnDemandUpdateStatusChange()) {
            this.applicationInfoManager.registerStatusChangeListener(this.statusChangeListener);
        }
        this.instanceInfoReplicator.start(this.clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());
    } else {
        logger.info(&quot;Not registering with Eureka server per configuration&quot;);
    }
}
</code></pre>
<p>其中创建了一个 InstanceinfoReplicator 类的实例， 它会执行一个定时任务， 而这个定时任务的具体工作可以查看该类的 run() 函数，具体如下所示:</p>
<pre><code class="language-java">public void run() {
    boolean var6 = false;

    ScheduledFuture next;
    label53: {
        try {
            var6 = true;
            this.discoveryClient.refreshInstanceInfo();
            Long dirtyTimestamp = this.instanceInfo.isDirtyWithTime();
            if (dirtyTimestamp != null) {
                this.discoveryClient.register();
                this.instanceInfo.unsetIsDirty(dirtyTimestamp);
                var6 = false;
            } else {
                var6 = false;
            }
            break label53;
        } catch (Throwable var7) {
            logger.warn(&quot;There was a problem with the instance info replicator&quot;, var7);
            var6 = false;
        } finally {
            if (var6) {
                ScheduledFuture next = this.scheduler.schedule(this, (long)this.replicationIntervalSeconds, TimeUnit.SECONDS);
                this.scheduledPeriodicRef.set(next);
            }
        }
        next = this.scheduler.schedule(this, (long)this.replicationIntervalSeconds, TimeUnit.SECONDS);
        this.scheduledPeriodicRef.set(next);
        return;
    }
    next = this.scheduler.schedule(this, (long)this.replicationIntervalSeconds, TimeUnit.SECONDS);
    this.scheduledPeriodicRef.set(next);
}
</code></pre>
<p>相信大家都发现了中scoveryClient.register () ; 这一行，真正触发调用注册的地方就在这里。 继续查看 register ()的实现内容，如下所示:</p>
<pre><code class="language-java">boolean register() throws Throwable {
    logger.info(&quot;DiscoveryClient_&quot; + this.appPathIdentifier + &quot;: registering service...&quot;);

    EurekaHttpResponse httpResponse;
    try {
        httpResponse = this.eurekaTransport.registrationClient.register(this.instanceInfo);
    } catch (Exception var3) {
        logger.warn(&quot;{} - registration failed {}&quot;, new Object[]{&quot;DiscoveryClient_&quot; + this.appPathIdentifier, var3.getMessage(), var3});
        throw var3;
    }

    if (logger.isInfoEnabled()) {
        logger.info(&quot;{} - registration status: {}&quot;, &quot;DiscoveryClient_&quot; + this.appPathIdentifier, httpResponse.getStatusCode());
    }

    return httpResponse.getStatusCode() == 204;
}
</code></pre>
<p>注册操作也是通过REST请求的方式进行的。同时， 我们能看到发起注册请求的时候， 传入了一个com.neflix.appinfo.Instanceinfo 对象，该对象就是注册时客户端给服务端的服务的元数据。</p>
<h4 id="233-服务获取和服务续约">2.3.3 服务获取和服务续约</h4>
<p>我们继续来看 DiscoveryClient 的initScheduledTasks 函 数，不难发现在其中还有两个定时任务， 分别是<mark>服务获取</mark>和<mark>服务续约</mark>。</p>
<p>服务获取任务相对于服务续约和服务注册任务更 为独立。服务续约与服务注册在同一个if逻辑中，这个不难理解，服务注册到 Eureka Server 后，自然需要一个心跳去续约， 防止被剔除， 所以它们肯定是成对出现的。 从源码中， 对于服务续约相关的时间控制参数有两个重要属性， 我们可以关注并根据需要来进行调整:</p>
<pre><code class="language-yml">#用于定义服务续约任务的调用间隔时间，默认为30秒
eureka.instance.lease-renewal-interval-in-seconds=30 
#用于定义服务失效的时间，默认为90秒
eureka.instance.lease-expiration-duration-in-seconds=90
</code></pre>
<p>其中 “ 服务续约 ” 的实现较为简单， 直接以REST请求的方式进行续约:</p>
<pre><code class="language-java">boolean renew() {
   try {
       EurekaHttpResponse&lt;InstanceInfo&gt; httpResponse = this.eurekaTransport.registrationClient.sendHeartBeat(this.instanceInfo.getAppName(), this.instanceInfo.getId(), this.instanceInfo, (InstanceStatus)null);
       logger.debug(&quot;{} - Heartbeat status: {}&quot;, &quot;DiscoveryClient_&quot; + this.appPathIdentifier, httpResponse.getStatusCode());
       if (httpResponse.getStatusCode() == 404) {
           this.REREGISTER_COUNTER.increment();
           logger.info(&quot;{} - Re-registering apps/{}&quot;, &quot;DiscoveryClient_&quot; + this.appPathIdentifier, this.instanceInfo.getAppName());
           return this.register();
       } else {
           return httpResponse.getStatusCode() == 200;
       }
   } catch (Throwable var3) {
       logger.error(&quot;{} - was unable to send heartbeat!&quot;, &quot;DiscoveryClient_&quot; + this.appPathIdentifier, var3);
       return false;
   }
}
</code></pre>
<p>而 “ 服务获取 ” 则复杂一些， 会根据是否是第一次获取发起不同的 REST 请求和相应 的处理。 具体的实现逻辑跟之前类似。</p>
<h4 id="234-服务注册中心处理">2.3.4 服务注册中心处理</h4>
<p>Eureka Server 对于各类 REST 请求的定义都位于 com.netflix.eureka.resources 包下。<br>
以 “服务注册“ 请求为例:</p>
<pre><code class="language-java"> @POST
@Consumes({&quot;application/json&quot;, &quot;application/xml&quot;})
public Response addInstance(InstanceInfo info,
                            @HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication) {
    logger.debug(&quot;Registering instance {} (replication={})&quot;, info.getId(), isReplication);
    // validate that the instanceinfo contains all the necessary required fields
    if (isBlank(info.getId())) {
        return Response.status(400).entity(&quot;Missing instanceId&quot;).build();
    } else if (isBlank(info.getHostName())) {
        return Response.status(400).entity(&quot;Missing hostname&quot;).build();
    } else if (isBlank(info.getIPAddr())) {
        return Response.status(400).entity(&quot;Missing ip address&quot;).build();
    } else if (isBlank(info.getAppName())) {
        return Response.status(400).entity(&quot;Missing appName&quot;).build();
    } else if (!appName.equals(info.getAppName())) {
        return Response.status(400).entity(&quot;Mismatched appName, expecting &quot; + appName + &quot; but was &quot; + info.getAppName()).build();
    } else if (info.getDataCenterInfo() == null) {
        return Response.status(400).entity(&quot;Missing dataCenterInfo&quot;).build();
    } else if (info.getDataCenterInfo().getName() == null) {
        return Response.status(400).entity(&quot;Missing dataCenterInfo Name&quot;).build();
    }

    // handle cases where clients may be registering with bad DataCenterInfo with missing data
    DataCenterInfo dataCenterInfo = info.getDataCenterInfo();
    if (dataCenterInfo instanceof UniqueIdentifier) {
        String dataCenterInfoId = ((UniqueIdentifier) dataCenterInfo).getId();
        if (isBlank(dataCenterInfoId)) {
            boolean experimental = &quot;true&quot;.equalsIgnoreCase(serverConfig.getExperimental(&quot;registration.validation.dataCenterInfoId&quot;));
            if (experimental) {
                String entity = &quot;DataCenterInfo of type &quot; + dataCenterInfo.getClass() + &quot; must contain a valid id&quot;;
                return Response.status(400).entity(entity).build();
            } else if (dataCenterInfo instanceof AmazonInfo) {
                AmazonInfo amazonInfo = (AmazonInfo) dataCenterInfo;
                String effectiveId = amazonInfo.get(AmazonInfo.MetaDataKey.instanceId);
                if (effectiveId == null) {
                    amazonInfo.getMetadata().put(AmazonInfo.MetaDataKey.instanceId.getName(), info.getId());
                }
            } else {
                logger.warn(&quot;Registering DataCenterInfo of type {} without an appropriate id&quot;, dataCenterInfo.getClass());
            }
        }
    }

    registry.register(info, &quot;true&quot;.equals(isReplication));
    return Response.status(204).build();  // 204 to be backwards compatible
}
</code></pre>
<p>在对注册信息进行了一堆校验之后，会调用org.springframework.cloud. netflix.eureka.server.InstanceRegistry对象中的register(Instanceinfo info, int leaseDuration, boolean isReplication)函数来进行服务注册:</p>
<pre><code class="language-java">public void register(InstanceInfo info, boolean isReplication) {
    this.handleRegistration(info, this.resolveInstanceLeaseDuration(info), isReplication);
    super.register(info, isReplication);
}
</code></pre>
<p>在注册函数中， 先调用handleRegistration中的publishEvent函数，将该新服务注册的事件传播出去， 然 后调用com.netflix.eureka.registry.AbstractlnstanceRegistry父类中的注册实现，将InstanceInfo中的元数据信息存储在 一个ConcurrentHashMap对象中。 正如我们之前所说的， 注册中心存储了两层Map结构， 第一层的key存储服务名:Instancelnfo中的appName属性， 第二层的key存储实例名: Instancelnfo中的 instanceid属性。</p>
<pre><code class="language-java">private final ConcurrentHashMap&lt;String, Map&lt;String, Lease&lt;InstanceInfo&gt;&gt;&gt; registry = new ConcurrentHashMap();

public void register(InstanceInfo registrant, int leaseDuration, boolean isReplication) {
    try {
        this.read.lock();
        Map&lt;String, Lease&lt;InstanceInfo&gt;&gt; gMap = (Map)this.registry.get(registrant.getAppName());
        EurekaMonitors.REGISTER.increment(isReplication);
        if (gMap == null) {
            ConcurrentHashMap&lt;String, Lease&lt;InstanceInfo&gt;&gt; gNewMap = new ConcurrentHashMap();
            gMap = (Map)this.registry.putIfAbsent(registrant.getAppName(), gNewMap);
            if (gMap == null) {
                gMap = gNewMap;
            }
       }
    Lease&lt;InstanceInfo&gt; existingLease = (Lease)((Map)gMap).get(registrant.getId());
    //...
    Lease&lt;InstanceInfo&gt; lease = new Lease(registrant, leaseDuration);
    if (existingLease != null) {
        lease.setServiceUpTimestamp(existingLease.getServiceUpTimestamp());
    }

    ((Map)gMap).put(registrant.getId(), lease);
</code></pre>
<h4 id="235-配置详解">2.3.5 配置详解</h4>
<p>Eureka客户端的配置主要分为以下两个方面。<br>
• 服务注册相关的配置信息， 包括服务注册中心的地址、 服务获取的间隔时间、 可用 区域等。<br>
• 服务实例相关的配置信息， 包括服务实例的名称、IP地址、 端口号、 健康检查路径<br>
等。</p>
<h5 id="服务注册类配置">服务注册类配置</h5>
<table>
<thead>
<tr>
<th>参数名</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>enabled</td>
<td>启用Eureka客户端</td>
<td>true</td>
</tr>
<tr>
<td>registryFetchIntervalSeconds</td>
<td>从Eureka服务端获取注册信息的间隔时间，单位为秒</td>
<td>30</td>
</tr>
<tr>
<td>instancelnfoReplicationlntervalSeconds</td>
<td>更新实例信息的变化到E田eka服务端的间隔时间， 单位为秒</td>
<td>30</td>
</tr>
<tr>
<td>inItiallnstancelnfoRepIicationintervalSeconds</td>
<td>初始化实例信息到Eureka服务端的间隔时间，单位为秒</td>
<td>40</td>
</tr>
<tr>
<td>eurekaServiceUrlPolllntervalSeconds</td>
<td>轮询Eureka服务端地址更改的间隔时间，单位为秒</td>
<td>300</td>
</tr>
<tr>
<td>eurekaServerReadTimeoutSeconds</td>
<td>读取Eureka Server信息的超时时间， 单位为秒</td>
<td>8</td>
</tr>
<tr>
<td>eurekaServerConnectTimeoutSeconds</td>
<td>连接 Eureka Server的超时时间， 单位为秒</td>
<td>5</td>
</tr>
<tr>
<td>eurekaServerTotalConnections</td>
<td>从Eureka客户端到所有Eureka服务端的连接总数</td>
<td>200</td>
</tr>
<tr>
<td>eurekaServerTotalConnectionsPerHost</td>
<td>从Eureka客户端到每个Eureka服务端主机的连接总数</td>
<td>50</td>
</tr>
<tr>
<td>eurekaConnectionldleTimeoutSeconds</td>
<td>Eureka服务端连接的空闲关闭时间，单位为秒</td>
<td>30</td>
</tr>
<tr>
<td>heartbeatExecutorThreadPoolSize</td>
<td>心跳连接池的初始化线程数</td>
<td>2</td>
</tr>
<tr>
<td>heartbeatExecutorExponenttalBackOffBound</td>
<td>心跳超时重试延迟时间的最大乘数值</td>
<td>10</td>
</tr>
<tr>
<td>cacheRefreshExecutorThreadPoolSize</td>
<td>缓存刷新线程池的初始化线程数</td>
<td>2</td>
</tr>
<tr>
<td>cacheRefreshExecutorExponentialBackOffBound</td>
<td>缓存刷新重试延迟时间的最大乘数值</td>
<td>10</td>
</tr>
<tr>
<td>useDnsForFetchmgServerUrls</td>
<td>使用DNS来获取Eureka服务端的serviceUrl</td>
<td>false</td>
</tr>
<tr>
<td>registerWithEureka</td>
<td>是否要将自身的实例信息注册到Eureka服务端</td>
<td>true</td>
</tr>
<tr>
<td>preferSameZoneEureka</td>
<td>是否偏好使用处于相同Zone的Eureka服务端</td>
<td>true</td>
</tr>
<tr>
<td>filterOnlyUplnstances</td>
<td>获取实例时是否过滤，仅保留UP状态的实例</td>
<td>true</td>
</tr>
<tr>
<td>fetchRegistry</td>
<td>是否从 Eureka服务端获取注册信息</td>
<td>true</td>
</tr>
</tbody>
</table>
<h5 id="服务实例类配置">服务实例类配置</h5>
<h2 id="三-客户端负载均衡-ribbon">三 客户端负载均衡: Ribbon</h2>
<p>Spring Cloud Ribbon 是一个基于HTTP和TCP的客户端负载均衡工具，它基于 Netflix ribbon实现。 通过SpringCloud的封装，可以让我们轻松地将面向服务的REST模板请求 自动转换成客户端负载均衡的服务调用。</p>
<h3 id="31-客户端负载均衡">3.1 客户端负载均衡</h3>
<p>我们通常所说的负 载均衡都指的是服务端负载均衡，其中分为硬件负载均衡和软件负载均衡。 硬件负载均衡 主要通过在服务器节点之间安装专门用于负载均衡的设备，比如 F5 等;而软件负载均衡则 是通过在服务器上安装一 些具有均衡负载功能或模块的软件来完成请求分发工作， 比如 Nginx 等。 不论采用硬件负载均衡还是软件负载均衡，只要是服务端负载均衡都能以类似 下图的架构方式构建起来:<br>
<img src="https://q456qq520.github.io/post-images/1677991001866.png" alt="" loading="lazy"></p>
<p>硬件负载均衡的设备或是软件负载均衡的软件模块都会维护一个下挂可用的服务端清单，通过心跳检测来剔除故障的服务端节点以保证清单中都是可以正常访问的服务端节点。 当客户端发送请求到负载均衡设备的时候 ，该设备按某种算法(比如线性轮询、按权重负载、按流量负载等)从维护的可用服务端清单中取出一台服务端的地址， 然后进行转发。</p>
<p>而客户端负载均衡和服务端负载均衡最大的不同点在千上面所提到的服务清单所存储的位置。 在客户端负载均衡中，所有客户端节点都维护着自己要访问的服务端清单， 而这些 服务端的清单来自于服务注册中心，比如的Eureka服务端。同服务端负载均衡的架构类似，在客户端负载均衡中也需要心跳去维护服务端清单的健康性， 只是这个步骤 需要与服务注册中心配合完成。在SpringCloud实现的服务治理框架中，默认会创建针对各 个服务治理框架的ribbon自动化整合配置，比如Eureka中的org.springframework. cloud.netflix.ribbon.eureka. RibbonEurekaAutoConfiguration,Consul 中的org.springframework.cloud.consul.discovery. RibbonConsulAuto- Configuration。</p>
<p>通过Spring CloudRibbon的封装， 我们在微服务架构中使用客户端负载均衡调用非常简单， 只需要如下两步:</p>
<ol>
<li>服务提供者只需要启动多个服务实例并注册到一个注册中心或是多个相关联的服务 注册中心。</li>
<li>服务消费者直接通过调用被@LoadBalanced注解修饰过的 RestTemplate 来实现面向服务的接口调用。</li>
</ol>
<h3 id="32-resttemplate-详解">3.2 RestTemplate 详解</h3>
<p>RestTemplate会使用 Ribbon 的自动化配置， 同时通过配置@LoadBalanced 还能够开启客户端负载均衡。RestTemplate针对几种不同请求类型和参数类型的服务调用实现如下。</p>
<h4 id="321-get请求">3.2.1 GET请求</h4>
<p>在RestTemplate中，对GET 请求可以通过如下两个方法进行调用实现。</p>
<p>第一种: <mark>getForEntity函数</mark>。该方法返回的是ResponseEntity, 该对象是 Spring 对 HTTP 请求响应的封装， 其中主要存储了 HTTP 的几个重要元素， 比如 HTTP 请求状态 码的枚举对象 HttpStatus (也就是我们常说的 404、 500 这些错误码)、 在它的父类 HttpEntity 中还存储着 HTTP 请求的头信息对象 HttpHeaders 以及泛型类型的请求体对象。</p>
<p>比如下面的例子，就是访问USER-SERVER服务的/user请求，同时最后一个参数 didi 会替换 url 中的{1} 占位符，而返回的 ResponseEntity 对象中的 body 内容类型 会根据第二个参数转换为String类型。getForEntity 函数实际上提供了以下三种不同的重载实现。</p>
<ol>
<li>getForEntity(String url, Class responseType, Object... urlVariables):该方法提供 了三个参数，其中 url 为请求的地址，responseType为请求响应体body的包装类型，urlVariables为url中的参数绑定。</li>
<li>getForEntity(String url, Class responseType, Map urlVariables):该方法提供的参数中， 只有 urlVariables 的参数类型与上面的方法不同。这里使用了Map类型，所以使用该方法进行参数绑定时需要在占位符中指定Map中参数的 key 值。</li>
<li>getForEntity(UR工 url, Class responseType): 该方法使用URI 对象来 替代之前的 url 和 urlVariables 参数来指定访问地址和参数绑定。 URI 是 JDK java.net 包下的一个类，它表示一个统一 资源标识符 (Uniform Resource Identifier)引用。</li>
</ol>
<p>第二种: getForObject 函数。该方法可以理解为对 getForEntity的进一步封装， 它通过 HttpMessageConverterExtractor 对 HTTP 的请求响应体 body内容进行对象转换，实现请求直接返回包装好的对象内容。</p>
<h4 id="322-post请求">3.2.2 POST请求</h4>
<p>在 RestTemplate 中， 对 POST请求时可以通过如下三个方法进行调用实现。</p>
<p>第一种: postForEntity 函数。该方法同 GET 请求中的 getForEntity 类似， 会在调用后返回 ResponseEntity<T>对象， 其中T为请求响应的 body类型。<br>
第二种: postForObject 函数。</p>
<h4 id="323-put请求">3.2.3 PUT请求</h4>
<p>在RestTemplate中，对PUT请求可以通过put方法 进行调用实现，比如:</p>
<pre><code class="language-java">RestTemplate restTemplate = new RestTemplate ();
Long id = 100011;
User user = new User(&quot;didi&quot;, 40); restTemplate.put(&quot;http://USER-SERVICE/user/{l}&quot;, user, id);
</code></pre>
<p>• put(String url, Object request, Object... urlVariables)<br>
• put(String url, Object request, Map urlVariables)<br>
• put(URI url, Object request)</p>
<h4 id="324-delete请求">3.2.4 DELETE请求</h4>
<p>在RestTemplate中，对DELETE请求可以通过delete方法进行调用实现，比如:</p>
<pre><code class="language-java">RestTemplate restTemplate = new RestTemplate();
Long id= 10001L; 
restTemplate.delete(&quot;http://USER-SERVICE/user/{1)&quot;, id);
</code></pre>
<p>• delete(String url, Object ... urlVariables)<br>
• delete(String url, Map urlVariables)<br>
• delete(URI url)</p>
<h3 id="33-源码分析">3.3 源码分析</h3>
<p>RestTemplate 不是 Spring自己就提供的吗?跟Ribbon的客户端负载均衡又有什么关系呢?接下来看看Ribbon是如何通过 RestTemplate 实现客户端负载均衡的。</p>
<p>从<code>@LoadBalanced</code>注解源码的注释中可以知道， 该注解用来给RestTemplate做标记， 以使用负载均衡的客户端(LoadBalancerClient)来配置它。</p>
<p>通过搜索LoadBalancerClient可以发现 ， 这 是SpringCloud中定义的一个接口 :</p>
<pre><code class="language-java">public interface LoadBalancerClient extends ServiceInstanceChooser {
    &lt;T&gt; T execute(String var1, LoadBalancerRequest&lt;T&gt; var2) throws IOException;

    &lt;T&gt; T execute(String var1, ServiceInstance var2, LoadBalancerRequest&lt;T&gt; var3) throws IOException;

    URI reconstructURI(ServiceInstance var1, URI var2);
}

public interface ServiceInstanceChooser {
    ServiceInstance choose(String var1);
}
</code></pre>
<p>从该接口中，我们可以通过定义的抽象方法来了解客户端负载均衡器中应具备的几种能力。</p>
<ul>
<li>ServiceInstance choose(String var1)：根据传入的服务名 serviceld,从负载均衡器中挑选一个对应服务的实例。</li>
<li>T execute(String var1, LoadBalancerRequest<T> var2)：使用从负载均衡器中挑选出的服务实例来执行请求内容。</li>
<li><T> T execute(String var1, ServiceInstance var2, LoadBalancerRequest<T> var3) ：使用从负载均衡器中挑选出指定的服务实例来执行请求内容。</li>
<li>URI reconstructURI(ServiceInstance var1, URI var2)：为系统构建一个合适的host:post形式的URI。</li>
</ul>
<blockquote>
<p>ServiceInstance对象是带有host和port的具体服务实例 ， 而URI入参对象则是使用逻辑服务名定义为host的URI , 而返回的URI内容则是通过ServiceInstance的服务实例详情拼接出的具体host:post形式的请求地址。</p>
</blockquote>
<p>顺着LoadBalancerClient接口的所属包org .springframework.cloud.client.loadbalancer, 我们对其内容进行整理， 可以得出如下图所示的关系。<br>
<img src="https://q456qq520.github.io/post-images/1677995464270.png" alt="" loading="lazy"></p>
<p>其中，LoadBalancerAutoConfiguration 为实现客户端负载均衡器的自动化配置类。</p>
<pre><code class="language-java">@Configuration
@ConditionalOnClass({RestTemplate.class})
@ConditionalOnBean({LoadBalancerClient.class})
@EnableConfigurationProperties({LoadBalancerRetryProperties.class})
public class LoadBalancerAutoConfiguration {
    @LoadBalanced
    @Autowired( required = false)
    private List&lt;RestTemplate&gt; restTemplates = Collections.emptyList();
    @Autowired(required = false)
    private List&lt;LoadBalancerRequestTransformer&gt; transformers = Collections.emptyList();
    @Bean
    public SmartInitializingSingleton loadBalancedRestTemplateInitializer(final List&lt;RestTemplateCustomizer&gt; customizers) {
        return new SmartInitializingSingleton() {
            public void afterSingletonsInstantiated() {
                Iterator var1 = LoadBalancerAutoConfiguration.this.restTemplates.iterator();

                while(var1.hasNext()) {
                    RestTemplate restTemplate = (RestTemplate)var1.next();
                    Iterator var3 = customizers.iterator();

                    while(var3.hasNext()) {
                        RestTemplateCustomizer customizer = (RestTemplateCustomizer)var3.next();
                        customizer.customize(restTemplate);
                    }
                }
            }
        };
    }

    @Bean
    @ConditionalOnMissingBean
    public LoadBalancerRequestFactory loadBalancerRequestFactory(LoadBalancerClient loadBalancerClient) {
        return new LoadBalancerRequestFactory(loadBalancerClient, this.transformers);
    }
    
    @Configuration
    @ConditionalOnClass({RetryTemplate.class})
    public static class RetryInterceptorAutoConfiguration {
        public RetryInterceptorAutoConfiguration() {
        }

        @Bean
        @ConditionalOnMissingBean
        public RetryLoadBalancerInterceptor ribbonInterceptor(LoadBalancerClient loadBalancerClient, LoadBalancerRetryProperties properties, LoadBalancedRetryPolicyFactory lbRetryPolicyFactory, LoadBalancerRequestFactory requestFactory, LoadBalancedBackOffPolicyFactory backOffPolicyFactory) {
            return new RetryLoadBalancerInterceptor(loadBalancerClient, properties, lbRetryPolicyFactory, requestFactory, backOffPolicyFactory);
        }

        @Bean
        @ConditionalOnMissingBean
        public RestTemplateCustomizer restTemplateCustomizer(final RetryLoadBalancerInterceptor loadBalancerInterceptor) {
            return new RestTemplateCustomizer() {
                public void customize(RestTemplate restTemplate) {
                    List&lt;ClientHttpRequestInterceptor&gt; list = new ArrayList(restTemplate.getInterceptors());
                    list.add(loadBalancerInterceptor);
                    restTemplate.setInterceptors(list);
                }
            };
        }
    }

    @Configuration
    @ConditionalOnMissingClass({&quot;org.springframework.retry.support.RetryTemplate&quot;})
    static class LoadBalancerInterceptorConfig {
        LoadBalancerInterceptorConfig() {
        }

        @Bean
        public LoadBalancerInterceptor ribbonInterceptor(LoadBalancerClient loadBalancerClient, LoadBalancerRequestFactory requestFactory) {
            return new LoadBalancerInterceptor(loadBalancerClient, requestFactory);
        }

        @Bean
        @ConditionalOnMissingBean
        public RestTemplateCustomizer restTemplateCustomizer(final LoadBalancerInterceptor loadBalancerInterceptor) {
            return new RestTemplateCustomizer() {
                public void customize(RestTemplate restTemplate) {
                    List&lt;ClientHttpRequestInterceptor&gt; list = new ArrayList(restTemplate.getInterceptors());
                    list.add(loadBalancerInterceptor);
                    restTemplate.setInterceptors(list);
                }
            };
        }
    }
}
</code></pre>
<p>从LoadBalancerAutoConfiguration类头上的注解可以知道， Ribbon实现的负载均衡自动化配置需要满足下面条件。</p>
<ul>
<li>@ConditionalOnClass( RestTemplate.class): RestTemplate类必须存在当前工程的环境中。</li>
<li>@ConditionalOnBean(LoadBalancerClient.class): 在Spring的Bean工厂中必须有LoadBalancerClient的实现Bean。</li>
</ul>
<p>在该自动化配置类中， 主要做了下面三件事:</p>
<ul>
<li>创建了一个LoadBalancerInterceptor的Bean, 用于实现对客户端发起请时进行拦截， 以实现客户端负载均衡。</li>
<li>创建了一个RestTemplateCustomizer的Bean, 用于给RestTemplate增加 LoadBalancerInterceptor拦截器。</li>
<li>维护了一个被@LoadBalanced 注解修饰的RestTemplate对象列表，并在这里进行初始化，通过调用RestTemplateCustomizer的实例来给需要客户端负载均衡的RestTemplate增加LoadBalancerinterceptor拦截器。</li>
</ul>
<p>接下来， 我们看看LoadBalancerInterceptor 拦截器是如何将一个普通的RestTemplate变成客户端负载均衡的:</p>
<pre><code class="language-java">public class LoadBalancerInterceptor implements ClientHttpRequestInterceptor {
    private LoadBalancerClient loadBalancer;
    private LoadBalancerRequestFactory requestFactory;

    public LoadBalancerInterceptor(LoadBalancerClient loadBalancer, LoadBalancerRequestFactory requestFactory) {
        this.loadBalancer = loadBalancer;
        this.requestFactory = requestFactory;
    }

    public LoadBalancerInterceptor(LoadBalancerClient loadBalancer) {
        this(loadBalancer, new LoadBalancerRequestFactory(loadBalancer));
    }

    public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {
        URI originalUri = request.getURI();
        String serviceName = originalUri.getHost();
        Assert.state(serviceName != null, &quot;Request URI does not contain a valid hostname: &quot; + originalUri);
        return (ClientHttpResponse)this.loadBalancer.execute(serviceName, this.requestFactory.createRequest(request, body, execution));
    }
}
</code></pre>
<p>我们可以看到在拦截器中注入了LoadBalancerClient的实现。 当一个被@LoadBalanced注解修饰的 RestTemplate 对象向外发起HTTP请求时， 会被LoadBalancerInterceptor 类的 <code>intercept</code> 函数所拦截。 由于我们在使用RestTemplate时采用了服务名作为host, 所以直接从 <code>HttpRequest</code>的URI对象中 通过 <code>getHost ()</code>就可以拿到服务名，然后调用 <code>execute</code> 函数去根据服务名来选择实例并发起实际的请求。</p>
<p>分析到这里，LoadBalancerClient还只是一个抽象的负载均衡器接口 所以我们还需要找到它的具体实现类来进一步进行分析。通过查看Ribbon的源码，可以很容易地在 org.springframework.cloud.netflix.ribbon 包下找到对应的实现类Ribbon­LoadBalancerClient。</p>
<blockquote>
<p>org.springframework.cloud.netflix.ribbon.RibbonLoadBalancerClient</p>
</blockquote>
<pre><code class="language-java">public &lt;T&gt; T execute(String serviceId, LoadBalancerRequest&lt;T&gt; request) throws IOException {
    ILoadBalancer loadBalancer = this.getLoadBalancer(serviceId);
    Server server = this.getServer(loadBalancer);
    if (server == null) {
        throw new IllegalStateException(&quot;No instances available for &quot; + serviceId);
    } else {
        RibbonLoadBalancerClient.RibbonServer ribbonServer = new RibbonLoadBalancerClient.RibbonServer(serviceId, server, this.isSecure(server, serviceId), this.serverIntrospector(serviceId).getMetadata(server));
        return this.execute(serviceId, ribbonServer, request);
    }
}

public &lt;T&gt; T execute(String serviceId, ServiceInstance serviceInstance, LoadBalancerRequest&lt;T&gt; request) throws IOException {
    Server server = null;
    if (serviceInstance instanceof RibbonLoadBalancerClient.RibbonServer) {
        server = ((RibbonLoadBalancerClient.RibbonServer)serviceInstance).getServer();
    }

    if (server == null) {
        throw new IllegalStateException(&quot;No instances available for &quot; + serviceId);
    } else {
        RibbonLoadBalancerContext context = this.clientFactory.getLoadBalancerContext(serviceId);
        RibbonStatsRecorder statsRecorder = new RibbonStatsRecorder(context, server);

        try {
            T returnVal = request.apply(serviceInstance);
            statsRecorder.recordStats(returnVal);
            return returnVal;
        } catch (IOException var8) {
            statsRecorder.recordStats(var8);
            throw var8;
        } catch (Exception var9) {
            statsRecorder.recordStats(var9);
            ReflectionUtils.rethrowRuntimeException(var9);
            return null;
        }
    }
}
</code></pre>
<p>可以看到，在execute函数的实现中，第一步做的就是通过<code>getServer</code>根据传入的服务名<code>serviceId</code>去获得具体的服务实例:</p>
<pre><code class="language-java">protected Server getServer(ILoadBalancer loadBalancer) {
    return loadBalancer == null ? null : loadBalancer.chooseServer(&quot;default&quot;);
}
</code></pre>
<p>通过getServer函数的实现源码， 我们可以看到这里获取具体服务实例的时候并没 有使用LoadBalancerClient接口中的choose函数，而是使用了Netflix Ribbon自身的<code>ILoadBalancer接口</code>中定义的<code>chooseServer</code>函数。</p>
<p>我们先来认识一下这个 ILoadBalancer 接口:</p>
<pre><code class="language-java">public interface ILoadBalancer {
    //向负载均衡器中维护的实例列表增加服务实例。
    void addServers(List&lt;Server&gt; var1);
    //通过某种策略， 从负载均衡器中挑选出一个具体的服务实例。
    Server chooseServer(Object var1);
    //用来通知和标识负载均衡器中某个具体实例已经停止服务，不然负载均衡器在下一次获取服务实例清单前都会认为服务实例均是正常服务的。
    void markServerDown(Server var1);

    /** @deprecated */
    @Deprecated
    List&lt;Server&gt; getServerList(boolean var1);
    //获取当前正常服务的实例列表。
    List&lt;Server&gt; getReachableServers();
    //获取所有已知的服务实例列表， 包括正常服务和停止服务的实例。
    List&lt;Server&gt; getAllServers();
}
</code></pre>
<p>在该接口定义中涉及的Server对象定义是一个传统的服务端节点， 在该类中存储了服务端节点的一些元数据信息， 包括 host、 port 以及一 些部署信息等。</p>
<pre><code class="language-java">public class Server {
    public static final String UNKNOWN_ZONE = &quot;UNKNOWN&quot;;
    private String host;
    private int port;
    private String scheme;
    private volatile String id;
    private volatile boolean isAliveFlag;
    private String zone;
    private volatile boolean readyToServe;
    private Server.MetaInfo simpleMetaInfo;
</code></pre>
<p>而对于该接口的实现，有出如下图所示的结构。可以看到，BaseLoadBalancer类实现了基础的负载均衡，而 DynamicServerListLoaclBalancer和ZoneAwareLoaclBalancer在负载均衡的策略上做了一些功能的扩展。<br>
<img src="https://q456qq520.github.io/post-images/1677996949186.png" alt="" loading="lazy"></p>
<p>那么在整合ribbon的时候Spring Cloud默认采用了哪个具体实现呢?我们通ribbonClientConfiguration配置类，可以知道在整合时默认采用了ZoneAware­LoadBalancer来实现负载均衡器。</p>
<blockquote>
<p>`org.springframework.cloud.netflix.ribbon.ribbonClientConfiguration</p>
</blockquote>
<pre><code class="language-java">@Bean
@ConditionalOnMissingBean
public ILoadBalancer ribbonLoadBalancer(IClientConfig config, ServerList&lt;Server&gt; serverList, ServerListFilter&lt;Server&gt; serverListFilter, IRule rule, IPing ping, ServerListUpdater serverListUpdater) {
    return (ILoadBalancer)(this.propertiesFactory.isSet(ILoadBalancer.class, this.name) ? (ILoadBalancer)this.propertiesFactory.get(ILoadBalancer.class, config, this.name) : new ZoneAwareLoadBalancer(config, rule, ping, serverList, serverListFilter, serverListUpdater));
}
</code></pre>
<p>下面，我们再回到RibbonLoadBalancerClient的execute函数逻辑，在通过ZoneAwareLoadBalancer 的chooseServer函数获取了负载均衡策略分配到的服务实例对象Server之后，将其内容包装成<code>ribbonServer</code>对象(该对象除了存储了服务 实例的信息之外， 还增加了服务名serviceId、 是否需要使用 HTTPS 等其他信息)，然后使用该对象再回调LoadBalancerinterceptor请求拦截器中 LoadBalancerRequest的 <code>apply(final ServiceinsIance instance)</code>函数， 向一个实际的具体服务实例发起请求，从而实现一开始以服务名为host的URI请求到host:post 形式的实际访问地址的转换。</p>
<p>在apply(final Serviceinstance instance) 函数中传入的Serviceinstance接口对象是对服务实例的抽象定义。在该接口中暴露了服务治理系统中每个服务实例需要提供的一些基本信息，比如serviceld、 host、port等，具体定义如下:</p>
<pre><code class="language-java">public interface ServiceInstance {
    String getServiceId();

    String getHost();

    int getPort();

    boolean isSecure();

    URI getUri();

    Map&lt;String, String&gt; getMetadata();
}
</code></pre>
<p>而上面提到的具体包装Server服务实例的RibbonServer对象就是ServiceInstance接口的实现， 可以看到它除了包含Server对象之外， 还存储了服务名、是否使用HTTPS标识以及一个Map类型的元数据集合。</p>
<pre><code class="language-java">public static class RibbonServer implements ServiceInstance {
    private final String serviceId;
    private final Server server;
    private final boolean secure;
    private Map&lt;String, String&gt; metadata;

    public RibbonServer(String serviceId, Server server) {
        this(serviceId, server, false, Collections.emptyMap());
    }

    public RibbonServer(String serviceId, Server server, boolean secure, Map&lt;String, String&gt; metadata) {
        this.serviceId = serviceId;
        this.server = server;
        this.secure = secure;
        this.metadata = metadata;
    }
</code></pre>
<p>那么apply (final Serviceinstance instance)函数在接收到了具体ServiceInstance实例后，是如何通过 LoadBalancerClient 接口中的<code>reconstructURI</code>操作来组织具体请求地址的呢?</p>
<pre><code class="language-java">public LoadBalancerRequest&lt;ClientHttpResponse&gt; createRequest(final HttpRequest request, final byte[] body, final ClientHttpRequestExecution execution) {
    return new LoadBalancerRequest&lt;ClientHttpResponse&gt;() {
        public ClientHttpResponse apply(ServiceInstance instance) throws Exception {
            HttpRequest serviceRequest = new ServiceRequestWrapper(request, instance, LoadBalancerRequestFactory.this.loadBalancer);
            LoadBalancerRequestTransformer transformer;
            if (LoadBalancerRequestFactory.this.transformers != null) {
                for(Iterator var3 = LoadBalancerRequestFactory.this.transformers.iterator(); var3.hasNext(); serviceRequest = transformer.transformRequest((HttpRequest)serviceRequest, instance)) {
                    transformer = (LoadBalancerRequestTransformer)var3.next();
                }
            }

            return execution.execute((HttpRequest)serviceRequest, body);
        }
    };
}
</code></pre>
<p>可以看到它具体执行的时候，还传入了<code>ServiceRequest­Wrapper</code>对象，该对象继承了HttpRequestWrapper并重写了<code>getURI</code>函数，重写后的getURI通过调用LoadBalancerClient接口的 reconstructURI 函数来重新构建一个URI来进行访问。</p>
<p>在 LoadBalancerinterceptor 拦截器中， ClientHttpRequestExecution 的实例 具体执行 execution.execute(serviceRequest, body) 时， 会调用 Intercepting­ ClientHttpRequest 下 InterceptingRequestExecution 类的 execute 函数</p>
<pre><code class="language-java">public class ServiceRequestWrapper extends HttpRequestWrapper {
    private final ServiceInstance instance;
    private final LoadBalancerClient loadBalancer;

    public ServiceRequestWrapper(HttpRequest request, ServiceInstance instance, LoadBalancerClient loadBalancer) {
        super(request);
        this.instance = instance;
        this.loadBalancer = loadBalancer;
    }

    public URI getURI() {
        URI uri = this.loadBalancer.reconstructURI(this.instance, this.getRequest().getURI());
        return uri;
    }
}
</code></pre>
<p>此时，它就会使用 <code>RibbonLoadBalancerClient</code> 中实现的 reconstructURI 来组织具体请求的服务实例地址。</p>
<pre><code class="language-java">public URI reconstructURI(ServiceInstance instance, URI original) {
    Assert.notNull(instance, &quot;instance can not be null&quot;);
    String serviceId = instance.getServiceId();
    RibbonLoadBalancerContext context = this.clientFactory.getLoadBalancerContext(serviceId);
    Server server = new Server(instance.getHost(), instance.getPort());
    IClientConfig clientConfig = this.clientFactory.getClientConfig(serviceId);
    ServerIntrospector serverIntrospector = this.serverIntrospector(serviceId);
    URI uri = RibbonUtils.updateToHttpsIfNeeded(original, clientConfig, serverIntrospector, server);
    return context.reconstructURIWithServer(server, uri);
}
</code></pre>
<p>从 reconstructURI 函数中我们可以看到，它通过 ServiceInstance实例对象的 serviceid, 从 SpringeClientFactory 类的clientFactory对象 中获取对应 serviceId 的负载均衡器的上下文ribbonLoadBalancerContext对象。然后根据 ServiceInstance 中的信息来构建具体服务实例信息的 Server 对象，并使用 RibbonLoadBalancerContext对象的reconstructURIWithServer函数来构建服 务实例的URI。</p>
<p>简单介绍一 下上面提到的 SpringClientFactory 和 RibbonLoad­BalancerContext:<br>
• SpringClientFactory 类是一个用来创建客户端负载均衡器的工厂类， 该工厂类会为每一个不同名的 Ribbon客户端生成不同的 Spring 上下文。<br>
• RibbonLoadBalancerContext 类是 LoadBalancerContext的子类， 该类用与存储一些被负载均衡器 使用的上下文内容和API操作(reconstructURIWithServer就是其中之一)。</p>
<p>从reconstructURIWithServer的实现中我们可以看到，它同reconstructURI的定义类似。 只是reconstructURI的第一个保存具体服务实例的参数使用了Spring Cloud定义的ServiceInstance, 而reconstructURIWithServer中使用了Netflix中定义的 Server, 所以在 RibbonLoadBalancerClient 实现 reconstructURI 的 时候， 做了一次转换，使用Serviceinstance的host和port信息构建了 一 个 Server 对象来给reconstructURIWithServer使用。</p>
<p>从reconstructURIWithServer的 实现逻辑中， 我们可以看到， 它从 Server 对象中获取 host 和 port 信息， 然后根据以服务名为 host 的 URI 对象original中获取其他请求信息， 将两者内容进行拼接整合，形成最终要访间的服务实例的具体地址。</p>
<pre><code class="language-java">public URI reconstructURIWithServer(Server server, URI original) {
    String host = server.getHost();
    int port = server.getPort();
    String scheme = server.getScheme();
    if (host.equals(original.getHost()) &amp;&amp; port == original.getPort() &amp;&amp; scheme == original.getScheme()) {
        return original;
    } else {
        if (scheme == null) {
            scheme = original.getScheme();
        }

        if (scheme == null) {
            scheme = (String)this.deriveSchemeAndPortFromPartialUri(original).first();
        }

        try {
            StringBuilder sb = new StringBuilder();
            sb.append(scheme).append(&quot;://&quot;);
            if (!Strings.isNullOrEmpty(original.getRawUserInfo())) {
                sb.append(original.getRawUserInfo()).append(&quot;@&quot;);
            }

            sb.append(host);
            if (port &gt;= 0) {
                sb.append(&quot;:&quot;).append(port);
            }

            sb.append(original.getRawPath());
            if (!Strings.isNullOrEmpty(original.getRawQuery())) {
                sb.append(&quot;?&quot;).append(original.getRawQuery());
            }

            if (!Strings.isNullOrEmpty(original.getRawFragment())) {
                sb.append(&quot;#&quot;).append(original.getRawFragment());
            }

            URI newURI = new URI(sb.toString());
            return newURI;
        } catch (URISyntaxException var8) {
            throw new RuntimeException(var8);
        }
    }
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://q456qq520.github.io/post-images/1678069909739.png" alt="" loading="lazy"></figure>
<p>另外，从ribbonLoadBalancerClient的execute函数逻辑中，我们还能看到在回调拦截器中， 执行具体的请求之后，Ribbon还通过ribbonStatsRecorder对象对服务的请求进行了跟踪记录。</p>
<h3 id="34-负载均衡器">3.4 负载均衡器</h3>
<p>虽然SpringCloud中定义了LoadBalancerClient作为负载均衡器的通用接口， 并且针对Ribbon实现了ribbonLoadBalancerClient，但是它在具体实现客户端负载均衡时，是通过ribbon的ILoadBalancer接口实现的。</p>
<p>下面我们根据ILoadBalancer接口的实现类逐个看看它是如何实现客户端负载均衡的。</p>
<h4 id="341-abstractloadbalancer">3.4.1 AbstractloadBalancer</h4>
<p>AbstractLoadBalancer是ILoadBalancer接口的抽象实现。在该抽象类中定义了一个关于服务实例的分组枚举类 ServerGroup, 它包含三种不同类型。还实现了一个chooseServer()函数， 该函数通过调用接口中的chooseServer (Objectkey)实现， 其中参数key为null, 表示在选择具体服务实例时忽略key的条件判断。</p>
<pre><code class="language-java">public abstract class AbstractLoadBalancer implements ILoadBalancer {
    public AbstractLoadBalancer() {
    }

    public Server chooseServer() {
        return this.chooseServer((Object)null);
    }

    public abstract List&lt;Server&gt; getServerList(AbstractLoadBalancer.ServerGroup var1);

    public abstract LoadBalancerStats getLoadBalancerStats();

    public static enum ServerGroup {
        //所有服务实例
        ALL,
        //正常服务的实例
        STATUS_UP,
        //停止服务的实例
        STATUS_NOT_UP;

        private ServerGroup() {
        }
    }
}
</code></pre>
<p>最后， 还定义了两个抽象函数。<br>
• getServerList(ServerGroup serverGroup): 定义了根据分组类型来获取不同的服务实例的列表。<br>
• getLoadBalancerStats(): 定义了获取LoadBalancerStats 对象的方法，LoadBalancerStats对象被用来存储负载均衡器中各个服务实例当前的属性和统计信息。这些信息非常有用，我们可以利用这些信息来观察负载均衡器的运行情况，同时这些信息也是用来制定负载均衡策略的重要依据。</p>
<h4 id="342-baseloadbalancer">3.4.2 BaseloadBalancer</h4>
<p>BaseLoadBalancer类是ribbon负载均衡器的基础实现类，在该类中定义了很多关 于负载均衡器相关的基础内容。</p>
<ul>
<li>定义并维护了两个存储服务实例Server对象的列表。 一个用与存储所有服务实例的清单， 一个用于存储正常服务的实例清单。</li>
</ul>
<pre><code class="language-java">@Monitor(
    name = &quot;LoadBalancer_AllServerList&quot;,
    type = DataSourceType.INFORMATIONAL
)
protected volatile List&lt;Server&gt; allServerList;
@Monitor(
    name = &quot;LoadBalancer_UpServerList&quot;,
    type = DataSourceType.INFORMATIONAL
)
protected volatile List&lt;Server&gt; upServerList;
</code></pre>
<ul>
<li>
<p>定义了用来存储负载均衡器各服务实例属性和统计信息的LoadBalancerStats对象。</p>
</li>
<li>
<p>定义了检查服务实例是否正常服务的IPing对象，在BaseLoadBalancer中默认为null, 需要在构造时注入它的具体实现。</p>
</li>
<li>
<p>定义了检查服务实例操作的执行策略对象IPingStrategy,在BaseLoadBalancer中默认使用了该类中定义的静态内部类SerialPingStrategy实现。</p>
</li>
<li>
<p>定义了负载均衡的处理规则IRule对象，从BaseLoadBalancer中chooseServer(Object key) 的实现源码，我们可以知道，负载均衡器实际将服务实例选择任务委托给了IRule实例中的choose函数来实现。 而在这里， 默认初始化了RoundRobinRule为IRule 的实现对象。RoundRobinRule实现了最基本且常用的线性负载均衡规则。</p>
</li>
<li>
<p>启动ping任务:在BaseLoadBalancer的默认构造函数中，会直接启动一个用于定时检查 Server是否健康的任务。 该任务默认的执行间隔为10秒。</p>
</li>
<li>
<p>实现了ILoadBalancer接口定义的负载均衡器应具备以下一系列基本操作。<br>
1、addServers(List newServers): 向负载均衡器中增加新的服务实例列表。<br>
2、chooseServer(Object key): 挑选一个具体的服务实例。<br>
3、markServerDown(Server server): 标记某个服务实例暂停服务。<br>
4、getReachableServers(): 获取可用的服务实例列表。<br>
5、getA11Servers (): 获取所有的服务实例列表。</p>
</li>
</ul>
<pre><code class="language-java">public void addServers(List&lt;Server&gt; newServers) {
    if (newServers != null &amp;&amp; newServers.size() &gt; 0) {
        try {
            ArrayList&lt;Server&gt; newList = new ArrayList();
            newList.addAll(this.allServerList);
            newList.addAll(newServers);
            this.setServersList(newList);
        } catch (Exception var3) {
            logger.error(&quot;LoadBalancer [{}]: Exception while adding Servers&quot;, this.name, var3);
        }
    }
}

public Server chooseServer(Object key) {
    if (this.counter == null) {
        this.counter = this.createCounter();
    }

    this.counter.increment();
    if (this.rule == null) {
        return null;
    } else {
        try {
            return this.rule.choose(key);
        } catch (Exception var3) {
            logger.warn(&quot;LoadBalancer [{}]:  Error choosing server for key {}&quot;, new Object[]{this.name, key, var3});
            return null;
        }
    }
}

public void markServerDown(Server server) {
    if (server != null &amp;&amp; server.isAlive()) {
        logger.error(&quot;LoadBalancer [{}]:  markServerDown called on [{}]&quot;, this.name, server.getId());
        server.setAlive(false);
        this.notifyServerStatusChangeListener(Collections.singleton(server));
    }
}

public List&lt;Server&gt; getReachableServers() {
    return Collections.unmodifiableList(this.upServerList);
}

public List&lt;Server&gt; getAllServers() {
    return Collections.unmodifiableList(this.allServerList);
}
</code></pre>
<h4 id="343-dynamicserverlistloadbalancer">3.4.3 DynamicServerListloadBalancer</h4>
<p>DynamicServerListloadBalancer类继承于 BaseLoadBalancer 类，它是对基础负载均衡器的扩展。 在该负载均衡器中，实现了服务实例清单在运行期的动态更新能力;同时，它还具备了对服务实例清单的过滤功能，也就是说，我们可以通过过滤器来选择性地获取一批服务实例清单。</p>
<p><code>ServerList</code><br>
其中含有一个关于服务列表的操作对象ServerList<T> serverListimpl，其中泛型T从类名中对于T的限定DynamicServerListLoadBalancer<T extends Server>可以获知它是一个 Server 的子类，即代表了一个具体的服务实例的扩展类。而ServerList 接口定义如下所示:</p>
<pre><code class="language-java">public interface ServerList&lt;T extends Server&gt; {
    //用于获取初始化的服务实例清单
    List&lt;T&gt; getInitialListOfServers();
    //用于获取更新的服务实例清单 
    List&lt;T&gt; getUpdatedListOfServers();
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://q456qq520.github.io/post-images/1678073946735.png" alt="" loading="lazy"></figure>
<p>从上图中我可们以看到有多个ServerList 的实现类，那么在DynamicServer­ListLoadBalancer中的ServerList默认配置到底使用了哪个具体实现呢?然在该负载均衡器中需要实现 服务实例的动态更新， 那么势必需要Ribbon具备访问Eureka来获取服务实例的能力，所以我们从Spring Cloud整合和ribbon与Eureka的包org.springframework.cloud.netflix.ribbon.eureka下进行探索，可以找到配置类 <code>EurekaRibbonClientConfiguration</code>, 在该类中可以找到如下创建ServerList实例的内容:</p>
<pre><code class="language-java">@Bean
@ConditionalOnMissingBean
public ServerList&lt;?&gt; ribbonServerList(IClientConfig config) {
    DiscoveryEnabledNIWSServerList discoveryServerList = new DiscoveryEnabledNIWSServerList( config);
    DomainExtractingServerList serverList = new DomainExtractingServerList( discoveryServerList, config, this.approximateZoneFromHostname);
    return serverList;
}
</code></pre>
<p>这里创建的是 一个DomainExtractingServerList 实例，从下面它的源码中我们可以看到， 在它内部还定义了一个ServerList list。同时，Domain­ExtractingServerList类中getinitialListOfServers和getUpdated­ListOfServers的具体实现， 其实委托给了内部定义的ServerList list对象，而该对象是通过创建 DomainExtractingServerList 时，由构造函数传入的 DiscoveryEnabledNIWSServerList实现的。</p>
<pre><code class="language-java">public class DomainExtractingServerList implements ServerList&lt;DiscoveryEnabledServer&gt; {
    private ServerList&lt;DiscoveryEnabledServer&gt; list;
    private IClientConfig clientConfig;
    private boolean approximateZoneFromHostname;

    public DomainExtractingServerList(ServerList&lt;DiscoveryEnabledServer&gt; list, IClientConfig clientConfig, boolean approximateZoneFromHostname) {
        this.list = list;
        this.clientConfig = clientConfig;
        this.approximateZoneFromHostname = approximateZoneFromHostname;
    }

    public List&lt;DiscoveryEnabledServer&gt; getInitialListOfServers() {
        List&lt;DiscoveryEnabledServer&gt; servers = this.setZones(this.list.getInitialListOfServers());
        return servers;
    }

    public List&lt;DiscoveryEnabledServer&gt; getUpdatedListOfServers() {
        List&lt;DiscoveryEnabledServer&gt; servers = this.setZones(this.list.getUpdatedListOfServers());
        return servers;
    }

    private List&lt;DiscoveryEnabledServer&gt; setZones(List&lt;DiscoveryEnabledServer&gt; servers) {
        List&lt;DiscoveryEnabledServer&gt; result = new ArrayList();
        boolean isSecure = this.clientConfig.getPropertyAsBoolean(CommonClientConfigKey.IsSecure, Boolean.TRUE);
        boolean shouldUseIpAddr = this.clientConfig.getPropertyAsBoolean(CommonClientConfigKey.UseIPAddrForServer, Boolean.FALSE);
        Iterator var5 = servers.iterator();

        while(var5.hasNext()) {
            DiscoveryEnabledServer server = (DiscoveryEnabledServer)var5.next();
            result.add(new DomainExtractingServer(server, isSecure, shouldUseIpAddr, this.approximateZoneFromHostname));
        }

        return result;
    }
}
</code></pre>
<p>那么DiscoveryEnabledNIWSServerList是如何实现这两个服务实例获取的呢?我们从源码中可以看到这 两 个方法都是通过该类中的一个私有函数 obtainServersViaDiscovery 通过服务发现机制来实现服务实例的获取的。</p>
<blockquote>
<p>com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList</p>
</blockquote>
<pre><code class="language-java">public List&lt;DiscoveryEnabledServer&gt; getInitialListOfServers() {
    return this.obtainServersViaDiscovery();
}

public List&lt;DiscoveryEnabledServer&gt; getUpdatedListOfServers() {
    return this.obtainServersViaDiscovery();
}
</code></pre>
<p>而obtainServersViaDiscovery的实现逻辑如下所示，主要依靠EurekaClient从服务注册中心中获取到具体的服务实例InstanceInfo列表(这里传入的 vipAddress可以理解为逻辑上的服务名， 比如USER-SERVICE)。接着，对这些服务实例进行遍历，将状态为UP (正常服务)的实例转换成 DiscoveryEnabledServer对象， 最后将这些实例组织成列表返回。</p>
<pre><code class="language-java">private List&lt;DiscoveryEnabledServer&gt; obtainServersViaDiscovery() {
    List&lt;DiscoveryEnabledServer&gt; serverList = new ArrayList();
    if (this.eurekaClientProvider != null &amp;&amp; this.eurekaClientProvider.get() != null) {
        EurekaClient eurekaClient = (EurekaClient)this.eurekaClientProvider.get();
        if (this.vipAddresses != null) {
            String[] var3 = this.vipAddresses.split(&quot;,&quot;);
            int var4 = var3.length;

            for(int var5 = 0; var5 &lt; var4; ++var5) {
                String vipAddress = var3[var5];
                List&lt;InstanceInfo&gt; listOfInstanceInfo = eurekaClient.getInstancesByVipAddress(vipAddress, this.isSecure, this.targetRegion);
                Iterator var8 = listOfInstanceInfo.iterator();

                while(var8.hasNext()) {
                    InstanceInfo ii = (InstanceInfo)var8.next();
                    if (ii.getStatus().equals(InstanceStatus.UP)) {
                        if (this.shouldUseOverridePort) {
                            if (logger.isDebugEnabled()) {
                                logger.debug(&quot;Overriding port on client name: &quot; + this.clientName + &quot; to &quot; + this.overridePort);
                            }

                            InstanceInfo copy = new InstanceInfo(ii);
                            if (this.isSecure) {
                                ii = (new Builder(copy)).setSecurePort(this.overridePort).build();
                            } else {
                                ii = (new Builder(copy)).setPort(this.overridePort).build();
                            }
                        }

                        DiscoveryEnabledServer des = new DiscoveryEnabledServer(ii, this.isSecure, this.shouldUseIpAddr);
                        des.setZone(DiscoveryClient.getZone(ii));
                        serverList.add(des);
                    }
                }

                if (serverList.size() &gt; 0 &amp;&amp; this.prioritizeVipAddressBasedServers) {
                    break;
                }
            }
        }

        return serverList;
    } else {
        logger.warn(&quot;EurekaClient has not been initialized yet, returning an empty list&quot;);
        return new ArrayList();
    }
}
</code></pre>
<p>在DiscoveryEnabledNIWSServerLi江中通过EurekaClien七从服务注册中心 获取到最新的服务实例清单后， 返回的List到了DomainExtractingServerList类中，将继续通过setZones函数进行处理。而这里的处理具体内容如下所示， 主要完成将DiscoveryEnabledNIWSServerList返回的List列表中的元素， 转换成内部定义的DiscoveryEnabledServer 的子类对象 DomainExtractingServer, 在该对象的构造函数中将为服务实例对象设置一些必要的属性， 比如id、zone、isAliveFlag、readyToServe等信息。</p>
<pre><code class="language-java">private List&lt;DiscoveryEnabledServer&gt; setZones(List&lt;DiscoveryEnabledServer&gt; servers) {
    List&lt;DiscoveryEnabledServer&gt; result = new ArrayList();
    boolean isSecure = this.clientConfig.getPropertyAsBoolean(CommonClientConfigKey.IsSecure, Boolean.TRUE);
    boolean shouldUseIpAddr = this.clientConfig.getPropertyAsBoolean(CommonClientConfigKey.UseIPAddrForServer, Boolean.FALSE);
    Iterator var5 = servers.iterator();

    while(var5.hasNext()) {
        DiscoveryEnabledServer server = (DiscoveryEnabledServer)var5.next();
        result.add(new DomainExtractingServer(server, isSecure, shouldUseIpAddr, this.approximateZoneFromHostname));
    }

    return result;
}
</code></pre>
<p><code>ServerListUpdater</code><br>
通过上面的分析我们已经知道了ribbon与Eureka整合后，如何实现从Eureka Server中获取服务实例清单。那么它又是如何触发向 Eureka Server 去获取服务实例清单以及如何在获取到服务实例清单后更新本地的服务实例清单的呢?继续来看DynamicServer­ListLoadBalancer中的实现内容：</p>
<pre><code class="language-java">protected volatile ServerListUpdater serverListUpdater;
class NamelessClass_1 implements UpdateAction {
    NamelessClass_1() {
    }

    public void doUpdate() {
        DynamicServerListLoadBalancer.this.updateListOfServers();
    }
}

this.updateAction = new NamelessClass_1();
</code></pre>
<p>在ServerListUpdater内部还定义了一个UpdateAction接口，上面定义的updateAction对象就是以匿名内部 类的方式创建了一个它的具体实现，其中doUpdate实现的内容就是对Serverlist的具体更新操作。除此之外，ServerListUpdater中还定义了一系列控制它和获取它的信息的操作。</p>
<pre><code class="language-java">public interface ServerListUpdater {
    //启动服务更新器，传入的UpdateAction对象为更新操作的具体实现。
    void start(ServerListUpdater.UpdateAction var1);
    //停止服务更新器
    void stop();
    //荻取最近的更新时间戳
    String getLastUpdate();
    //获取上一次更新到现在的时间间隔，单位为毫秒
    long getDurationSinceLastUpdateMs();
    //荻取错过的更新周期数
    int getNumberMissedCycles();
    //荻取核心线程数
    int getCoreThreads();

    public interface UpdateAction {
        void doUpdate();
    }
}
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://q456qq520.github.io/post-images/1678086494267.png" alt="" loading="lazy"></figure>
<p>而ServerListUpdater的实现类不多，根据两个类的注释，我们可以很容易地知道它们的作用。</p>
<ul>
<li>PollingServerListUpdater: 动态服务列表更新的默认策略，DynamicServerListLoadBalancer负载均衡器中的默认实现就是它，它通过定时任务的方式进行服务列表的更新。</li>
<li>EurekaNotificationServerListUpdater: 该更新器也可服务于 Dynamic­ServerListLoadBalancer负载均衡器，但是它的触发机制与PollingServer­ListUpdater不同，它需要利用Eureka的事件监听器来驱动服务列表的更新操作。</li>
</ul>
<p>下面我们来详细看看它默认实现的PollingServerListUpdater。 先从用于启动 “服务更新器 ” 的 start函数源码看起，具体如下。它先创建了一个Runnable的线程实现，在该实现中调用了上面提到的具体更新服务实例列表的方法updateAcyion.doUpdate(), 最后再为这个Runnable线程实现启动了一个定时任务来执行。</p>
<pre><code class="language-java">public synchronized void start(final UpdateAction updateAction) {
    if (this.isActive.compareAndSet(false, true)) {
        Runnable wrapperRunnable = new Runnable() {
            public void run() {
                if (!PollingServerListUpdater.this.isActive.get()) {
                    if (PollingServerListUpdater.this.scheduledFuture != null) {
                        PollingServerListUpdater.this.scheduledFuture.cancel(true);
                    }

                } else {
                    try {
                        updateAction.doUpdate();
                        PollingServerListUpdater.this.lastUpdated = System.currentTimeMillis();
                    } catch (Exception var2) {
                        PollingServerListUpdater.logger.warn(&quot;Failed one update cycle&quot;, var2);
                    }

                }
            }
        };
        this.scheduledFuture = getRefreshExecutor().scheduleWithFixedDelay(wrapperRunnable, this.initialDelayMs, this.refreshIntervalMs, TimeUnit.MILLISECONDS);
    } else {
        logger.info(&quot;Already active, no-op&quot;);
    }
}
</code></pre>
<p>我们可以找到用于启动定时任务的两个重要参数<code>initialDelayMs</code>和<code>refreshIntervalMs</code>的默认定义分别为 1000和30*1000, 单位为毫秒。 也就是说， 更新服务实例在初始化之后延迟1秒后开始执行，并以 30秒为周期重复执行。除了这些内容之外，还能看到它还会记录最后更新时间、是否存活等信息，同时也实现了ServerListUpdater中定义的一 些其他操作内容。</p>
<p><code>ServerListFilter</code><br>
我们回到updateAction. doUpdate()调用的具体实现位置，在DynamicServerListLoadBalancer中， 它的实际实现委托给了updateListOfServers函数，具体实现如下:</p>
<pre><code class="language-java">@VisibleForTesting
public void updateListOfServers() {
    List&lt;T&gt; servers = new ArrayList();
    if (this.serverListImpl != null) {
        servers = this.serverListImpl.getUpdatedListOfServers();
        LOGGER.debug(&quot;List of Servers for {} obtained from Discovery client: {}&quot;, this.getIdentifier(), servers);
        if (this.filter != null) {
            servers = this.filter.getFilteredListOfServers((List)servers);
            LOGGER.debug(&quot;Filtered List of Servers for {} obtained from Discovery client: {}&quot;, this.getIdentifier(), servers);
        }
    }

    this.updateAllServerList((List)servers);
}
</code></pre>
<p>可以看到这里终于用到了之前提到的ServerList的getUpdatedListOfServers() 通过之前的介绍已经知道这一步实现从Eureka Server中获取服务可用实例的列表。 在获得了服务实例列表之后，这里又将引入一个新的对象filter, 追溯该对象的定义，我们可以找到它是ServerListFilter定义的。</p>
<p>ServerListFilter接口非常简单，该接口中定义了一个方法List getFiltered ListOfServers(List servers), 主要用于实现对服务实例列表的过滤，通过传入的服务实例清单，根据一些规则返回过滤后的服务实例清单。 该接口的实现如下图所示。<br>
<img src="https://q456qq520.github.io/post-images/1678088123586.png" alt="" loading="lazy"></p>
<p>其中， 除了ZonePreferenceServerListFilter的实现是Spring Cloud Ribbon中对Netflix Ribbon的扩展实现外，其他均是Netflix Ribbon中的原生实现类。下面，我们 可以分别看看这些过滤器实现都有什么特点。</p>
<ul>
<li>AbstractServerListFilter: 这是一个抽象过滤器，在这里定义了过滤时需要的一个重要依据对象 LoadBalancerStats,，该对象存储了关于负载均衡器的一些属性和统计信息等。</li>
</ul>
<pre><code class="language-java">public abstract class AbstractServerListFilter&lt;T extends Server&gt; implements ServerListFilter&lt;T&gt; {
    private volatile LoadBalancerStats stats;

    public AbstractServerListFilter() {
    }

    public void setLoadBalancerStats(LoadBalancerStats stats) {
        this.stats = stats;
    }

    public LoadBalancerStats getLoadBalancerStats() {
        return this.stats;
    }
}
</code></pre>
<ul>
<li>ZoneAffinityServerListFilter: 该过滤器基于==区域感知 (Zone Affinity)==的方式实现服务实例的过滤，也就是说，它会根据提供服务的实例所处的区域 (Zone) 与消费者自身的所处区域 (Zone) 进行比较，过滤掉那些不是同处一个区域的实例。</li>
</ul>
<pre><code class="language-java">public List&lt;T&gt; getFilteredListOfServers(List&lt;T&gt; servers) {
    if (this.zone != null &amp;&amp; (this.zoneAffinity || this.zoneExclusive) &amp;&amp; servers != null &amp;&amp; servers.size() &gt; 0) {
        List&lt;T&gt; filteredServers = Lists.newArrayList(Iterables.filter(servers, this.zoneAffinityPredicate.getServerOnlyPredicate()));
        if (this.shouldEnableZoneAffinity(filteredServers)) {
            return filteredServers;
        }

        if (this.zoneAffinity) {
            this.overrideCounter.increment();
        }
    }
    return servers;
}
</code></pre>
<p>对千服务实例列表的过滤是通过Iterables. filter(servers,this.zoneAffinityPredicate.getServerOnlyPredicate()) 来实现的，其中判断依据由 ZoneAffinityPredicate实现服务实例与消费者的Zone比较。而在过滤之后，这里并不会马上返回过滤的结果，而是通过 shouldEnableZone­Affinity函数来判断是否要启用区域感知的功能。</p>
<p>从下面shouldEnableZoneAffinity的实现中，它使用了LoadBalancerStats的getZoneSnapshot方法 来获取这些过滤后的同区域实例的基础指标(包含实例数量、断路器断开数、 活动请求数、 实例平均负载等)，根据一系列的算法求出下 面的几个评价值并与设置的阙值进行对比(下面的为默认值)，若有一个条件符合， 就不启用区域感知过滤的服务实例清单。这一算法实现为集群出现区域故障时，依然可以依靠其他区域的实例进行正常服务提供了完善的高可用保障。<br>
1、blackOutServerPercentage: 故障实例百分比(断路器断开数/实例数量) &gt;=0.8。<br>
2、activeReqeustsPerServer: 实例平均负载 &gt;=0.6 。<br>
3、availableServers: 可用实例数(实例数量 - 断路器断开数)&lt; 2。</p>
<pre><code class="language-java">private boolean shouldEnableZoneAffinity(List&lt;T&gt; filtered) {
    if (!this.zoneAffinity &amp;&amp; !this.zoneExclusive) {
        return false;
    } else if (this.zoneExclusive) {
        return true;
    } else {
        LoadBalancerStats stats = this.getLoadBalancerStats();
        if (stats == null) {
            return this.zoneAffinity;
        } else {
            logger.debug(&quot;Determining if zone affinity should be enabled with given server list: {}&quot;, filtered);
            ZoneSnapshot snapshot = stats.getZoneSnapshot(filtered);
            double loadPerServer = snapshot.getLoadPerServer();
            int instanceCount = snapshot.getInstanceCount();
            int circuitBreakerTrippedCount = snapshot.getCircuitTrippedCount();
            if (!((double)circuitBreakerTrippedCount / (double)instanceCount &gt;= this.blackOutServerPercentageThreshold.get()) &amp;&amp; !(loadPerServer &gt;= this.activeReqeustsPerServerThreshold.get()) &amp;&amp; instanceCount - circuitBreakerTrippedCount &gt;= this.availableServersThreshold.get()) {
                return true;
            } else {
                logger.debug(&quot;zoneAffinity is overriden. blackOutServerPercentage: {}, activeReqeustsPerServer: {}, availableServers: {}&quot;, new Object[]{(double)circuitBreakerTrippedCount / (double)instanceCount, loadPerServer, instanceCount - circuitBreakerTrippedCount});
                return false;
            }
        }
    }
}
</code></pre>
<ul>
<li>DefaultNIWSServerListFilter: 该过滤器完全继承自ZoneAffinity­ServerListFilter, 是默认的NIWS (Netflix Internal Web Service)过滤器。</li>
<li>ServerListSubsetFilter: 该过滤器也继承自 ZoneAffinityServer­ListFilter, 它非常适用于拥有大规模服务器集群(上百或更多)的系统。 因为它可以产生一个区域感知结果的子集列表，同时它还能够通过比较服务实例的通信失败数量和并发连接数来判定该服务是否健康来选择性地从服务实例列表中剔除那些相对不够健康的实例。</li>
<li>ZonePreferenceServerListFilter: Spring Cloud整合时新增的过滤器。若使用Spring Cloud整合Eureka和Ribbon时会默认使用该过滤器。它实现了通过配置或者Eureka实例元数据的所属区域 (Zone) 来过滤出同区域的服务实例。</li>
</ul>
<pre><code class="language-java">public List&lt;Server&gt; getFilteredListOfServers(List&lt;Server&gt; servers) {
    List&lt;Server&gt; output = super.getFilteredListOfServers(servers);
    if (this.zone != null &amp;&amp; output.size() == servers.size()) {
        List&lt;Server&gt; local = new ArrayList();
        Iterator var4 = output.iterator();

        while(var4.hasNext()) {
            Server server = (Server)var4.next();
            if (this.zone.equalsIgnoreCase(server.getZone())) {
                local.add(server);
            }
        }

        if (!local.isEmpty()) {
            return local;
        }
    }
    return output;
}
</code></pre>
<p>首先通过父类ZoneAffinityServerListFilter的过滤器来获得区域感的服务实例列表，然后遍历这个结果，取出根据消费 者配置预设的区域Zone来进行过滤，如果过滤的结果是空就直接返回父类获取的<br>
结果 如果不为空就返回通过消费者配置的Zone过滤后的结果。</p>
<h4 id="344-zoneawareloadbalancer">3.4.4 ZoneAwareloadBalancer</h4>
<p>ZoneAwareLoadBalancer负载均衡器是对DynamicServerListLoadBalancer的扩展。在 DynamicServerListLoadBalancer中，我们可以看到它并没有重写选择具体服务实例的chooseServer 函数，所以它依然会采用在BaseLoadBalancer中实现的算法。使用 RoundRobinRule 规则，以线性轮询的方式来选择调用的服务实例，该算法实现简单并没有区域 (Zone) 的概念，所以它会把所有实例视为一个 Zone下的节点来看待，这样就会周期性地产生跨区域 (Zone) 访问的情况，由于跨区域会产生更高的延迟， 这些实例主要以防止区域性故障实现高可用为目的而不能作为常规访问的实例，所以在多区域部署的清况下会有一定的性能问题，而该负载均衡器则可以避免这样的问题。 那么它是如何实现的呢?</p>
<p>首先在ZoneAwareLoadBalancer中，我们可以发现，它并没有重写setServersList, 说明实现服务实例清单的更新主逻辑没有修改。但是我们可以发现它重写了这个函数setServerListForZones(Map&lt;String, List<Server>&gt;zoneServersMap)。</p>
<p>看到这里可能会有一 些陌生，因为它并不是接口中定义的必备函数， 所以我们不妨去父类 DynamicServerListLoadBalancer中寻找一下该函数，我们可以找到下面的定义:</p>
<blockquote>
<p>DynamicServerListLoadBalancer</p>
</blockquote>
<pre><code class="language-java">public void setServersList(List lsrv) {
    super.setServersList(lsrv);
    Map&lt;String, List&lt;Server&gt;&gt; serversInZones = new HashMap();
    Iterator var4 = lsrv.iterator();

    while(var4.hasNext()) {
        Server server = (Server)var4.next();
        this.getLoadBalancerStats().getSingleServerStat(server);
        String zone = server.getZone();
        if (zone != null) {
            zone = zone.toLowerCase();
            List&lt;Server&gt; servers = (List)serversInZones.get(zone);
            if (servers == null) {
                servers = new ArrayList();
                serversInZones.put(zone, servers);
            }

            ((List)servers).add(server);
        }
    }

    this.setServerListForZones(serversInZones);
}

protected void setServerListForZones(Map&lt;String, List&lt;Server&gt;&gt; zoneServersMap) {
    LOGGER.debug(&quot;Setting server list for zones: {}&quot;, zoneServersMap);
    this.getLoadBalancerStats().updateZoneServerMapping(zoneServersMap);
}
</code></pre>
<p>setServerListForZones函数的调用位于更新服务实例清单函数setServers­List的最后，同时从其实现的内容来看，它在父类 DynamicServerListLoadBalancer中的作用是根据按区域Zone分组的实例列表， 为负载均衡器中的LoadBalancerStats对象创建Zonestats并放入Map zonestatsMap 集合中，每一个区域Zone对应一个ZoneStats, 它用于存储每个Zone 的一些状态和统计信息。</p>
<p>在 ZoneAwareLoadBalancer 中对 setServerListForZones 的重写如下:</p>
<pre><code class="language-java">protected void setServerListForZones(Map&lt;String, List&lt;Server&gt;&gt; zoneServersMap) {
    super.setServerListForZones(zoneServersMap);
    if (this.balancers == null) {
        this.balancers = new ConcurrentHashMap();
    }

    Iterator var2 = zoneServersMap.entrySet().iterator();

    Entry existingLBEntry;
    while(var2.hasNext()) {
        existingLBEntry = (Entry)var2.next();
        String zone = ((String)existingLBEntry.getKey()).toLowerCase();
        this.getLoadBalancer(zone).setServersList((List)existingLBEntry.getValue());
    }

    var2 = this.balancers.entrySet().iterator();
    while(var2.hasNext()) {
        existingLBEntry = (Entry)var2.next();
        if (!zoneServersMap.keySet().contains(existingLBEntry.getKey())) {
            ((BaseLoadBalancer)existingLBEntry.getValue()).setServersList(Collections.emptyList());
        }
    }
}
</code></pre>
<p>可以看到，在该实现中创建了一个ConcurrentHashMap() 类型的balancers对象，它将用来存储每个 Zone区域对应的负载均衡器。而具体的负载均衡器的创建则是通过在下面的第一个循环中调用getLoadBalancer函数来完成，同时在创建负载均衡器的时候会创建它的规则(如果当前实现中没有IRule的实例，就创建一个 AvailabilityFilteringRule规则;如果已经有具体实例，就克隆一个)。在创建完负载均衡器后又马上调用setServersList函数为其设置对应Zone区域的实例清单。而第二个循环则是对 Zone 区域中实例清单的检查，看看是否有Zone区域下已经没有实例了，是的话就将balancers中对应Zone区域的实例列表清空，该操作的作用是为了后续选择节点时，防止过时的Zone区域统计信息干扰具体实例的选择算法。</p>
<p>在了解了该负载均衡器是如何扩展服务实例清单的实现后， 我们来具体看看它是如何挑选服务实例，来实现对区域的识别的:</p>
<pre><code class="language-java">public Server chooseServer(Object key) {
    if (ENABLED.get() &amp;&amp; this.getLoadBalancerStats().getAvailableZones().size() &gt; 1) {
        Server server = null;

        try {
            LoadBalancerStats lbStats = this.getLoadBalancerStats();
            Map&lt;String, ZoneSnapshot&gt; zoneSnapshot = ZoneAvoidanceRule.createSnapshot(lbStats);
            logger.debug(&quot;Zone snapshots: {}&quot;, zoneSnapshot);
            if (this.triggeringLoad == null) {
                this.triggeringLoad = DynamicPropertyFactory.getInstance().getDoubleProperty(&quot;ZoneAwareNIWSDiscoveryLoadBalancer.&quot; + this.getName() + &quot;.triggeringLoadPerServerThreshold&quot;, 0.2D);
            }

            if (this.triggeringBlackoutPercentage == null) {
                this.triggeringBlackoutPercentage = DynamicPropertyFactory.getInstance().getDoubleProperty(&quot;ZoneAwareNIWSDiscoveryLoadBalancer.&quot; + this.getName() + &quot;.avoidZoneWithBlackoutPercetage&quot;, 0.99999D);
            }

            Set&lt;String&gt; availableZones = ZoneAvoidanceRule.getAvailableZones(zoneSnapshot, this.triggeringLoad.get(), this.triggeringBlackoutPercentage.get());
            if (availableZones != null &amp;&amp; availableZones.size() &lt; zoneSnapshot.keySet().size()) {
                String zone = ZoneAvoidanceRule.randomChooseZone(zoneSnapshot, availableZones);
                if (zone != null) {
                    BaseLoadBalancer zoneLoadBalancer = this.getLoadBalancer(zone);
                    server = zoneLoadBalancer.chooseServer(key);
                }
            }
        } catch (Exception var8) {
        }

        if (server != null) {
            return server;
        } else {
            return super.chooseServer(key);
        }
    } else {
        return super.chooseServer(key);
    }
}
</code></pre>
<p>只有当负载均衡器中维护的实例所属的Zone区域的个数大于 1 的时候才会执行这里的选择策略，否则还是将使用父类的实现。当Zone区域的个数大于1的时候，它的实现步骤如下所示。<br>
• 调用ZoneAvoidanceRule中的静态方法createSnapshot(lbStats)为当前负载均衡器中所有的Zone区域分别创建快照，保存在Map zoneSnapshot中 这些快照中的数据将用于后续的算法。<br>
• 调用ZoneAvoidanceRule中的静态方法getAvailableZones(zoneSnapshot, this.triggeringLoad.get(), this.triggeringBlackoutPercentage.get())，来获取可用的Zone区域集合，在该函数中会通过Zone区域快照中的统计数据来实现可用区的挑选。<br>
首先它会剔除符合这些规则的Zone区域: 所属实例数为零的Zone区域; Zone区域内实例的平均负载小于零，或者实例故障率( 断路器断开次数/实例数)大于等于阙值(默认为0.99999)。<br>
然后根据Zone区域的实例平均负载计算出最差的Zone区域，这里的最差指的是实例平均负载最高的Zone区域。<br>
如果在上面的过程中没有符合剔除要求的区域，同时实例最大平均负载小于阈值 (默认为20%), 就直接返回所有Zone区域为可用区域。 否则，从最坏Zone区域集合中随机选择一个，将它从可用Zone区域集合中 剔除。<br>
• 当获得的可用Zone区域集合不为空，并且个数小于Zone区域总数，就随机选择一个Zone区域。<br>
• 在确定了某个Zone区域后，则获取了对应Zone区域的服务均衡器，并调用chooseServer来选择具体的服务实例，而在chooseServer中将使用IRule接口的choose函数来选择具体的服务实例。在这里IRule接口的实现会使用ZoneAvoidanceRule来挑选出具体的服务实例。</p>
<h3 id="35-负载均衡策略">3.5 负载均衡策略</h3>
<p>Ribbon中实现了非常多的选择策略，其中也包含了我们在前面内容中提到过的RoundRobinRule和ZoneAvoidanceRule。下面我们来详细解读一下IRule接口的各个实现。</p>
<figure data-type="image" tabindex="5"><img src="https://q456qq520.github.io/post-images/1678098942806.png" alt="" loading="lazy"></figure>
<h4 id="351-abstractloadbalancerrule">3.5.1 AbstractloadBalancerRule</h4>
<p>负载均衡策略的抽象类，在该抽象类中定义了负载均衡器ILoadBalancer对象，该对象能够在具体实现选择服务策略时，获取到一些负载均衡器中维护的信息来作为分配依据，并以此设计一些符法来实现针对特定场景的高效策略。</p>
<pre><code class="language-java">public abstract class AbstractLoadBalancerRule implements IRule, IClientConfigAware {
    private ILoadBalancer lb;

    public AbstractLoadBalancerRule() {
    }

    public void setLoadBalancer(ILoadBalancer lb) {
        this.lb = lb;
    }

    public ILoadBalancer getLoadBalancer() {
        return this.lb;
    }
}
</code></pre>
<h4 id="352-randomrule">3.5.2 RandomRule</h4>
<p>该策略实现了从服务实例清单中随机选择一个服务实例的功能。可以看到IRule接口的choose (Object key)函数实现，委托给了该类中的choose (ILoadBalancer lb, Object key), 该方法增加了一个负载均衡器对象的参数。从具体的实现上看，它会使用传入的负载均衡器来获得可用实例列表upList和所有实例列表 allList, 并通过rand.nextInt(serverCount)函数来获取一个随机数，并将该随机数作为upList的索引值来返回具体实例。同时，具体的选择逻辑在一个while(server == null)循环之内，而根据选择逻辑的实现，正常情况下每次选择都应该选出一个服务实例，如果出现死循环获取不到服务实例时，则很有可能存在并发的Bug。</p>
<pre><code class="language-java">@SuppressWarnings({&quot;RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE&quot;})
public Server choose(ILoadBalancer lb, Object key) {
    if (lb == null) {
        return null;
    } else {
        Server server = null;
        while(server == null) {
            if (Thread.interrupted()) {
                return null;
            }

            List&lt;Server&gt; upList = lb.getReachableServers();
            List&lt;Server&gt; allList = lb.getAllServers();
            int serverCount = allList.size();
            if (serverCount == 0) {
                return null;
            }
            int index = this.rand.nextInt(serverCount);
            server = (Server)upList.get(index);
            if (server == null) {
                Thread.yield();
            } else {
                if (server.isAlive()) {
                    return server;
                }
                server = null;
                Thread.yield();
            }
        }
        return server;
    }
}

public Server choose(Object key) {
    return this.choose(this.getLoadBalancer(), key);
}
</code></pre>
<h4 id="353-roundrobinrule">3.5.3 RoundRobinRule</h4>
<p>该策略实现了按照线性轮询的方式依次选择每个服务实例的功能。它的具体实现如下，其详细结构与 RandomRule 非常类似。除了循环条件不同外，就是从可用列表中获取所谓的逻辑不同。 从循环条件中，我们可以看到增加了一个 count计数变量，该变量会在每次循环之后累加，也就是说，如果一直选择不到server超过10次，那么就会结束尝试，并打印一个警告信息。</p>
<p>而线性轮询的实现则是通过Atomicinteger nextServerCyclicCounter对象实现，每次进行实例选择时通过调用incrementAndGetModulo函数实现递增。</p>
<pre><code class="language-java">public Server choose(ILoadBalancer lb, Object key) {
    if (lb == null) {
        return null;
    } else {
        Server server = null;
        int count = 0;

        while(true) {
            if (server == null &amp;&amp; count++ &lt; 10) {
                List&lt;Server&gt; reachableServers = lb.getReachableServers();
                List&lt;Server&gt; allServers = lb.getAllServers();
                int upCount = reachableServers.size();
                int serverCount = allServers.size();
                if (upCount != 0 &amp;&amp; serverCount != 0) {
                    int nextServerIndex = this.incrementAndGetModulo(serverCount);
                    server = (Server)allServers.get(nextServerIndex);
                    if (server == null) {
                        Thread.yield();
                    } else {
                        if (server.isAlive() &amp;&amp; server.isReadyToServe()) {
                            return server;
                        }

                        server = null;
                    }
                    continue;
                }

                return null;
            }

            if (count &gt;= 10) {
            }

            return server;
        }
    }
}
</code></pre>
<h4 id="354-retryrule">3.5.4 RetryRule</h4>
<p>该策略实现了一个具备重试机制的实例选择功能。在其内部还定义了一个IRule对象，默认使用了 RoundRobinRule实例。而在choose方法中则实现了对内部定义的策略进行反复尝试的策略， 若期间能够选择到具体的服务实例就返回，若选择不到就根据设置的尝试结束时间为阙值(maxRetryMillis 参数定义的值 + choose 方法开始执行的时间戳)， 当超过该阑值后就返回 null。</p>
<pre><code class="language-java">public class RetryRule extends AbstractLoadBalancerRule {
    IRule subRule = new RoundRobinRule();
    long maxRetryMillis = 500L;
     public Server choose(ILoadBalancer lb, Object key) {
        long requestTime = System.currentTimeMillis();
        long deadline = requestTime + this.maxRetryMillis;
        Server answer = null;
        answer = this.subRule.choose(key);
        if ((answer == null || !answer.isAlive()) &amp;&amp; System.currentTimeMillis() &lt; deadline) {
            InterruptTask task = new InterruptTask(deadline - System.currentTimeMillis());

            while(!Thread.interrupted()) {
                answer = this.subRule.choose(key);
                if (answer != null &amp;&amp; answer.isAlive() || System.currentTimeMillis() &gt;= deadline) {
                    break;
                }

                Thread.yield();
            }

            task.cancel();
        }

        return answer != null &amp;&amp; answer.isAlive() ? answer : null;
    }
}
</code></pre>
<h4 id="355-weightedresponsetimerule">3.5.5 WeightedResponseTimeRule</h4>
<p>该策略是对RoundRobinRule的扩展，增加了根据实例的运行情况来计算权重， 并根据权重来挑选实例， 以达到更优的分配效果，它的实现主要有三个核心内容。</p>
<p><code>定时任务</code><br>
WeightedResponseTimeRule策略在初始化的时候会通过==serverWeightTimer. schedule (new DynamicServerWeightTask(), 0, serverWeightTaskTimerinterval)==启动一个定时任务， 用来为每个服务实例计算权重，该任务默认30秒执行一次。</p>
<pre><code class="language-java">class DynamicServerWeightTask extends TimerTask {
    DynamicServerWeightTask() {
    }

    public void run() {
        WeightedResponseTimeRule.ServerWeight serverWeight = WeightedResponseTimeRule.this.new ServerWeight();

        try {
            serverWeight.maintainWeights();
        } catch (Exception var3) {
            WeightedResponseTimeRule.logger.error(&quot;Error running DynamicServerWeightTask for {}&quot;, WeightedResponseTimeRule.this.name, var3);
        }

    }
}
</code></pre>
<p><code>权重计算</code><br>
用千存储权重的对象为List<Double> accumulatedWeights = new ArrayList() , 该List 中每个权重值所处的位置对应了负载均衡器维护的服务实例清单中所有实例在清单中的位置。维护实例权重的计算过程通过maintainWeights函数实现，具体如下面的代码所示:</p>
<pre><code class="language-java">class ServerWeight {
    ServerWeight() {
    }

    public void maintainWeights() {
        ILoadBalancer lb = WeightedResponseTimeRule.this.getLoadBalancer();
        if (lb != null) {
            if (WeightedResponseTimeRule.this.serverWeightAssignmentInProgress.compareAndSet(false, true)) {
                try {
                    WeightedResponseTimeRule.logger.info(&quot;Weight adjusting job started&quot;);
                    AbstractLoadBalancer nlb = (AbstractLoadBalancer)lb;
                    LoadBalancerStats stats = nlb.getLoadBalancerStats();
                    if (stats != null) {
                        //计算所有实例的平均响应时间的总和
                        double totalResponseTime = 0.0D;

                        ServerStats ss;
                        for(Iterator var6 = nlb.getAllServers().iterator(); var6.hasNext(); totalResponseTime += ss.getResponseTimeAvg()) {
                            Server server = (Server)var6.next();
                            //如果服务实例的状态快照不在缓存中， 那么这里会进行自动加载
                            ss = stats.getSingleServerStat(server);
                        }
                        //逐个计算每个实例的权重: weightSoFar + totalResponseTime -实例的平均响应时间
                        Double weightSoFar = 0.0D;
                        List&lt;Double&gt; finalWeights = new ArrayList();
                        Iterator var20 = nlb.getAllServers().iterator();

                        while(var20.hasNext()) {
                            Server serverx = (Server)var20.next();
                            ServerStats ssx = stats.getSingleServerStat(serverx);
                            double weight = totalResponseTime - ssx.getResponseTimeAvg();
                            weightSoFar = weightSoFar + weight;
                            finalWeights.add(weightSoFar);
                        }

                        WeightedResponseTimeRule.this.setWeights(finalWeights);
                        return;
                    }
                } catch (Exception var16) {
                    return;
                } finally {
                    WeightedResponseTimeRule.this.serverWeightAssignmentInProgress.set(false);
                }

            }
        }
    }
}
</code></pre>
<p>该函数的实现主要分为两个步骤:</p>
<ul>
<li>根据LoadBalancerStats中记录的每个实例的统计信息，累加所有实例的平均响应时间，得到总平均响应时间totalResponseTime, 该值会用于后续的计算。</li>
<li>为负载均衡器中维护的实例清单逐个计算权重(从第 一个开始)，计算规则为<mark>weigh七SoFar+totalResponseTime — 实例的平均响应时间</mark>，其中weightSoFar初始化为零，并且每计算好一个权重需要累加到weightSoFar上供下一次计算使用。</li>
</ul>
<p>举个简单的例子来理解这个计算过程， 假设有4个实例A、 B、 C、 D, 它们的平均响 应时间为10、40、 80、 100, 所以总响应时间是230, 每个实例的权重为总响应时间与实例自身的平均响应时间的差的累积所得， 所以实例A、 B、 C、 D 的权重分别如下所示。<br>
• 实例A: 230-10 =220<br>
• 实例B: 220 + (230-40) =410<br>
• 实例C:410 + (230- 80) = 560<br>
• 实例D: 560 + (230-100) = 690</p>
<p>需要注意的是， 这里的权重值只是<mark>表示了各实例权重区间的上限，并非某个实例的优先级</mark>， 所以不是数值越大被选中的概率就越大。那么什么是权重区间呢?以上面例子的计算结果为例， 它实际上是为这4个实例构建了4个不同的区间，每个实例的区间下限是上一个实例的区间上限，而每个实例的区间上限则是 我们上面计算并存储于List accumulatedWeights的权重值，其中第一个实例的下限默认为零。 所以， 根据上面示例的权重计算结果， 我们可以得到每个实例的权重区间。</p>
<p>• 实例A: [0, 220]<br>
• 实例B: (20,410]<br>
• 实例C: (410, 560]<br>
• 实例D: (560, 690)</p>
<p>实际上每个区间的宽度就是: 总的平均响应时间 - 实例的平均响应时间，所以实例的平均响应时间越短、 权重区间的宽度越大，而权重区间的宽度越大被选中的概率就越高。</p>
<p><code>实例选择</code><br>
WeightedResponseTimeRule选择实例的实现与之前介绍的算法结构类似，下面是它主体的算法:</p>
<pre><code class="language-java">public Server choose(ILoadBalancer lb, Object key) {
    if (lb == null) {
        return null;
    } else {
        Server server = null;

        while(server == null) {
            List&lt;Double&gt; currentWeights = this.accumulatedWeights;
            if (Thread.interrupted()) {
                return null;
            }

            List&lt;Server&gt; allList = lb.getAllServers();
            int serverCount = allList.size();
            if (serverCount == 0) {
                return null;
            }

            int serverIndex = 0;
            //获取最后一个实例的权重
            double maxTotalWeight = currentWeights.size() == 0 ? 0.0D : (Double)currentWeights.get(currentWeights.size() - 1);
            if (maxTotalWeight &lt; 0.001D) {
                //如果最后一个实例的权重值小于0.001, 则采用父类实现的线性轮询的策略
                server = super.choose(this.getLoadBalancer(), key);
                if (server == null) {
                    return server;
                }
            } else {
                //如果最后一个实例的权重值大于等于0.001, 就产生一个(0, maxTotalWeight)的随机数
                double randomWeight = this.random.nextDouble() * maxTotalWeight;
                int n = 0;

                for(Iterator var13 = currentWeights.iterator(); var13.hasNext(); ++n) {
                    Double d = (Double)var13.next();
                    //遍历维护的权重清单， 若权重大于等于随机得到的数值， 就选择这个实例
                    if (d &gt;= randomWeight) {
                        serverIndex = n;
                        break;
                    }
                }

                server = (Server)allList.get(serverIndex);
            }

            if (server == null) {
                Thread.yield();
            } else {
                if (server.isAlive()) {
                    return server;
                }

                server = null;
            }
        }

        return server;
    }
}
</code></pre>
<ul>
<li>生成一个[ 0, 最大权重值)区间内的随机数。</li>
<li>遍历权重列表， 比较权重值与随机数的大小，如果权重值大于等千随机数， 就拿当前权重列表的索引值去服务实例列表中获取具体的实例。</li>
</ul>
<h4 id="356-clientconfigenabledroundrobinrule">3.5.6 ClientConfigEnabledRoundRobinRule</h4>
<p>该策略较为特殊，我们一般不直接使用它。因为它本身并没有实现什么特殊的处理逻辑， 正如下面的源码所示， 在它的内部定义了一个RoundRobinRule策略，而choose函数的实现也正是使用了RoundRobinRule 的线性轮询机制，所以它实现的功能实际上与RoundRobinRule相同，那么定义它有什么特殊的用处呢?</p>
<p>虽然我们不会直接使用该策略，但是通过继承该策略，默认的choose就实现了线性轮询机制，在子类中做一 些高级策略时通常有可能会存在一些无法实施的情况，那么就可以用父类的实现作为备选。 在后文中我们将继续介绍的高级策略均是基 ClientConfigEnabledRoundRobinRule的扩展。</p>
<pre><code class="language-java">public class ClientConfigEnabledRoundRobinRule extends AbstractLoadBalancerRule {
    RoundRobinRule roundRobinRule = new RoundRobinRule();

    public ClientConfigEnabledRoundRobinRule() {
    }

    public void initWithNiwsConfig(IClientConfig clientConfig) {
        this.roundRobinRule = new RoundRobinRule();
    }

    public void setLoadBalancer(ILoadBalancer lb) {
        super.setLoadBalancer(lb);
        this.roundRobinRule.setLoadBalancer(lb);
    }

    public Server choose(Object key) {
        if (this.roundRobinRule != null) {
            return this.roundRobinRule.choose(key);
        } else {
            throw new IllegalArgumentException(&quot;This class has not been initialized with the RoundRobinRule class&quot;);
        }
    }
}
</code></pre>
<h4 id="357-bestavailablerule">3.5.7 BestAvailableRule</h4>
<p>该策略继承自ClientConfigEnabledRoundRobinRule, 在实现中它注入了负载均衡器的统计对象 LoadBalancerStats, 同时在具体的choose算法中利用LoadBalancerStats保存的实例统计信息来选择满足要求的实例。它通过遍历负载均衡器中维护的所有服务实例，会过滤掉故障的实例，并找出并发请求数最小的一个，所以该策略的特性是=可选出最空闲的实例==。</p>
<pre><code class="language-java">public Server choose(Object key) {
    if (this.loadBalancerStats == null) {
        return super.choose(key);
    } else {
        List&lt;Server&gt; serverList = this.getLoadBalancer().getAllServers();
        int minimalConcurrentConnections = 2147483647;
        long currentTime = System.currentTimeMillis();
        Server chosen = null;
        Iterator var7 = serverList.iterator();

        while(var7.hasNext()) {
            Server server = (Server)var7.next();
            ServerStats serverStats = this.loadBalancerStats.getSingleServerStat(server);
            if (!serverStats.isCircuitBreakerTripped(currentTime)) {
                int concurrentConnections = serverStats.getActiveRequestsCount(currentTime);
                if (concurrentConnections &lt; minimalConcurrentConnections) {
                    minimalConcurrentConnections = concurrentConnections;
                    chosen = server;
                }
            }
        }

        if (chosen == null) {
            return super.choose(key);
        } else {
            return chosen;
        }
    }
}
</code></pre>
<p>同时，由于该算法的核心依据是统计对象 loadBalancerStats, 当其为空的时候， 该策略是无法执行的。所以从源码中我们可以看到，当loadBalancerStats为空的时候，它会采用父类的线性轮询策略。</p>
<h4 id="358-predicatebasedrule">3.5.8 PredicateBasedRule</h4>
<p>这是一个抽象策略，它也继承了ClientConfigEnabledRoundRobinRule, 从其命名中可以猜出这是一个基于Predicate实现的策略，Predicate是Google Guava Collection工具对集合进行过滤的条件接口。</p>
<p>它定义了一个抽象函数getPredicate来获取AbstractServer­ redicate对象的实现， 而在choose函数中，通过AbstractServerPredicate的chooseRoundRobinAfterFiltering函数来选出具体的服务实例。从该函数的命名我们也大致能猜出它的基础逻辑: 先通过子类中实现的 Predicate 逻辑来过滤一部分服务实例， 然后再以线性轮询的方式从过滤后的实例清单中选出一个。</p>
<pre><code class="language-java">public abstract class PredicateBasedRule extends ClientConfigEnabledRoundRobinRule {
    public PredicateBasedRule() {
    }

    public abstract AbstractServerPredicate getPredicate();

    public Server choose(Object key) {
        ILoadBalancer lb = this.getLoadBalancer();
        Optional&lt;Server&gt; server = this.getPredicate().chooseRoundRobinAfterFiltering(lb.getAllServers(), key);
        return server.isPresent() ? (Server)server.get() : null;
    }
}
</code></pre>
<h4 id="359-availabilityfilteringrule">3.5.9 AvailabilityFilteringRule</h4>
<p>该策略继承自上面介绍的抽象策略PredicateBasedRule 所以它也继承了先过滤清单，再轮询选择的基本处理逻辑，其中过滤条件使用了AbstractServerPredicate:</p>
<h4 id="3510-zoneavoidancerule">3.5.10 ZoneAvoidanceRule</h4>
<p>从ZoneAvoidanceRule的源码片段中可以看到，它使用了CompositePredicate来进行服务实例清单的过滤。 这是一个组合过滤条件，在其构造函数中，它以ZoneAvoidancePredicate为主过滤条件，AvailabilityPredicate为次过滤条件初始化了组合过滤条件的实例。</p>
<pre><code class="language-java">public class ZoneAvoidanceRule extends PredicateBasedRule {
    private static final Random random = new Random();
    private CompositePredicate compositePredicate;

    public ZoneAvoidanceRule() {
        ZoneAvoidancePredicate zonePredicate = new ZoneAvoidancePredicate(this);
        AvailabilityPredicate availabilityPredicate = new AvailabilityPredicate(this);
        this.compositePredicate = this.createCompositePredicate(zonePredicate, availabilityPredicate);
    }
</code></pre>
<p>在实现的时候并没有像AvailabilityFilteringRule那样重写choose函数来优化，所以它完全遵循了父类的过滤主逻辑先过滤清单，再轮询选择。其中过滤清单的条件就是我们上面提到的以ZoneAvoidancePredicate为主过滤条件、AvailabilityPredicate为次过滤条件的组合过滤条件CompositePredicate。从 CompositePredicate 的源码片段中，我们可以看到它定义了一个主过滤条件 AbstractServerPredicate delegate 以及一组次过滤条件列表List fallbacks, 所以它的次过滤列表是可以拥有多个的，并且由于它采用了List存储所以次过滤条件是按顺序执行的。</p>
<pre><code class="language-java">public class CompositePredicate extends AbstractServerPredicate {
    private AbstractServerPredicate delegate;
    private List&lt;AbstractServerPredicate&gt; fallbacks = Lists.newArrayList();
    private int minimalFilteredServers = 1;
    private float minimalFilteredPercentage = 0.0F;

    public boolean apply(@Nullable PredicateKey input) {
        return this.delegate.apply(input);
    }

    public List&lt;Server&gt; getEligibleServers(List&lt;Server&gt; servers, Object loadBalancerKey) {
        List&lt;Server&gt; result = super.getEligibleServers(servers, loadBalancerKey);

        AbstractServerPredicate predicate;
        for(Iterator i = this.fallbacks.iterator(); (result.size() &lt; this.minimalFilteredServers || result.size() &lt;= (int)((float)servers.size() * this.minimalFilteredPercentage)) &amp;&amp; i.hasNext(); result = predicate.getEligibleServers(servers, loadBalancerKey)) {
            predicate = (AbstractServerPredicate)i.next();
        }

        return result;
    }
}
</code></pre>
<p>在获取过滤结果的实现函数getEligibleServers中， 它的处理逻辑如下所示。</p>
<ul>
<li>使用主过滤条件对所有实例过滤并返回过滤后的实例清单。</li>
<li>依次使用次过滤条件列表中的过滤条件对主过滤条件的结果进行过滤。</li>
<li>每次过滤之后(包括主过滤条件和次过滤条件)，都需要判断下面两个条件， 只要有 一个符合就不再进行过滤， 将当前结果返回供线性轮询算法选择:<br>
过滤后的实例总数&gt;=最小过滤实例数(minimalFilteredServers, 默认为1) 。<br>
过滤后的实例比例&gt;最小过滤百分比(minimalFilteredPercentage, 默认为0) 。</li>
</ul>
<h3 id="36-配置详解自动化配置">3.6 配置详解&amp;自动化配置</h3>
<h4 id="361-自动化配置">3.6.1 自动化配置</h4>
<p>由于Ribbon中定义的每一个接口都有多种不同的策略实现，同时这些接口之间又有一定的依赖关系，在引入Spring CloudRibbon的依赖之后， 就能够自动化构建下面这些接口的实现。</p>
<ol>
<li>IClientConfig: Ribbon的客户端配置，默认采用com.netflix.client.config.DefaultClientConfigimpl实现。</li>
<li>IRule: Ribbon的负载均衡策略， 默认采用 com.netflix.loadbalancer.ZoneAvoidanceRule实现，该策略能够在多区域环境下选出最佳区域的实例进行访问。</li>
<li>IPing:ribbon的实例检查策略，默认采用com.netflix.loadbalancer.NoOpPing实现，该检查策略是一个特殊的实现，实际上它并不会检查实例是否可用，而是始终返回true, 默认认为所有服务实例都是可用的。</li>
<li>ServerList<Server>: 服务实例清单的维护机制， 默认采用 com.netflix.loadbalancer.ConfigurationBasedServerList实现。</li>
<li>ServerListFilter<Server>: 服务实例清单过滤机制，默认采用org.springframework.cloud.netflix.ribbon.ZonePreferenceServerListFilter实现，该策略能够优先过滤出与请求调用方处于同区域的服务实例。</li>
<li>ILoadBalancer: 负载均衡器， 默认采用 com.netflix.loadbalancer.ZoneAwareLoadBalancer实现，它具备了区域感知的能力。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《从根儿上理解MySQL》读书笔记(五)]]></title>
        <id>https://q456qq520.github.io/post/lesslesscong-gen-er-shang-li-jie-mysqlgreatergreater-du-shu-bi-ji-wu/</id>
        <link href="https://q456qq520.github.io/post/lesslesscong-gen-er-shang-li-jie-mysqlgreatergreater-du-shu-bi-ji-wu/">
        </link>
        <updated>2023-02-27T10:18:30.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="第22章-undo日志上">第22章 undo日志（上）</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="第22章-undo日志上">第22章 undo日志（上）</h2>
<!-- more -->
<h3 id="221-事务回滚的需求">22.1 事务回滚的需求</h3>
<p>我们说过事务需要保证原子性，也就是事务中的操作要么全部完成，要么什么也不做。但是偏偏有时候事务执行到一半会出现一些情况，比如：</p>
<p>情况一：事务执行过程中可能遇到各种错误，比如服务器本身的错误，操作系统错误，甚至是突然断电导致的错误。<br>
情况二：程序员可以在事务执行过程中手动输入ROLLBACK语句结束当前的事务的执行。</p>
<p>这两种情况都会导致事务执行到一半就结束，但是事务执行过程中可能已经修改了很多东西，为了保证事务的原子性，我们需要把东西改回原先的样子，这个过程就称之为回滚（英文名：rollback），这样就可以造成一个假象：这个事务看起来什么都没做，所以符合原子性要求。</p>
<p>你插入了一条记录，回滚操作对应的就是把这条记录删除掉；你更新了一条记录，回滚操作对应的就是把该记录更新为旧值；你删除了一条记录，回滚操作对应的自然就是把该记录再插进去。每当我们要对一条记录做改动时（这里的改动可以指INSERT、DELETE、UPDATE），都需要把回滚时所需的东西都给记下来。比方说：</p>
<ul>
<li>你插入一条记录时，至少要把这条记录的主键值记下来，之后回滚的时候只需要把这个主键值对应的记录删掉就好了。</li>
<li>你删除了一条记录，至少要把这条记录中的内容都记下来，这样之后回滚时再把由这些内容组成的记录插入到表中就好了。</li>
<li>你修改了一条记录，至少要把修改这条记录前的旧值都记录下来，这样之后回滚时再把这条记录更新为旧值就好了。</li>
</ul>
<p>数据库把这些为了回滚而记录的这些东东称之为<mark>撤销日志</mark>，英文名为<mark>undo log</mark>，称之为undo日志。这里需要注意的一点是，由于查询操作（SELECT）并不会修改任何用户记录，所以在查询操作执行时，并不需要记录相应的undo日志。</p>
<h3 id="222-事务id">22.2 事务id</h3>
<h4 id="2221-给事务分配id的时机">22.2.1 给事务分配id的时机</h4>
<p>一个事务可以是一个只读事务，或者是一个读写事务：</p>
<ul>
<li>可以通过<mark>START TRANSACTION READ ONLY</mark>语句开启一个只读事务。<br>
  在只读事务中不可以对普通的表（其他事务也能访问到的表）进行增、删、改操作，但可以对临时表做增、删、改操作。</li>
<li>可以通过<mark>START TRANSACTION READ WRITE</mark>语句开启一个读写事务，或者使用BEGIN、START TRANSACTION语句开启的事务默认也算是读写事务。<br>
  在读写事务中可以对表执行增删改查操作。</li>
</ul>
<p>如果某个事务执行过程中对某个表执行了增、删、改操作，那么InnoDB存储引擎就会给它分配一个独一无二的事务id，分配方式如下：</p>
<ul>
<li>对于只读事务来说，只有在它第一次对某个用户创建的临时表执行增、删、改操作时才会为这个事务分配一个事务id，否则的话是不分配事务id的。</li>
<li>对于读写事务来说，只有在它第一次对某个表（包括用户创建的临时表）执行增、删、改操作时才会为这个事务分配一个事务id，否则的话也是不分配事务id的。</li>
</ul>
<h4 id="2221-事务id是怎么生成的">22.2.1 事务id是怎么生成的</h4>
<p>这个事务id本质上就是一个数字，它的分配策略和我们前面提到的对隐藏列row_id（当用户没有为表创建主键和UNIQUE键时InnoDB自动创建的列）的分配策略大抵相同，具体策略如下：</p>
<ul>
<li>服务器会在内存中维护一个全局变量，每当需要为某个事务分配一个事务id时，就会把该变量的值当作事务id分配给该事务，并且把该变量自增1。</li>
<li>每当这个变量的值为256的倍数时，就会将该变量的值刷新到系统表空间的页号为<mark>5</mark>的页面中一个称之为<mark>Max Trx ID</mark>的属性处，这个属性占用8个字节的存储空间。</li>
<li>当系统下一次重新启动时，会将上面提到的Max Trx ID属性加载到内存中，将该值加上256之后赋值给我们前面提到的全局变量（因为在上次关机时该全局变量的值可能大于Max Trx ID属性值）。</li>
</ul>
<p>这样就可以保证整个系统中分配的事务id值是一个递增的数字。先被分配id的事务得到的是较小的事务id，后被分配id的事务得到的是较大的事务id。</p>
<h4 id="2222-trx_id隐藏列">22.2.2 trx_id隐藏列</h4>
<p>聚簇索引的记录除了会保存完整的用户数据以外，而且还会自动添加名为trx_id、roll_pointer的隐藏列，如果用户没有在表中定义主键以及UNIQUE键，还会自动添加一个名为row_id的隐藏列。所以一条记录在页面中的真实结构看起来就是这样的：<br>
<img src="https://q456qq520.github.io/post-images/1677551326518.png" alt="" loading="lazy"></p>
<h3 id="223-undo日志的格式">22.3 undo日志的格式</h3>
<p>为了实现事务的原子性，InnoDB存储引擎在实际进行增、删、改一条记录时，都需要先把对应的undo日志记下来。一般每对一条记录做一次改动，就对应着一条undo日志，，但在某些更新记录的操作中，也可能会对应着2条undo日志。一个事务在执行过程中可能新增、删除、更新若干条记录，也就是说需要记录很多条对应的undo日志，这些undo日志会被从0开始编号，也就是说根据生成的顺序分别被称为第0号undo日志、第1号undo日志、...、第n号undo日志等，这个编号也被称之为undo no。</p>
<p>这些undo日志是被记录到类型为<mark>FIL_PAGE_UNDO_LOG</mark>（对应的十六进制是0x0002）的页面中。这些页面可以从系统表空间中分配，也可以从一种专门存放undo日志的表空间，也就是所谓的undo tablespace中分配。</p>
<p>我们先来创建一个名为undo_demo的表：</p>
<pre><code class="language-mysql">CREATE TABLE undo_demo (
    id INT NOT NULL,
    key1 VARCHAR(100),
    col VARCHAR(100),
    PRIMARY KEY (id),
    KEY idx_key1 (key1)
)Engine=InnoDB CHARSET=utf8;
</code></pre>
<p>现在我们查看一下undo_demo对应的table id是多少：</p>
<pre><code class="language-mysql">mysql&gt; SELECT * FROM information_schema.innodb_sys_tables WHERE name = 'xiaohaizi/undo_demo';
+----------+---------------------+------+--------+-------+-------------+------------+---------------+------------+
| TABLE_ID | NAME                | FLAG | N_COLS | SPACE | FILE_FORMAT | ROW_FORMAT | ZIP_PAGE_SIZE | SPACE_TYPE |
+----------+---------------------+------+--------+-------+-------------+------------+---------------+------------+
|      138 | xiaohaizi/undo_demo |   33 |      6 |   482 | Barracuda   | Dynamic    |             0 | Single     |
+----------+---------------------+------+--------+-------+-------------+------------+---------------+------------+
1 row in set (0.01 sec)
</code></pre>
<h3 id="224-insert操作对应的undo日志">22.4 INSERT操作对应的undo日志</h3>
<p>当我们向表中插入一条记录时会有乐观插入和悲观插入的区分，但是不管怎么插入，最终导致的结果就是这条记录被放到了一个数据页中。如果希望回滚这个插入操作，那么把这条记录删除就好了，也就是说在写对应的undo日志时，主要是把这条记录的主键信息记上。所以InnoDB设计了一个类型为<mark>TRX_UNDO_INSERT_REC</mark>的undo日志，它的完整结构如下图所示：<br>
<img src="https://q456qq520.github.io/post-images/1677551633425.png" alt="" loading="lazy"></p>
<ul>
<li>undo no在一个事务中是从0开始递增的，也就是说只要事务没提交，每生成一条undo日志，那么该条日志的undo no就增1。</li>
<li>如果记录中的主键只包含一个列，那么在类型为TRX_UNDO_INSERT_REC的undo日志中只需要把该列占用的存储空间大小和真实值记录下来，如果记录中的主键包含多个列，那么每个列占用的存储空间大小和对应的真实值都需要记录下来（图中的len就代表列占用的存储空间大小，value就代表列的真实值）。</li>
</ul>
<blockquote>
<p>当我们向某个表中插入一条记录时，实际上需要向聚簇索引和所有的二级索引都插入一条记录。不过记录undo日志时，我们只需要考虑向聚簇索引插入记录时的情况就好了，因为其实聚簇索引记录和二级索引记录是一一对应的，我们在回滚插入操作时，只需要知道这条记录的主键信息，然后根据主键信息做对应的删除操作，做删除操作时就会顺带着把所有二级索引中相应的记录也删除掉。DELETE操作和UPDATE操作对应的undo日志也都是针对聚簇索引记录而言的</p>
</blockquote>
<h4 id="2241-roll_pointer隐藏列的含义">22.4.1 roll_pointer隐藏列的含义</h4>
<p>这个占用7个字节的字段本质上就是一个指向记录对应的undo日志的一个指针，undo日志被存放到了类型为FIL_PAGE_UNDO_LOG的页面中。</p>
<figure data-type="image" tabindex="1"><img src="https://q456qq520.github.io/post-images/1677551914332.png" alt="" loading="lazy"></figure>
<p><mark>roll_pointer本质就是一个指针，指向记录对应的undo日志。</mark></p>
<h3 id="225-delete操作对应的undo日志">22.5 DELETE操作对应的undo日志</h3>
<p>插入到页面中的记录会根据记录头信息中的next_record属性组成一个单向链表，我们把这个链表称之为正常记录链表；被删除的记录其实也会根据记录头信息中的next_record属性组成一个链表，只不过这个链表中的记录占用的存储空间可以被重新利用，所以也称这个链表为垃圾链表。Page Header部分有一个称之为PAGE_FREE的属性，它指向由被删除记录组成的垃圾链表中的头节点。</p>
<figure data-type="image" tabindex="2"><img src="https://q456qq520.github.io/post-images/1677552050687.png" alt="" loading="lazy"></figure>
<p>假设现在我们准备使用DELETE语句把正常记录链表中的最后一条记录给删除掉，其实这个删除的过程需要经历两个阶段：</p>
<p>阶段一：仅仅将记录的delete_mask标识位设置为1，其他的不做修改（其实会修改记录的trx_id、roll_pointer这些隐藏列的值）。InnoDB把这个阶段称之为delete mark。也就是正常记录链表中的最后一条记录的delete_mask值被设置为1，但是并没有被加入到垃圾链表。也就是此时记录处于一个中间状态</p>
<p>阶段二：当该删除语句所在的事务提交之后，会有专门的线程后来真正的把记录删除掉。所谓真正的删除就是把该记录从正常记录链表中移除，并且加入到垃圾链表中，然后还要调整一些页面的其他信息，比如页面中的用户记录数量PAGE_N_RECS、上次插入记录的位置PAGE_LAST_INSERT、垃圾链表头节点的指针PAGE_FREE、页面中可重用的字节数量PAGE_GARBAGE、还有页目录的一些信息等等。InnoDB把这个阶段称之为<mark>purge</mark>。</p>
<p>我们还要注意一点，将被删除记录加入到垃圾链表时，实际上加入到链表的头节点处，会跟着修改PAGE_FREE属性的值。</p>
<blockquote>
<p>小贴士：页面的Page Header部分有一个PAGE_GARBAGE属性，该属性记录着当前页面中可重用存储空间占用的总字节数。每当有已删除记录被加入到垃圾链表后，都会把这个PAGE_GARBAGE属性的值加上该已删除记录占用的存储空间大小。PAGE_FREE指向垃圾链表的头节点，之后每当新插入记录时，首先判断PAGE_FREE指向的头节点代表的已删除记录占用的存储空间是否足够容纳这条新插入的记录，如果不可以容纳，就直接向页面中申请新的空间来存储这条记录。如果可以容纳，那么直接重用这条已删除记录的存储空间，并且把PAGE_FREE指向垃圾链表中的下一条已删除记录。但是这里有一个问题，如果新插入的那条记录占用的存储空间大小小于垃圾链表的头节点占用的存储空间大小，那就意味头节点对应的记录占用的存储空间里有一部分空间用不到，这部分空间就被称之为碎片空间。那这些碎片空间岂不是永远都用不到了么？其实也不是，这些碎片空间占用的存储空间大小会被统计到PAGE_GARBAGE属性中，这些碎片空间在整个页面快使用完前并不会被重新利用，不过当页面快满时，如果再插入一条记录，此时页面中并不能分配一条完整记录的空间，这时候会首先看一看PAGE_GARBAGE的空间和剩余可利用的空间加起来是不是可以容纳下这条记录，如果可以的话，InnoDB会尝试重新组织页内的记录，重新组织的过程就是先开辟一个临时页面，把页面内的记录依次插入一遍，因为依次插入时并不会产生碎片，之后再把临时页面的内容复制到本页面，这样就可以把那些碎片空间都解放出来（很显然重新组织页面内的记录比较耗费性能）。</p>
</blockquote>
<p>在删除语句所在的事务提交之前，只会经历阶段一，也就是delete mark阶段（提交之后我们就不用回滚了，所以只需考虑对删除操作的阶段一做的影响进行回滚）。InnoDB设计了一种称之为<mark>TRX_UNDO_DEL_MARK_REC</mark>类型的undo日志，它的完整结构如下图所示：<br>
<img src="https://q456qq520.github.io/post-images/1677552432693.png" alt="" loading="lazy"></p>
<ul>
<li>在对一条记录进行delete mark操作前，需要把该记录的旧的trx_id和roll_pointer隐藏列的值都给记到对应的undo日志中来，就是我们图中显示的old trx_id和old roll_pointer属性。这样有一个好处，那就是可以通过undo日志的old roll_pointer找到记录在修改之前对应的undo日志。执行完delete mark操作后，它对应的undo日志和INSERT操作对应的undo日志就串成了一个链表，这个链表就称之为版本链</li>
<li>与类型为TRX_UNDO_INSERT_REC的undo日志不同，类型为TRX_UNDO_DEL_MARK_REC的undo日志还多了一个索引列各列信息的内容，也就是说如果某个列被包含在某个索引中，那么它的相关信息就应该被记录到这个索引列各列信息部分，所谓的相关信息包括该列在记录中的位置（用pos表示），该列占用的存储空间大小（用len表示），该列实际值（用value表示）。所以索引列各列信息存储的内容实质上就是&lt;pos, len, value&gt;的一个列表。这部分信息主要是用在事务提交后，对该中间状态记录做真正删除的阶段二，也就是purge阶段中使用的。</li>
</ul>
<h3 id="226-update操作对应的undo日志">22.6 UPDATE操作对应的undo日志</h3>
<p>在执行UPDATE语句时，InnoDB对更新主键和不更新主键这两种情况有截然不同的处理方案。</p>
<h5 id="2261-不更新主键的情况">22.6.1 不更新主键的情况</h5>
<p>在不更新主键的情况下，又可以细分为被更新的列占用的存储空间不发生变化和发生变化的情况。</p>
<ol>
<li>
<p>就地更新（in-place update）<br>
更新记录时，对于被更新的每个列来说，如果更新后的列和更新前的列占用的存储空间都一样大，那么就可以进行就地更新，也就是直接在原记录的基础上修改对应列的值。</p>
</li>
<li>
<p>先删除掉旧记录，再插入新记录<br>
在不更新主键的情况下，如果有任何一个被更新的列更新前和更新后占用的存储空间大小不一致，那么就需要先把这条旧的记录从聚簇索引页面中删除掉，然后再根据更新后列的值创建一条新的记录插入到页面中。<br>
我们这里所说的删除并不是delete mark操作，而是真正的删除掉，也就是把这条记录从正常记录链表中移除并加入到垃圾链表中，并且修改页面中相应的统计信息（比如PAGE_FREE、PAGE_GARBAGE等这些信息）。不过这里做真正删除操作的线程并不是在介绍DELETE语句中做purge操作时使用的另外专门的线程，而是由用户线程同步执行真正的删除操作，真正删除之后紧接着就要根据各个列更新后的值创建的新记录插入。</p>
<p>这里如果新创建的记录占用的存储空间大小不超过旧记录占用的空间，那么可以直接重用被加入到垃圾链表中的旧记录所占用的存储空间，否则的话需要在页面中新申请一段空间以供新记录使用，如果本页面内已经没有可用的空间的话，那就需要进行页面分裂操作，然后再插入新记录。</p>
</li>
</ol>
<p>针对UPDATE不更新主键的情况（包括上面所说的就地更新和先删除旧记录再插入新记录），InnoDB设计了一种类型为<mark>TRX_UNDO_UPD_EXIST_REC</mark>的undo日志，它的完整结构如下：<br>
<img src="https://q456qq520.github.io/post-images/1677552943688.png" alt="" loading="lazy"></p>
<ul>
<li>n_updated属性表示本条UPDATE语句执行后将有几个列被更新，后边跟着的&lt;pos, old_len, old_value&gt;分别表示被更新列在记录中的位置、更新前该列占用的存储空间大小、更新前该列的真实值。</li>
<li>如果在UPDATE语句中更新的列包含索引列，那么也会添加索引列各列信息这个部分，否则的话是不会添加这个部分的。</li>
</ul>
<h5 id="2262-更新主键的情况">22.6.2 更新主键的情况</h5>
<p>在聚簇索引中，记录是按照主键值的大小连成了一个单向链表的，如果我们更新了某条记录的主键值，意味着这条记录在聚簇索引中的位置将会发生改变，比如你将记录的主键值从1更新为10000，如果还有非常多的记录的主键值分布在1 ~ 10000之间的话，那么这两条记录在聚簇索引中就有可能离得非常远，甚至中间隔了好多个页面。针对UPDATE语句中更新了记录主键值的这种情况，InnoDB在聚簇索引中分了两步处理：</p>
<ul>
<li>
<p>将旧记录进行delete mark操作<br>
这里是delete mark操作！也就是说在UPDATE语句所在的事务提交前，对旧记录只做一个delete mark操作，在事务提交后才由专门的线程做purge操作，把它加入到垃圾链表中。</p>
<blockquote>
<p>之所以只对旧记录做delete mark操作，是因为别的事务同时也可能访问这条记录，如果把它真正的删除加入到垃圾链表后，别的事务就访问不到了。这个功能就是所谓的MVCC</p>
</blockquote>
</li>
<li>
<p>根据更新后各列的值创建一条新记录，并将其插入到聚簇索引中（需重新定位插入的位置）。<br>
由于更新后的记录主键值发生了改变，所以需要重新从聚簇索引中定位这条记录所在的位置，然后把它插进去。</p>
</li>
</ul>
<p>针对UPDATE语句更新记录主键值的这种情况，在对该记录进行delete mark操作前，会记录一条类型为<mark>TRX_UNDO_DEL_MARK_REC</mark>的undo日志；之后插入新记录时，会记录一条类型为<mark>TRX_UNDO_INSERT_REC</mark>的undo日志，也就是说每对一条记录的主键值做改动时，会记录2条undo日志。</p>
<h2 id="第23章-undo日志下">第23章 undo日志（下）</h2>
<h3 id="231-通用链表结构">23.1 通用链表结构</h3>
<p>在写入undo日志的过程中会使用到多个链表，很多链表都有同样的节点结构，如图所示：<br>
<img src="https://q456qq520.github.io/post-images/1677554741854.png" alt="" loading="lazy"><br>
在某个表空间内，我们可以通过一个页的页号和在页内的偏移量来唯一定位一个节点的位置，这两个信息也就相当于指向这个节点的一个指针。所以：</p>
<ul>
<li>Pre Node Page Number和Pre Node Offset的组合就是指向前一个节点的指针</li>
<li>Next Node Page Number和Next Node Offset的组合就是指向后一个节点的指针。</li>
</ul>
<p>为了更好的管理链表，InnoDB还提出了一个基节点的结构，里边存储了这个链表的头节点、尾节点以及链表长度信息，基节点的结构示意图如下：<br>
<img src="https://q456qq520.github.io/post-images/1677554824666.png" alt="" loading="lazy"></p>
<ul>
<li>List Length表明该链表一共有多少节点。</li>
<li>First Node Page Number和First Node Offset的组合就是指向链表头节点的指针。</li>
<li>Last Node Page Number和Last Node Offset的组合就是指向链表尾节点的指针。</li>
</ul>
<h3 id="232-fil_page_undo_log页面">23.2 FIL_PAGE_UNDO_LOG页面</h3>
<p>一种称之为FIL_PAGE_UNDO_LOG类型的页面是专门用来存储undo日志的，简称为Undo页面，这种类型的页面的通用结构如下图所示（以默认的16KB大小为例）：</p>
<figure data-type="image" tabindex="3"><img src="https://q456qq520.github.io/post-images/1677555270281.png" alt="" loading="lazy"></figure>
<p>Undo Page Header是Undo页面所特有的，我们来看一下它的结构：<br>
<img src="https://q456qq520.github.io/post-images/1677555427248.png" alt="" loading="lazy"></p>
<ul>
<li>
<p>TRX_UNDO_PAGE_TYPE：本页面准备存储什么种类的undo日志。<br>
TRX_UNDO_INSERT（使用十进制1表示）：类型为TRX_UNDO_INSERT_REC的undo日志属于此大类，一般由INSERT语句产生，或者在UPDATE语句中有更新主键的情况也会产生此类型的undo日志。<br>
TRX_UNDO_UPDATE（使用十进制2表示），除了类型为TRX_UNDO_INSERT_REC的undo日志，其他类型的undo日志都属于这个大类，比如我们前面说的TRX_UNDO_DEL_MARK_REC、TRX_UNDO_UPD_EXIST_REC什么的，一般由DELETE、UPDATE语句产生的undo日志属于这个大类。</p>
<blockquote>
<p>之所以把undo日志分成两个大类，是因为类型为TRX_UNDO_INSERT_REC的undo日志在事务提交后可以直接删除掉，而其他类型的undo日志还需要为所谓的MVCC服务，不能直接删除掉</p>
</blockquote>
</li>
<li>
<p>TRX_UNDO_PAGE_START：表示在当前页面中是从什么位置开始存储undo日志的，或者说表示第一条undo日志在本页面中的起始偏移量。</p>
</li>
<li>
<p>TRX_UNDO_PAGE_FREE：与上面的TRX_UNDO_PAGE_START对应，表示当前页面中存储的最后一条undo日志结束时的偏移量，或者说从这个位置开始，可以继续写入新的undo日志。</p>
</li>
<li>
<p>TRX_UNDO_PAGE_NODE：代表一个List Node结构</p>
</li>
</ul>
<h3 id="233-undo页面链表">23.3 Undo页面链表</h3>
<h4 id="2331-单个事务中的undo页面链表">23.3.1 单个事务中的Undo页面链表</h4>
<p>因为一个事务可能包含多个语句，而且一个语句可能对若干条记录进行改动，而对每条记录进行改动前，都需要记录1条或2条的undo日志，所以在一个事务执行过程中可能产生很多undo日志，这些日志可能一个页面放不下，需要放到多个页面中，这些页面就通过我们上面介绍的TRX_UNDO_PAGE_NODE属性连成了链表：<br>
<img src="https://q456qq520.github.io/post-images/1677555758250.png" alt="" loading="lazy"></p>
<p>在一个事务执行过程中，可能混着执行INSERT、DELETE、UPDATE语句，也就意味着会产生不同类型的undo日志。但是同一个Undo页面要么只存储TRX_UNDO_INSERT大类的undo日志，要么只存储TRX_UNDO_UPDATE大类的undo日志，反正不能混着存，所以在一个事务执行过程中就可能需要2个Undo页面的链表，一个称之为insert undo链表，另一个称之为update undo链表。</p>
<p>另外，InnoDB规定对普通表和临时表的记录改动时产生的undo日志要分别记录，所以在一个事务中最多有4个以Undo页面为节点组成的链表</p>
<p>当然，并不是在事务一开始就会为这个事务分配这4个链表，具体分配策略如下：</p>
<ul>
<li>刚刚开启事务时，一个Undo页面链表也不分配。</li>
<li>当事务执行过程中向普通表中插入记录或者执行更新记录主键的操作之后，就会为其分配一个普通表的insert undo链表。</li>
<li>当事务执行过程中删除或者更新了普通表中的记录之后，就会为其分配一个普通表的update undo链表。</li>
<li>当事务执行过程中向临时表中插入记录或者执行更新记录主键的操作之后，就会为其分配一个临时表的insert undo链表。</li>
<li>当事务执行过程中删除或者更新了临时表中的记录之后，就会为其分配一个临时表的update undo链表。</li>
</ul>
<h4 id="2332-多个事务中的undo页面链表">23.3.2 多个事务中的Undo页面链表</h4>
<p>为了尽可能提高undo日志的写入效率，不同事务执行过程中产生的undo日志需要被写入到不同的Undo页面链表中。</p>
<h3 id="234-undo日志具体写入过程">23.4 undo日志具体写入过程</h3>
<h4 id="2341-段segment的概念">23.4.1 段（Segment）的概念</h4>
<p>段是一个逻辑上的概念，本质上是由若干个零散页面和若干个完整的区组成的。比如一个B+树索引被划分成两个段，一个叶子节点段，一个非叶子节点段，这样叶子节点就可以被尽可能的存到一起，非叶子节点被尽可能的存到一起。每一个段对应一个INODE Entry结构，这个INODE Entry结构描述了这个段的各种信息，比如段的ID，段内的各种链表基节点，零散页面的页号有哪些等信息。为了定位一个INODE Entry，InnoDB设计了一个Segment Header的结构：<br>
<img src="https://q456qq520.github.io/post-images/1677556137591.png" alt="" loading="lazy"></p>
<ul>
<li>Space ID of the INODE Entry：INODE Entry结构所在的表空间ID。</li>
<li>Page Number of the INODE Entry：INODE Entry结构所在的页面页号。</li>
<li>Byte Offset of the INODE Ent：INODE Entry结构在该页面中的偏移量</li>
</ul>
<h4 id="2342-undo-log-segment-header">23.4.2 Undo Log Segment Header</h4>
<p>每一个Undo页面链表都对应着一个段，称之为<mark>Undo Log Segment</mark>。也就是说链表中的页面都是从这个段里边申请的，所以他们在Undo页面链表的第一个页面，也就是上面提到的first undo page中设计了一个称之为<mark>Undo Log Segment Header</mark>的部分，这个部分中包含了该链表对应的段的segment header信息以及其他的一些关于这个段的信息。<br>
<img src="https://q456qq520.github.io/post-images/1677556260660.png" alt="" loading="lazy"></p>
<ol>
<li>TRX_UNDO_STATE：本Undo页面链表处在什么状态。
<ul>
<li>TRX_UNDO_ACTIVE：活跃状态，也就是一个活跃的事务正在往这个段里边写入undo日志。</li>
<li>TRX_UNDO_CACHED：被缓存的状态。处在该状态的Undo页面链表等待着之后被其他事务重用。</li>
<li>TRX_UNDO_TO_FREE：对于insert undo链表来说，如果在它对应的事务提交之后，该链表不能被重用，那么就会处于这种状态。</li>
<li>TRX_UNDO_TO_PURGE：对于update undo链表来说，如果在它对应的事务提交之后，该链表不能被重用，那么就会处于这种状态。</li>
<li>TRX_UNDO_PREPARED：包含处于PREPARE阶段的事务产生的undo日志。</li>
</ul>
</li>
<li>TRX_UNDO_LAST_LOG：本Undo页面链表中最后一个Undo Log Header的位置。</li>
<li>TRX_UNDO_FSEG_HEADER：本Undo页面链表对应的段的Segment Header信息。</li>
<li>TRX_UNDO_PAGE_LIST：Undo页面链表的基节点。</li>
</ol>
<h4 id="2343-undo-log-header">23.4.3 Undo Log Header</h4>
<p>一个事务在向Undo页面中写入undo日志时的方式是十分简单暴力的，就是直接往写，写完一条紧接着写另一条，各条undo日志之间是亲密无间的。写完一个Undo页面后，再从段里申请一个新页面，然后把这个页面插入到Undo页面链表中，继续往这个新申请的页面中写。</p>
<p>InnoDB认为同一个事务向一个Undo页面链表中写入的undo日志算是一个组。在每写入一组undo日志时，都会在这组undo日志前先记录一下关于这个组的一些属性，InnoDB把存储这些属性的地方称之为Undo Log Header。所以Undo页面链表的第一个页面在真正写入undo日志前，其实都会被填充Undo Page Header、Undo Log Segment Header、Undo Log Header这3个部分，如图所示：<br>
<img src="https://q456qq520.github.io/post-images/1677556642689.png" alt="" loading="lazy"></p>
<p>这个Undo Log Header具体的结构如下：<br>
<img src="https://q456qq520.github.io/post-images/1677572594825.png" alt="" loading="lazy"></p>
<ul>
<li>TRX_UNDO_TRX_ID：生成本组undo日志的事务id。</li>
<li>TRX_UNDO_TRX_NO：事务提交后生成的一个需要序号，使用此序号来标记事务的提交顺序（先提交的此序号小，后提交的此序号大）。</li>
<li>TRX_UNDO_DEL_MARKS：标记本组undo日志中是否包含由于Delete mark操作产生的undo日志。</li>
<li>TRX_UNDO_LOG_START：表示本组undo日志中第一条undo日志的在页面中的偏移量。</li>
<li>TRX_UNDO_XID_EXISTS：本组undo日志是否包含XID信息。</li>
<li>TRX_UNDO_DICT_TRANS：标记本组undo日志是不是由DDL语句产生的。</li>
<li>TRX_UNDO_TABLE_ID：如果TRX_UNDO_DICT_TRANS为真，那么本属性表示DDL语句操作的表的table id。</li>
<li>TRX_UNDO_NEXT_LOG：下一组的undo日志在页面中开始的偏移量。</li>
<li>TRX_UNDO_PREV_LOG：上一组的undo日志在页面中开始的偏移量。</li>
<li>TRX_UNDO_HISTORY_NODE：一个12字节的List Node结构，代表一个称之为History链表的节点。</li>
</ul>
<h3 id="235-重用undo页面">23.5 重用Undo页面</h3>
<p>为了能提高并发执行的多个事务写入undo日志的性能，InnoDB决定为每个事务单独分配相应的Undo页面链表（最多可能单独分配4个链表）。但是这样也造成了一些问题，比如其实大部分事务执行过程中可能只修改了一条或几条记录，针对某个Undo页面链表只产生了非常少的undo日志，这些undo日志可能只占用一丢丢存储空间，每开启一个事务就新创建一个Undo页面链表（虽然这个链表中只有一个页面）来存储这么一丢丢undo日志岂不是太浪费了。InnoDB在事务提交后在某些情况下重用该事务的Undo页面链表。一个Undo页面链表是否可以被重用的条件很简单：</p>
<ul>
<li>该链表中只包含一个Undo页面。<br>
如果一个事务执行过程中产生了非常多的undo日志，那么它可能申请非常多的页面加入到Undo页面链表中。在该事物提交后，如果将整个链表中的页面都重用，那就意味着即使新的事务并没有向该Undo页面链表中写入很多undo日志，那该链表中也得维护非常多的页面，那些用不到的页面也不能被别的事务所使用，这样就造成了另一种浪费。InnoDB规定只有在Undo页面链表中只包含一个Undo页面时，该链表才可以被下一个事务所重用。</li>
<li>该Undo页面已经使用的空间小于整个页面空间的3/4。<br>
Undo页面链表按照存储的undo日志所属的大类可以被分为insert undo链表和update undo链表两种，这两种链表在被重用时的策略也是不同的，我们分别看一下：<br>
insert undo链表中只存储类型为TRX_UNDO_INSERT_REC的undo日志，这种类型的undo日志在事务提交之后就没用了，就可以被清除掉。所以在某个事务提交后，重用这个事务的insert undo链表（这个链表中只有一个页面）时，可以直接把之前事务写入的一组undo日志覆盖掉，从头开始写入新事务的一组undo日志。<br>
在一个事务提交后，它的update undo链表中的undo日志也不能立即删除掉（这些日志用于MVCC）。所以如果之后的事务想重用update undo链表时，就不能覆盖之前事务写入的undo日志。这样就相当于在同一个Undo页面中写入了多组的undo日志</li>
</ul>
<h3 id="236-回滚段">23.6 回滚段</h3>
<h4 id="2361-回滚段的概念">23.6.1 回滚段的概念</h4>
<p>我们现在知道一个事务在执行过程中最多可以分配4个Undo页面链表，在同一时刻不同事务拥有的Undo页面链表是不一样的，所以在同一时刻系统里其实可以有许许多多个Undo页面链表存在。为了更好的管理这些链表，InnoDB又设计了一个称之为<mark>Rollback Segment Header</mark>的页面，在这个页面中存放了各个Undo页面链表的frist undo page的页号，他们把这些页号称之为<mark>undo slot</mark>。</p>
<figure data-type="image" tabindex="4"><img src="https://q456qq520.github.io/post-images/1677575600323.png" alt="" loading="lazy"></figure>
<p>每一个Rollback Segment Header页面都对应着一个段，这个段就称为<mark>Rollback Segment</mark>，翻译过来就是<mark>回滚段</mark>。与我们之前介绍的各种段不同的是，这个Rollback Segment里其实只有一个页面。</p>
<ul>
<li>TRX_RSEG_MAX_SIZE：本Rollback Segment中管理的所有Undo页面链表中的Undo页面数量之和的最大值。换句话说，本Rollback Segment中所有Undo页面链表中的Undo页面数量之和不能超过TRX_RSEG_MAX_SIZE代表的值。</li>
<li>TRX_RSEG_HISTORY_SIZE：History链表占用的页面数量。</li>
<li>TRX_RSEG_HISTORY：History链表的基节点。</li>
<li>TRX_RSEG_FSEG_HEADER：本Rollback Segment对应的10字节大小的Segment Header结构，通过它可以找到本段对应的INODE Entry。</li>
<li>TRX_RSEG_UNDO_SLOTS：各个Undo页面链表的first undo page的页号集合，也就是undo slot集合。<br>
一个页号占用4个字节，对于16KB大小的页面来说，这个TRX_RSEG_UNDO_SLOTS部分共存储了1024个undo slot，所以共需1024 × 4 = 4096个字节。</li>
</ul>
<h4 id="2362-从回滚段中申请undo页面链表">23.6.2 从回滚段中申请Undo页面链表</h4>
<p>初始情况下，由于未向任何事务分配任何Undo页面链表，所以对于一个Rollback Segment Header页面来说，它的各个undo slot都被设置成了一个特殊的值：FIL_NULL（对应的十六进制就是0xFFFFFFFF），表示该undo slot不指向任何页面。</p>
<p>开始有事务需要分配Undo页面链表了，就从回滚段的第一个undo slot开始，看看该undo slot的值是不是FIL_NULL：</p>
<ul>
<li>如果是FIL_NULL，那么在表空间中新创建一个段（也就是Undo Log Segment），然后从段里申请一个页面作为Undo页面链表的first undo page，然后把该undo slot的值设置为刚刚申请的这个页面的地址，这样也就意味着这个undo slot被分配给了这个事务。</li>
<li>如果不是FIL_NULL，说明该undo slot已经指向了一个undo链表，也就是说这个undo slot已经被别的事务占用了，那就跳到下一个undo slot，判断该undo slot的值是不是FIL_NULL，重复上面的步骤。</li>
</ul>
<p>一个Rollback Segment Header页面中包含1024个undo slot，如果这1024个undo slot的值都不为FIL_NULL，这就意味着这1024个undo slot都已经名花有主（被分配给了某个事务），此时由于新事务无法再获得新的Undo页面链表，就会回滚这个事务并且给用户报错：</p>
<pre><code class="language-java">Too many active concurrent transactions
</code></pre>
<p>当一个事务提交时，它所占用的undo slot有两种命运：</p>
<ul>
<li>
<p>如果该undo slot指向的Undo页面链表符合被重用的条件（就是我们上面说的Undo页面链表只占用一个页面并且已使用空间小于整个页面的3/4）。<br>
该undo slot就处于被缓存的状态，InnoDB规定这时该Undo页面链表的TRX_UNDO_STATE属性（该属性在first undo page的Undo Log Segment Header部分）会被设置为TRX_UNDO_CACHED。<br>
被缓存的undo slot都会被加入到一个链表，根据对应的Undo页面链表的类型不同，也会被加入到不同的链表：<br>
1、如果对应的Undo页面链表是insert undo链表，则该undo slot会被加入insert undo cached链表。<br>
2、如果对应的Undo页面链表是update undo链表，则该undo slot会被加入update undo cached链表。<br>
一个回滚段就对应着上述两个cached链表，如果有新事务要分配undo slot时，先从对应的cached链表中找。如果没有被缓存的undo slot，才会到回滚段的Rollback Segment Header页面中再去找。</p>
</li>
<li>
<p>如果该undo slot指向的Undo页面链表不符合被重用的条件，那么针对该undo slot对应的Undo页面链表类型不同，也会有不同的处理：<br>
如果对应的Undo页面链表是insert undo链表，则该Undo页面链表的TRX_UNDO_STATE属性会被设置为TRX_UNDO_TO_FREE，之后该Undo页面链表对应的段会被释放掉（也就意味着段中的页面可以被挪作他用），然后把该undo slot的值设置为FIL_NULL。<br>
如果对应的Undo页面链表是update undo链表，则该Undo页面链表的TRX_UNDO_STATE属性会被设置为TRX_UNDO_TO_PRUGE，则会将该undo slot的值设置为FIL_NULL，然后将本次事务写入的一组undo日志放到所谓的History链表中（需要注意的是，这里并不会将Undo页面链表对应的段给释放掉，因为这些undo日志还有用呢～）。</p>
</li>
</ul>
<h4 id="2363-多个回滚段">23.6.3 多个回滚段</h4>
<p>我们说一个事务执行过程中最多分配4个Undo页面链表，而一个回滚段里只有1024个undo slot，很显然undo slot的数量有点少啊。我们即使假设一个读写事务执行过程中只分配1个Undo页面链表，那1024个undo slot也只能支持1024个读写事务同时执行。</p>
<p>InnoDB一口气定义了128个回滚段，也就相当于有了<mark>128 × 1024 = 131072个undo slot</mark>。假设一个读写事务执行过程中只分配1个Undo页面链表，那么就可以同时支持131072个读写事务并发执行。</p>
<p>每个回滚段都对应着一个Rollback Segment Header页面，有128个回滚段，自然就要有128个Rollback Segment Header页面，于是InnoDB在系统表空间的第<mark>5</mark>号页面的某个区域包含了128个8字节大小的格子，每个8字节的格子的构造就像这样：<br>
<img src="https://q456qq520.github.io/post-images/1677577317818.png" alt="" loading="lazy"></p>
<ul>
<li>4字节大小的Space ID，代表一个表空间的ID。</li>
<li>4字节大小的Page number，代表一个页号。</li>
</ul>
<p>也就是说每个8字节大小的格子相当于一个指针，指向某个表空间中的某个页面，这些页面就是Rollback Segment Header。这里需要注意的一点事，要定位一个Rollback Segment Header还需要知道对应的表空间ID，<mark>这也就意味着不同的回滚段可能分布在不同的表空间中</mark>。</p>
<p>所以通过上面的叙述我们可以大致清楚，在系统表空间的第5号页面中存储了128个Rollback Segment Header页面地址，每个Rollback Segment Header就相当于一个回滚段。在Rollback Segment Header页面中，又包含1024个undo slot，每个undo slot都对应一个Undo页面链表。我们画个示意图：<br>
<img src="https://q456qq520.github.io/post-images/1677577529720.png" alt="" loading="lazy"></p>
<h4 id="2364-回滚段的分类">23.6.4 回滚段的分类</h4>
<p>我们把这128个回滚段给编一下号，最开始的回滚段称之为第0号回滚段，之后依次递增，最后一个回滚段就称之为第127号回滚段。这128个回滚段可以被分成两大类：</p>
<ul>
<li>
<p>第0号、第33～127号回滚段属于一类。其中第0号回滚段必须在系统表空间中（就是说第0号回滚段对应的Rollback Segment Header页面必须在系统表空间中），第33～127号回滚段既可以在系统表空间中，也可以在自己配置的undo表空间中。</p>
</li>
<li>
<p>第1～32号回滚段属于一类。这些回滚段必须在临时表空间（对应着数据目录中的ibtmp1文件）中。</p>
</li>
</ul>
<p>也就是说如果一个事务在执行过程中既对普通表的记录做了改动，又对临时表的记录做了改动，那么需要为这个记录分配2个回滚段，再分别到这两个回滚段中分配对应的undo slot。</p>
<p>为什么要把针对普通表和临时表来划分不同种类的回滚段呢？这个还得从Undo页面本身说起，我们说Undo页面其实是类型为FIL_PAGE_UNDO_LOG的页面的简称，说到底它也是一个普通的页面。我们前面说过，在修改页面之前一定要先把对应的redo日志写上，这样在系统奔溃重启时才能恢复到奔溃前的状态。</p>
<p>我们向Undo页面写入undo日志本身也是一个写页面的过程，InnoDB为此还设计了许多种redo日志的类型，比方说MLOG_UNDO_HDR_CREATE、MLOG_UNDO_INSERT、MLOG_UNDO_INIT等等，也就是说我们对Undo页面做的任何改动都会记录相应类型的redo日志。但是对于临时表来说，因为修改临时表而产生的undo日志只需要在系统运行过程中有效，如果系统奔溃了，那么在重启时也不需要恢复这些undo日志所在的页面，所以在写针对临时表的Undo页面时，并不需要记录相应的redo日志。</p>
<p><code>总结一下针对普通表和临时表划分不同种类的回滚段的原因：在修改针对普通表的回滚段中的Undo页面时，需要记录对应的redo日志，而修改针对临时表的回滚段中的Undo页面时，不需要记录对应的redo日志。</code></p>
<blockquote>
<p>小贴士：实际上在MySQL 5.7.21这个版本中，如果我们仅仅对普通表的记录做了改动，那么只会为该事务分配针对普通表的回滚段，不分配针对临时表的回滚段。但是如果我们仅仅对临时表的记录做了改动，那么既会为该事务分配针对普通表的回滚段，又会为其分配针对临时表的回滚段（不过分配了回滚段并不会立即分配undo slot，只有在真正需要Undo页面链表时才会去分配回滚段中的undo slot）。</p>
</blockquote>
<h3 id="237-为事务分配undo页面链表详细过程">23.7 为事务分配Undo页面链表详细过程</h3>
<ol>
<li>事务在执行过程中对普通表的记录首次做改动之前，首先会到系统表空间的第5号页面中分配一个回滚段（其实就是获取一个Rollback Segment Header页面的地址）。一旦某个回滚段被分配给了这个事务，那么之后该事务中再对普通表的记录做改动时，就不会重复分配了。</li>
<li>在分配到回滚段后，首先看一下这个回滚段的两个cached链表有没有已经缓存了的undo slot，比如如果事务做的是INSERT操作，就去回滚段对应的insert undo cached链表中看看有没有缓存的undo slot；如果事务做的是DELETE操作，就去回滚段对应的update undo cached链表中看看有没有缓存的undo slot。如果有缓存的undo slot，那么就把这个缓存的undo slot分配给该事务。</li>
<li>如果没有缓存的undo slot可供分配，那么就要到Rollback Segment Header页面中找一个可用的undo slot分配给当前事务。</li>
<li>找到可用的undo slot后，如果该undo slot是从cached链表中获取的，那么它对应的Undo Log Segment已经分配了，否则的话需要重新分配一个Undo Log Segment，然后从该Undo Log Segment中申请一个页面作为Undo页面链表的first undo page。</li>
<li>然后事务就可以把undo日志写入到上面申请的Undo页面链表了。</li>
</ol>
<p>对临时表的记录做改动的步骤和上述的一样，就不赘述了。不错需要再次强调一次，<mark>如果一个事务在执行过程中既对普通表的记录做了改动，又对临时表的记录做了改动，那么需要为这个记录分配2个回滚段。并发执行的不同事务其实也可以被分配相同的回滚段，只要分配不同的undo slot就可以了</mark>。</p>
<h3 id="238-回滚段相关配置">23.8 回滚段相关配置</h3>
<h4 id="2381-配置回滚段数量">23.8.1 配置回滚段数量</h4>
<p>系统中一共有128个回滚段，其实这只是默认值，我们可以通过启动参数<code>innodb_rollback_segments</code>来配置回滚段的数量，可配置的范围是1~128。但是这个参数并不会影响针对临时表的回滚段数量，针对临时表的回滚段数量一直是32，也就是说：</p>
<ul>
<li>如果我们把innodb_rollback_segments的值设置为1，那么只会有1个针对普通表的可用回滚段，但是仍然有32个针对临时表的可用回滚段。</li>
<li>如果我们把innodb_rollback_segments的值设置为2～33之间的数，效果和将其设置为1是一样的。</li>
<li>如果我们把innodb_rollback_segments设置为大于33的数，那么针对普通表的可用回滚段数量就是该值减去32。</li>
</ul>
<h4 id="2382-配置undo表空间">23.8.2 配置undo表空间</h4>
<p>默认情况下，针对普通表设立的回滚段（第0号以及第33<sub>127号回滚段）都是被分配到系统表空间的。其中的第0号回滚段是一直在系统表空间的，但是第33</sub>127号回滚段可以通过配置放到自定义的undo表空间中。但是这种配置只能在系统初始化（创建数据目录时）的时候使用，一旦初始化完成，之后就不能再次更改了。我们看一下相关启动参数：</p>
<ul>
<li>通过innodb_undo_directory指定undo表空间所在的目录，如果没有指定该参数，则默认undo表空间所在的目录就是数据目录。</li>
<li>通过innodb_undo_tablespaces定义undo表空间的数量。该参数的默认值为0，表明不创建任何undo表空间。</li>
</ul>
<h2 id="第24章-事务的隔离级别与mvcc">第24章 事务的隔离级别与MVCC</h2>
<h3 id="241-事前准备">24.1 事前准备</h3>
<pre><code class="language-mysql">CREATE TABLE hero (
    number INT,
    name VARCHAR(100),
    country varchar(100),
    PRIMARY KEY (number)
) Engine=InnoDB CHARSET=utf8;

INSERT INTO hero VALUES(1, '刘备', '蜀');
</code></pre>
<h3 id="242-事务隔离级别">24.2 事务隔离级别</h3>
<p>MySQL是一个客户端／服务器架构的软件，对于同一个服务器来说，可以有若干个客户端与之连接，每个客户端与服务器连接上之后，就可以称之为一个会话（Session）。每个客户端都可以在自己的会话中向服务器发出请求语句，一个请求语句可能是某个事务的一部分，也就是对于服务器来说可能同时处理多个事务。</p>
<p>事务有一个称之为隔离性的特性，理论上在某个事务对某个数据进行访问时，其他事务应该进行排队，当该事务提交之后，其他事务才可以继续访问这个数据。但是这样子的话对性能影响太大，我们既想保持事务的隔离性，又想让服务器在处理访问同一数据的多个事务时性能尽量高些，鱼和熊掌不可得兼，舍一部分隔离性而取性能者也。</p>
<h4 id="2421-事务并发执行遇到的问题">24.2.1 事务并发执行遇到的问题</h4>
<p>访问相同数据的事务在不保证串行执行（也就是执行完一个再执行另一个）的情况下可能会出现哪些问题：</p>
<ul>
<li><code>脏写（Dirty Write）</code><br>
如果一个事务修改了另一个未提交事务修改过的数据，那就意味着发生了脏写。</li>
<li><code>脏读（Dirty Read）</code><br>
如果一个事务读到了另一个未提交事务修改过的数据，那就意味着发生了脏读。</li>
<li><code>不可重复读（Non-Repeatable Read）</code><br>
如果一个事务能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值，那就意味着发生了不可重复读。</li>
<li><code>幻读（Phantom）</code><br>
如果一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来，那就意味着发生了幻读。</li>
</ul>
<h4 id="2422-sql标准中的四种隔离级别">24.2.2 SQL标准中的四种隔离级别</h4>
<blockquote>
<p>脏写 &gt; 脏读 &gt; 不可重复读 &gt; 幻读</p>
</blockquote>
<p>我们上面所说的舍弃一部分隔离性来换取一部分性能在这里就体现在：<mark>设立一些隔离级别，隔离级别越低，越严重的问题就越可能发生</mark>。制定了一个所谓的SQL标准，在标准中设立了4个隔离级别：</p>
<ul>
<li>READ UNCOMMITTED：未提交读。</li>
<li>READ COMMITTED：已提交读。</li>
<li>REPEATABLE READ：可重复读。</li>
<li>SERIALIZABLE：可串行化。</li>
</ul>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ UNCOMMITTED</td>
<td>Possible</td>
<td>Possible</td>
<td>Possible</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>Not Possible</td>
<td>Possible</td>
<td>Possible</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>Not Possible</td>
<td>Not Possible</td>
<td>Possible</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>Not Possible</td>
<td>Not Possible</td>
<td>Not Possible</td>
</tr>
</tbody>
</table>
<p>也就是说：</p>
<ul>
<li>READ UNCOMMITTED隔离级别下，可能发生脏读、不可重复读和幻读问题。</li>
<li>READ COMMITTED隔离级别下，可能发生不可重复读和幻读问题，但是不可以发生脏读问题。</li>
<li>REPEATABLE READ隔离级别下，可能发生幻读问题，但是不可以发生脏读和不可重复读的问题。</li>
<li>SERIALIZABLE隔离级别下，各种问题都不可以发生。</li>
</ul>
<h4 id="2423-mysql中支持的四种隔离级别">24.2.3 MySQL中支持的四种隔离级别</h4>
<p>MySQL的默认隔离级别为REPEATABLE READ，我们可以手动修改一下事务的隔离级别。</p>
<pre><code class="language-mysql">SET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL level;

level: {
     REPEATABLE READ
   | READ COMMITTED
   | READ UNCOMMITTED
   | SERIALIZABLE
}
</code></pre>
<p>如果我们在服务器启动时想改变事务的默认隔离级别，可以修改启动参数transaction-isolation的值，比方说我们在启动服务器时指定了--transaction-isolation=SERIALIZABLE，那么事务的默认隔离级别就从原来的REPEATABLE READ变成了SERIALIZABLE。</p>
<pre><code class="language-mysql">SHOW VARIABLES LIKE 'transaction_isolation';
SELECT @@transaction_isolation;
</code></pre>
<h3 id="243-mvcc原理">24.3 MVCC原理</h3>
<h4 id="2431-版本链">24.3.1 版本链</h4>
<p>对于使用InnoDB存储引擎的表来说，它的聚簇索引记录中都包含两个必要的隐藏列（row_id并不是必要的，我们创建的表中有主键或者非NULL的UNIQUE键时都不会包含row_id列）：</p>
<ul>
<li>trx_id：每次一个事务对某条聚簇索引记录进行改动时，都会把该事务的事务id赋值给trx_id隐藏列。</li>
<li>roll_pointer：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</li>
</ul>
<p>比方说我们的表hero现在只包含一条记录，假设插入该记录的事务id为80，那么此刻该条记录的示意图如下所示：<br>
<img src="https://q456qq520.github.io/post-images/1677641519242.png" alt="" loading="lazy"></p>
<blockquote>
<p>小贴士：实际上insert undo只在事务回滚时起作用，当事务提交后，该类型的undo日志就没用了，它占用的Undo Log Segment也会被系统回收（也就是该undo日志占用的Undo页面链表要么被重用，要么被释放）。虽然真正的insert undo日志占用的存储空间被释放了，但是roll_pointer的值并不会被清除，roll_pointer属性占用7个字节，第一个比特位就标记着它指向的undo日志的类型，如果该比特位的值为1时，就代表着它指向的undo日志类型为insert undo。</p>
</blockquote>
<p>假设之后两个事务id分别为100、200的事务对这条记录进行UPDATE操作，操作流程如下：<br>
<img src="https://q456qq520.github.io/post-images/1677641595137.png" alt="" loading="lazy"></p>
<blockquote>
<p>小贴士：能不能在两个事务中交叉更新同一条记录呢？这不就是一个事务修改了另一个未提交事务修改过的数据，沦为了脏写了么？InnoDB使用锁来保证不会有脏写情况的发生，也就是在第一个事务更新了某条记录后，就会给这条记录加锁，另一个事务再次更新时就需要等待第一个事务提交了，把锁释放之后才可以继续更新。</p>
</blockquote>
<p>每次对记录进行改动，都会记录一条undo日志，每条undo日志也都有一个roll_pointer属性（INSERT操作对应的undo日志没有该属性，因为该记录并没有更早的版本），可以将这些undo日志都连起来，串成一个链表，所以现在的情况就像下图一样：<br>
<img src="https://q456qq520.github.io/post-images/1677641689718.png" alt="" loading="lazy"></p>
<p>对该记录每次更新后，都会将旧值放到一条undo日志中，就算是该记录的一个旧版本，随着更新次数的增多，所有的版本都会被roll_pointer属性连接成一个链表，我们把这个链表称之为<code>版本链</code>，<mark>版本链的头节点就是当前记录最新的值</mark>。另外，每个版本中还包含生成该版本时对应的事务id。</p>
<h4 id="2432-readview">24.3.2 ReadView</h4>
<p>对于使用READ UNCOMMITTED隔离级别的事务来说，由于可以读到未提交事务修改过的记录，所以直接读取记录的最新版本就好了；对于使用SERIALIZABLE隔离级别的事务来说，设计InnoDB的大佬规定使用加锁的方式来访问记录；对于使用READ COMMITTED和REPEATABLE READ隔离级别的事务来说，都必须保证读到已经提交了的事务修改过的记录，也就是说假如另一个事务已经修改了记录但是尚未提交，是不能直接读取最新版本的记录的，核心问题就是：<mark>需要判断一下版本链中的哪个版本是当前事务可见的</mark>。为此InnoDB提出了一个<code>ReadView</code>的概念，这个ReadView中主要包含4个比较重要的内容：</p>
<ul>
<li>m_ids：表示在生成ReadView时当前系统中活跃的读写事务的事务id列表。</li>
<li>min_trx_id：表示在生成ReadView时当前系统中活跃的读写事务中最小的事务id，也就是m_ids中的最小值。</li>
<li>max_trx_id：表示生成ReadView时系统中应该分配给下一个事务的id值。</li>
<li>creator_trx_id：表示生成该ReadView的事务的事务id，只读事务中的事务id值都默认为0。</li>
</ul>
<p>有了这个ReadView，这样在访问某条记录时，只需要按照下面的步骤判断记录的某个版本是否可见：</p>
<ul>
<li>如果被访问版本的trx_id属性值与ReadView中的creator_trx_id值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。</li>
<li>如果被访问版本的trx_id属性值小于ReadView中的min_trx_id值，表明生成该版本的事务在当前事务生成ReadView前已经提交，所以该版本可以被当前事务访问。</li>
<li>如果被访问版本的trx_id属性值大于ReadView中的max_trx_id值，表明生成该版本的事务在当前事务生成ReadView后才开启，所以该版本不可以被当前事务访问。</li>
<li>如果被访问版本的trx_id属性值在ReadView的min_trx_id和max_trx_id之间，那就需要判断一下trx_id属性值是不是在m_ids列表中，如果在，说明创建ReadView时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建ReadView时生成该版本的事务已经被提交，该版本可以被访问。</li>
</ul>
<p><mark>如果某个版本的数据对当前事务不可见的话，那就顺着版本链找到下一个版本的数据，继续按照上面的步骤判断可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对该事务完全不可见，查询结果就不包含该记录。</mark></p>
<p>在MySQL中，READ COMMITTED和REPEATABLE READ隔离级别的的一个非常大的区别就是它们生成ReadView的时机不同。我们还是以表hero为例来，假设现在表hero中只有一条由事务id为80的事务插入的一条记录：</p>
<p><strong>READ COMMITTED —— 每次读取数据前都生成一个ReadView</strong><br>
比方说现在系统里有两个事务id分别为100、200的事务在执行：</p>
<pre><code class="language-mysql"># Transaction 100
BEGIN;
UPDATE hero SET name = '关羽' WHERE number = 1;
UPDATE hero SET name = '张飞' WHERE number = 1;

# Transaction 200
BEGIN;

# 更新了一些别的表的记录
...
</code></pre>
<p>此刻，表hero中number为1的记录得到的版本链表如下所示：<br>
<img src="https://q456qq520.github.io/post-images/1677642299129.png" alt="" loading="lazy"></p>
<p>假设现在有一个使用READ COMMITTED隔离级别的事务开始执行：</p>
<pre><code class="language-mysql"># 使用READ COMMITTED隔离级别的事务
BEGIN;

# SELECT1：Transaction 100、200未提交
SELECT * FROM hero WHERE number = 1; # 得到的列name的值为'刘备'
</code></pre>
<p>这个SELECT1的执行过程如下：</p>
<ul>
<li>在执行SELECT语句时会先生成一个ReadView，ReadView的m_ids列表的内容就是[100, 200]，min_trx_id为100，max_trx_id为201，creator_trx_id为0。</li>
<li>然后从版本链中挑选可见的记录，从图中可以看出，最新版本的列name的内容是'张飞'，该版本的trx_id值为100，在m_ids列表内，所以不符合可见性要求，根据roll_pointer跳到下一个版本。</li>
<li>下一个版本的列name的内容是'关羽'，该版本的trx_id值也为100，也在m_ids列表内，所以也不符合要求，继续跳到下一个版本。</li>
<li>下一个版本的列name的内容是'刘备'，该版本的trx_id值为80，小于ReadView中的min_trx_id值100，所以这个版本是符合要求的，最后返回给用户的版本就是这条列name为'刘备'的记录。</li>
</ul>
<p>总结一下就是：<mark>使用READ COMMITTED隔离级别的事务在每次查询开始时都会生成一个独立的ReadView</mark>。</p>
<p><strong>REPEATABLE READ —— 在第一次读取数据时生成一个ReadView</strong><br>
 对于使用REPEATABLE READ隔离级别的事务来说，只会在第一次执行查询语句时生成一个ReadView，之后的查询就不会重复生成了。我们还是用例子看一下是什么效果。</p>
<p>比方说现在系统里有两个事务id分别为100、200的事务在执行：</p>
<pre><code class="language-mysql"># Transaction 100
BEGIN;
UPDATE hero SET name = '关羽' WHERE number = 1;
UPDATE hero SET name = '张飞' WHERE number = 1;
# Transaction 200
BEGIN;
# 更新了一些别的表的记录
...
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://q456qq520.github.io/post-images/1677642299129.png" alt="" loading="lazy"></figure>
<p>假设现在有一个使用REPEATABLE READ隔离级别的事务开始执行：</p>
<pre><code class="language-mysql"># 使用REPEATABLE READ隔离级别的事务
BEGIN;

# SELECT1：Transaction 100、200未提交
SELECT * FROM hero WHERE number = 1; # 得到的列name的值为'刘备'
</code></pre>
<p>这个SELECT1的执行过程如下：</p>
<ul>
<li>在执行SELECT语句时会先生成一个ReadView，ReadView的m_ids列表的内容就是[100, 200]，min_trx_id为100，max_trx_id为201，creator_trx_id为0。</li>
<li>然后从版本链中挑选可见的记录，从图中可以看出，最新版本的列name的内容是'张飞'，该版本的trx_id值为100，在m_ids列表内，所以不符合可见性要求，根据roll_pointer跳到下一个版本。</li>
<li>下一个版本的列name的内容是'关羽'，该版本的trx_id值也为100，也在m_ids列表内，所以也不符合要求，继续跳到下一个版本。</li>
<li>下一个版本的列name的内容是'刘备'，该版本的trx_id值为80，小于ReadView中的min_trx_id值100，所以这个版本是符合要求的，最后返回给用户的版本就是这条列name为'刘备'的记录。</li>
</ul>
<p>我们把事务id为100的事务提交一下，然后再到事务id为200的事务中更新一下表hero中number为1的记录：</p>
<pre><code class="language-mysql"># Transaction 200
BEGIN;

# 更新了一些别的表的记录
...
UPDATE hero SET name = '赵云' WHERE number = 1;

UPDATE hero SET name = '诸葛亮' WHERE number = 1;
</code></pre>
<p>然后再到刚才使用REPEATABLE READ隔离级别的事务中继续查找这个number为1的记录，如下：</p>
<pre><code class="language-mysql"># 使用REPEATABLE READ隔离级别的事务
BEGIN;

# SELECT1：Transaction 100、200均未提交
SELECT * FROM hero WHERE number = 1; # 得到的列name的值为'刘备'

# SELECT2：Transaction 100提交，Transaction 200未提交
SELECT * FROM hero WHERE number = 1; # 得到的列name的值仍为'刘备'
</code></pre>
<p>因为当前事务的隔离级别为REPEATABLE READ，而之前在执行SELECT1时已经生成过ReadView了，所以此时直接复用之前的ReadView。也就是说两次SELECT查询得到的结果是重复的，记录的列c值都是'刘备'，这就是可重复读的含义。如果我们之后再把事务id为200的记录提交了，然后再到刚才使用REPEATABLE READ隔离级别的事务中继续查找这个number为1的记录，得到的结果还是'刘备'。</p>
<h3 id="244-mvcc小结">24.4 MVCC小结</h3>
<p>从上面的描述中我们可以看出来，所谓的MVCC（Multi-Version Concurrency Control ，多版本并发控制）指的就是在使用READ COMMITTD、REPEATABLE READ这两种隔离级别的事务在执行普通的SEELCT操作时访问记录的版本链的过程，这样子可以使不同事务的读-写、写-读操作并发执行，从而提升系统性能。READ COMMITTD、REPEATABLE READ这两个隔离级别的一个很大不同就是：<mark>生成ReadView的时机不同，READ COMMITTD在每一次进行普通SELECT操作前都会生成一个ReadView，而REPEATABLE READ只在第一次进行普通SELECT操作前生成一个ReadView，之后的查询操作都重复使用这个ReadView就好了</mark>。</p>
<blockquote>
<p>我们之前说执行DELETE语句或者更新主键的UPDATE语句并不会立即把对应的记录完全从页面中删除，而是执行一个所谓的delete mark操作，相当于只是对记录打上了一个删除标志位，这主要就是为MVCC服务的。</p>
</blockquote>
<p>随着系统的运行，在确定系统中包含最早产生的那个ReadView的事务不会再访问某些update undo日志以及被打了删除标记的记录后，有一个后台运行的purge线程会把它们真正的删除掉。</p>
<h2 id="第25章-锁">第25章 锁</h2>
<h3 id="251-解决并发事务带来问题的两种基本方式">25.1 解决并发事务带来问题的两种基本方式</h3>
<p>并发事务访问相同记录的情况大致可以划分为3种：</p>
<p><strong>读-读情况</strong>：即并发事务相继读取相同的记录。<br>
  读取操作本身不会对记录有一毛钱影响，并不会引起什么问题，所以允许这种情况的发生。</p>
<p><strong>写-写情况</strong>：即并发事务相继对相同的记录做出改动。<br>
  在这种情况下会发生脏写的问题，任何一种隔离级别都不允许这种问题的发生。所以在多个未提交事务相继对一条记录做改动时，需要让它们排队执行，这个排队的过程其实是通过锁来实现的。这个所谓的锁其实是一个内存中的结构，在事务执行前本来是没有锁的，当一个事务想对这条记录做改动时，首先会看看内存中有没有与这条记录关联的锁结构，当没有的时候就会在内存中生成一个锁结构与之关联。<br>
<img src="https://q456qq520.github.io/post-images/1677721702728.png" alt="" loading="lazy"></p>
<p>我们现在只把两个比较重要的属性拿了出来：<br>
1、trx信息：代表这个锁结构是哪个事务生成的。<br>
2、is_waiting：代表当前事务是否在等待。</p>
<p>如图所示，当事务T1改动了这条记录后，就生成了一个锁结构与该记录关联，因为之前没有别的事务为这条记录加锁，所以is_waiting属性就是false，我们把这个场景就称之为获取锁成功，或者加锁成功，然后就可以继续执行操作了。<br>
在事务T1提交之前，另一个事务T2也想对该记录做改动，那么先去看看有没有锁结构与这条记录关联，发现有一个锁结构与之关联后，然后也生成了一个锁结构与这条记录关联，不过锁结构的is_waiting属性值为true，表示当前事务需要等待，我们把这个场景就称之为获取锁失败，或者加锁失败，或者没有成功的获取到锁。<br>
在事务T1提交之后，就会把该事务生成的锁结构释放掉，然后看看还有没有别的事务在等待获取锁，发现了事务T2还在等待获取锁，所以把事务T2对应的锁结构的is_waiting属性设置为false，然后把该事务对应的线程唤醒，让它继续执行，此时事务T2就算获取到锁了。</p>
<p><strong>读-写或写-读情况</strong>：也就是一个事务进行读取操作，另一个进行改动操作。这种情况下可能发生脏读、不可重复读、幻读的问题。</p>
<p>怎么解决脏读、不可重复读、幻读这些问题呢？其实有两种可选的解决方案：</p>
<p>方案一：读操作利用多版本并发控制（MVCC），写操作进行加锁。<br>
就是通过生成一个ReadView，然后通过ReadView找到符合条件的记录版本（历史版本是由undo日志构建的），其实就像是在生成ReadView的那个时刻做了一次时间静止（就像用相机拍了一个快照），查询语句只能读到在生成ReadView之前已提交事务所做的更改，在生成ReadView之前未提交的事务或者之后才开启的事务所做的更改是看不到的。而写操作肯定针对的是最新版本的记录，读记录的历史版本和改动记录的最新版本本身并不冲突，也就是采用MVCC时，读-写操作并不冲突。</p>
<p>方案二：读、写操作都采用加锁的方式。<br>
如果我们的一些业务场景不允许读取记录的旧版本，而是每次都必须去读取记录的最新版本，这样在读取记录的时候也就需要对其进行加锁操作，这样也就意味着读操作和写操作也像写-写操作那样排队执行。</p>
<h3 id="252-一致性读consistent-reads">25.2 一致性读（Consistent Reads）</h3>
<p>事务利用MVCC进行的读取操作称之为一致性读，或者一致性无锁读，有的地方也称之为快照读。所有普通的SELECT语句（plain SELECT）在READ COMMITTED、REPEATABLE READ隔离级别下都算是一致性读。</p>
<p>一致性读并不会对表中的任何记录做加锁操作，其他事务可以自由的对表中的记录做改动。</p>
<h3 id="253-锁定读locking-reads">25.3 锁定读（Locking Reads）</h3>
<h4 id="2531-共享锁和独占锁">25.3.1 共享锁和独占锁</h4>
<p>在使用加锁的方式解决问题时，由于既要允许读-读情况不受影响，又要使写-写、读-写或写-读情况中的操作相互阻塞，所以MySQL给锁分了个类：</p>
<p><code>共享锁</code>，英文名：Shared  Locks，简称S锁。在事务要读取一条记录时，需要先获取该记录的S锁。<br>
<code>独占锁</code>，也常称排他锁，英文名：Exclusive Locks，简称X锁。在事务要改动一条记录时，需要先获取该记录的X锁。</p>
<p>假如事务T1首先获取了一条记录的S锁之后，事务T2接着也要访问这条记录：<br>
如果事务T2想要再获取一个记录的S锁，那么事务T2也会获得该锁，也就意味着事务T1和T2在该记录上同时持有S锁。<br>
如果事务T2想要再获取一个记录的X锁，那么此操作会被阻塞，直到事务T1提交之后将S锁释放掉。<br>
如果事务T1首先获取了一条记录的X锁之后，那么不管事务T2接着想获取该记录的S锁还是X锁都会被阻塞，直到事务T1提交。</p>
<h4 id="2532-锁定读的语句">25.3.2 锁定读的语句</h4>
<p>我们前面说在采用加锁方式解决脏读、不可重复读、幻读这些问题时，读取一条记录时需要获取一下该记录的S锁，其实这是不严谨的，有时候想在读取记录时就获取记录的X锁，来禁止别的事务读写该记录，为此MySQL提出了两种比较特殊的SELECT语句格式：</p>
<ol>
<li>对读取的记录加S锁：</li>
</ol>
<pre><code class="language-mysql">SELECT ... LOCK IN SHARE MODE;
</code></pre>
<p>也就是在普通的SELECT语句后边加LOCK IN SHARE MODE，如果当前事务执行了该语句，那么它会为读取到的记录加S锁，这样允许别的事务继续获取这些记录的S锁（比方说别的事务也使用SELECT ... LOCK IN SHARE MODE语句来读取这些记录），但是不能获取这些记录的X锁（比方说使用SELECT ... FOR UPDATE语句来读取这些记录，或者直接修改这些记录）。如果别的事务想要获取这些记录的X锁，那么它们会阻塞，直到当前事务提交之后将这些记录上的S锁释放掉。</p>
<ol start="2">
<li>对读取的记录加X锁：</li>
</ol>
<pre><code class="language-mysql">SELECT ... FOR UPDATE;
</code></pre>
<p>也就是在普通的SELECT语句后边加FOR UPDATE，如果当前事务执行了该语句，那么它会为读取到的记录加X锁，这样既不允许别的事务获取这些记录的S锁，也不允许获取这些记录的X锁。如果别的事务想要获取这些记录的S锁或者X锁，那么它们会阻塞，直到当前事务提交之后将这些记录上的X锁释放掉。</p>
<h4 id="2533-写操作">25.3.3 写操作</h4>
<ol>
<li>
<p>DELETE：<br>
  对一条记录做DELETE操作的过程其实是先在B+树中定位到这条记录的位置，然后获取一下这条记录的X锁，然后再执行delete mark操作。我们也可以把这个定位待删除记录在B+树中位置的过程看成是一个获取X锁的锁定读。</p>
</li>
<li>
<p>UPDATE：对一条记录做UPDATE操作时分为三种情况：<br>
  - 如果未修改该记录的键值并且被更新的列占用的存储空间在修改前后未发生变化，则先在B+树中定位到这条记录的位置，然后再获取一下记录的X锁，最后在原记录的位置进行修改操作。其实我们也可以把这个定位待修改记录在B+树中位置的过程看成是一个获取X锁的锁定读。<br>
  - 如果未修改该记录的键值并且至少有一个被更新的列占用的存储空间在修改前后发生变化，则先在B+树中定位到这条记录的位置，然后获取一下记录的X锁，将该记录彻底删除掉（就是把记录彻底移入垃圾链表），最后再插入一条新记录。这个定位待修改记录在B+树中位置的过程看成是一个获取X锁的锁定读，新插入的记录由INSERT操作提供的隐式锁进行保护<br>
  - 如果修改了该记录的键值，则相当于在原记录上做DELETE操作之后再来一次INSERT操作，加锁操作就需要按照DELETE和INSERT的规则进行了。</p>
</li>
<li>
<p>INSERT：<br>
  一般情况下，新插入一条记录的操作并不加锁，设计InnoDB的大佬通过一种称之为隐式锁的东东来保护这条新插入的记录在本事务提交前不被别的事务访问</p>
</li>
</ol>
<h3 id="254-多粒度锁">25.4 多粒度锁</h3>
<p>前面提到的锁都是针对记录的，也可以被称之为行级锁或者行锁，对一条记录加锁影响的也只是这条记录而已，我们就说这个锁的粒度比较细；其实一个事务也可以在表级别进行加锁，自然就被称之为<mark>表级锁</mark>或者<mark>表锁</mark>，对一个表加锁影响整个表中的记录，我们就说这个锁的粒度比较粗。给表加的锁也可以分为共享锁（S锁）和独占锁（X锁）：</p>
<p>给表加S锁：<br>
  如果一个事务给表加了S锁，那么：<br>
  别的事务可以继续获得该表的S锁<br>
  别的事务可以继续获得该表中的某些记录的S锁<br>
  别的事务不可以继续获得该表的X锁<br>
  别的事务不可以继续获得该表中的某些记录的X锁<br>
给表加X锁：<br>
  如果一个事务给表加了X锁（意味着该事务要独占这个表），那么：<br>
  别的事务不可以继续获得该表的S锁<br>
  别的事务不可以继续获得该表中的某些记录的S锁<br>
  别的事务不可以继续获得该表的X锁<br>
  别的事务不可以继续获得该表中的某些记录的X锁</p>
<p>我们在对表上表锁时，怎么知道该表有没有上行锁呢？依次检查有没有上锁？那这效率也太慢了吧！于是乎InnoDB提出了一种称之为<mark>意向锁（英文名：Intention Locks）</mark>：</p>
<ul>
<li>意向共享锁，英文名：Intention Shared Lock，简称IS锁。当事务准备在某条记录上加S锁时，需要先在表级别加一个IS锁。</li>
<li>意向独占锁，英文名：Intention Exclusive Lock，简称IX锁。当事务准备在某条记录上加X锁时，需要先在表级别加一个IX锁。</li>
</ul>
<p><mark>IS、IX锁是表级锁，它们的提出仅仅为了在之后加表级别的S锁和X锁时可以快速判断表中的记录是否被上锁，以避免用遍历的方式来查看表中有没有上锁的记录，也就是说其实IS锁和IX锁是兼容的，IX锁和IX锁是兼容的</mark>。</p>
<h3 id="255-mysql中的行锁和表锁">25.5 MySQL中的行锁和表锁</h3>
<h4 id="2551-其他存储引擎中的锁">25.5.1 其他存储引擎中的锁</h4>
<p>对于MyISAM、MEMORY、MERGE这些存储引擎来说，它们只支持表级锁，而且这些引擎并不支持事务，所以使用这些存储引擎的锁一般都是针对当前会话来说的。</p>
<p>比方说在Session 1中对一个表执行SELECT操作，就相当于为这个表加了一个表级别的S锁，如果在SELECT操作未完成时，Session 2中对这个表执行UPDATE操作，相当于要获取表的X锁，此操作会被阻塞，直到Session 1中的SELECT操作完成，释放掉表级别的S锁后，Session 2中对这个表执行UPDATE操作才能继续获取X锁，然后执行具体的更新语句。</p>
<blockquote>
<p>小贴士：因为使用MyISAM、MEMORY、MERGE这些存储引擎的表在同一时刻只允许一个会话对表进行写操作，所以这些存储引擎实际上最好用在只读，或者大部分都是读操作，或者单用户的情景下。另外，在MyISAM存储引擎中有一个称之为Concurrent Inserts的特性，支持在对MyISAM表读取时同时插入记录，这样可以提升一些插入速度。</p>
</blockquote>
<h4 id="2552-innodb存储引擎中的锁">25.5.2 InnoDB存储引擎中的锁</h4>
<p>InnoDB存储引擎既支持表锁，也支持行锁。表锁实现简单，占用资源较少，不过粒度很粗，有时候你仅仅需要锁住几条记录，但使用表锁的话相当于为表中的所有记录都加锁，所以性能比较差。行锁粒度更细，可以实现更精准的并发控制。</p>
<h5 id="innodb中的表级锁">InnoDB中的表级锁</h5>
<ol>
<li>
<p>表级别的S锁、X锁<br>
在对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，InnoDB存储引擎是不会为这个表添加表级别的S锁或者X锁的。<br>
在对某个表执行一些诸如ALTER TABLE、DROP TABLE这类的DDL语句时，其他事务对这个表并发执行诸如SELECT、INSERT、DELETE、UPDATE的语句会发生阻塞，同理，某个事务中对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，在其他会话中对这个表执行DDL语句也会发生阻塞。这个过程其实是通过在server层使用一种称之为==元数据锁（英文名：Metadata Locks，简称MDL）==来实现的，一般情况下也不会使用InnoDB存储引擎自己提供的表级别的S锁和X锁。</p>
<p>其实这个InnoDB存储引擎提供的表级S锁或者X锁是相当鸡肋，只会在一些特殊情况下，比方说崩溃恢复过程中用到。不过我们还是可以手动获取一下的，比方说在系统变量<mark>autocommit=0，innodb_table_locks = 1</mark>时，手动获取InnoDB存储引擎提供的表t的S锁或者X锁可以这么写：</p>
</li>
</ol>
<pre><code class="language-mysql">LOCK TABLES t READ：InnoDB存储引擎会对表t加表级别的S锁。
LOCK TABLES t WRITE：InnoDB存储引擎会对表t加表级别的X锁。
</code></pre>
<ol start="2">
<li>表级别的IS锁、IX锁<br>
当我们在对使用InnoDB存储引擎的表的某些记录加S锁之前，那就需要先在表级别加一个IS锁，当我们在对使用InnoDB存储引擎的表的某些记录加X锁之前，那就需要先在表级别加一个IX锁。IS锁和IX锁的使命只是为了后续在加表级别的S锁和X锁时判断表中是否有已经被加锁的记录，以避免用遍历的方式来查看表中有没有上锁的记录。</li>
<li>表级别的AUTO-INC锁<br>
在使用MySQL过程中，我们可以为表的某个列添加AUTO_INCREMENT属性，之后在插入记录时，可以不指定该列的值，系统会自动为它赋上递增的值。系统实现这种自动给AUTO_INCREMENT修饰的列递增赋值的原理主要是两个：<br>
采用AUTO-INC锁，也就是在执行插入语句时就在表级别加一个AUTO-INC锁，然后为每条待插入记录的AUTO_INCREMENT修饰的列分配递增的值，在该语句执行结束后，再把AUTO-INC锁释放掉。这样一个事务在持有AUTO-INC锁的过程中，其他事务的插入语句都要被阻塞，可以保证一个语句中分配的递增值是连续的。<br>
采用一个轻量级的锁，在为插入语句生成AUTO_INCREMENT修饰的列的值时获取一下这个轻量级锁，然后生成本次插入语句需要用到的AUTO_INCREMENT列的值之后，就把该轻量级锁释放掉，并不需要等到整个插入语句执行完才释放锁。</li>
</ol>
<h5 id="innodb中的行级锁">InnoDB中的行级锁</h5>
<p>行锁，也称为<mark>记录锁</mark>，顾名思义就是在记录上加的锁。InnoDB把行锁分成了各种类型。换句话说即使对同一条记录加行锁，如果类型不同，起到的功效也是不同的。我们先将之前介绍MVCC时用到的表抄一遍：</p>
<pre><code class="language-mysql">CREATE TABLE hero (
    number INT,
    name VARCHAR(100),
    country varchar(100),
    PRIMARY KEY (number),
    KEY idx_name (name)
) Engine=InnoDB CHARSET=utf8;

mysql&gt; SELECT * FROM hero;
+--------+------------+---------+
| number | name       | country |
+--------+------------+---------+
|      1 | l刘备      | 蜀      |
|      3 | z诸葛亮    | 蜀      |
|      8 | c曹操      | 魏      |
|     15 | x荀彧      | 魏      |
|     20 | s孙权      | 吴      |
+--------+------------+---------+
5 rows in set (0.01 sec)
</code></pre>
<p>下面我们来看看都有哪些常用的行锁类型:<br>
<code>Record Locks</code><br>
我们前面提到的记录锁就是这种类型，是有S锁和X锁之分的，让我们分别称之为S型记录锁和X型记录锁吧，当一个事务获取了一条记录的S型记录锁后，其他事务也可以继续获取该记录的S型记录锁，但不可以继续获取X型记录锁；当一个事务获取了一条记录的X型记录锁后，其他事务既不可以继续获取该记录的S型记录锁，也不可以继续获取X型记录锁；</p>
<p><code>Gap Locks</code><br>
我们说MySQL在REPEATABLE READ隔离级别下是可以解决幻读问题的，解决方案有两种，可以使用MVCC方案解决，也可以采用加锁方案解决。但是在使用加锁方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些幻影记录加上记录锁。InnoDB提出了一种称之为Gap Locks的锁，官方的类型名称为：<mark>LOCK_GAP</mark>，我们也可以简称为gap锁。比方说我们把number值为8的那条记录加一个gap锁的示意图如下：<br>
<img src="https://q456qq520.github.io/post-images/1677727164236.png" alt="" loading="lazy"></p>
<p>如图中为number值为8的记录加了gap锁，意味着不允许别的事务在number值为8的记录前面的间隙插入新记录，其实就是number列的值(3, 8)这个区间的新记录是不允许立即插入的。比方说有另外一个事务再想插入一条number值为4的新记录，它定位到该条新记录的下一条记录的number值为8，而这条记录上又有一个gap锁，所以就会阻塞插入操作，直到拥有这个gap锁的事务提交了之后，number列的值在区间(3, 8)中的新记录才可以被插入。</p>
<p>这个gap锁的提出仅仅是<mark>为了防止插入幻影记录而提出的</mark>，虽然有共享gap锁和独占gap锁这样的说法，但是它们起到的作用都是相同的。而且如果你对一条记录加了gap锁（不论是共享gap锁还是独占gap锁），并不会限制其他事务对这条记录加记录锁或者继续加gap锁，再强调一遍，gap锁的作用仅仅是为了防止插入幻影记录的而已。</p>
<p>给一条记录加了gap锁只是不允许其他事务往这条记录前面的间隙插入新记录，那对于最后一条记录之后的间隙，也就是hero表中number值为20的记录之后的间隙该咋办呢？也就是说给哪条记录加gap锁才能阻止其他事务插入number值在(20, +∞)这个区间的新记录呢？这时候应该想起数据页的两条伪记录了：</p>
<ul>
<li>Infimum记录，表示该页面中最小的记录。</li>
<li>Supremum记录，表示该页面中最大的记录。<br>
为了实现阻止其他事务插入number值在(20, +∞)这个区间的新记录，我们可以给索引中的最后一条记录，也就是number值为20的那条记录所在页面的Supremum记录加上一个gap锁。</li>
</ul>
<p><code>Next-Key Locks</code><br>
有时候我们既想锁住某条记录，又想阻止其他事务在该记录前面的间隙插入新记录，InnoDB就提出了一种称之为Next-Key Locks的锁，官方的类型名称为：LOCK_ORDINARY，我们也可以简称为next-key锁。比方说我们把number值为8的那条记录加一个next-key锁的示意图如下：<br>
<img src="https://q456qq520.github.io/post-images/1677728107529.png" alt="" loading="lazy"></p>
<p><code>Insert Intention Locks</code><br>
一个事务在插入一条记录时需要判断一下插入位置是不是被别的事务加了所谓的gap锁（next-key锁也包含gap锁），如果有的话，插入操作需要等待，直到拥有gap锁的那个事务提交。但是InnoDB规定事务在等待的时候也需要在内存中生成一个锁结构，表明有事务想在某个间隙中插入新记录，但是现在在等待。设计InnoDB的大佬就把这种类型的锁命名为Insert Intention Locks，官方的类型名称为：LOCK_INSERT_INTENTION，我们也可以称为插入意向锁。<br>
<img src="https://q456qq520.github.io/post-images/1677728301191.png" alt="" loading="lazy"><br>
比方说现在T1为number值为8的记录加了一个gap锁，然后T2和T3分别想向hero表中插入number值分别为4、5的两条记录，所以现在为number值为8的记录加的锁的示意图就如下所示：<br>
<img src="https://q456qq520.github.io/post-images/1677728355806.png" alt="" loading="lazy"></p>
<p>从图中可以看到，由于T1持有gap锁，所以T2和T3需要生成一个插入意向锁的锁结构并且处于等待状态。当T1提交后会把它获取到的锁都释放掉，这样T2和T3就能获取到对应的插入意向锁了（本质上就是把插入意向锁对应锁结构的is_waiting属性改为false），T2和T3之间也并不会相互阻塞，它们可以同时获取到number值为8的插入意向锁，然后执行插入操作。事实上插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁（插入意向锁就是这么鸡肋）。</p>
<p><code>隐式锁</code><br>
一个事务在执行INSERT操作时，如果即将插入的间隙已经被其他事务加了gap锁，那么本次INSERT操作会阻塞，并且当前事务会在该间隙上加一个插入意向锁，否则一般情况下INSERT操作是不加锁的。那如果一个事务首先插入了一条记录（此时并没有与该记录关联的锁结构），然后另一个事务：</p>
<ul>
<li>立即使用SELECT ... LOCK IN SHARE MODE语句读取这条事务，也就是在要获取这条记录的S锁，或者使用SELECT ... FOR UPDATE语句读取这条事务或者直接修改这条记录，也就是要获取这条记录的X锁。该咋办？如果允许这种情况的发生，那么可能产生脏读问题。</li>
<li>立即修改这条记录，也就是要获取这条记录的X锁，该咋办？如果允许这种情况的发生，那么可能产生脏写问题。</li>
</ul>
<p>这时候我们前面介绍了很多遍的事务id又要起作用了。<br>
情景一：对于聚簇索引记录来说，有一个trx_id隐藏列，该隐藏列记录着最后改动该记录的事务id。那么如果在当前事务中新插入一条聚簇索引记录后，该记录的trx_id隐藏列代表的的就是当前事务的事务id，如果其他事务此时想对该记录添加S锁或者X锁时，首先会看一下该记录的trx_id隐藏列代表的事务是否是当前的活跃事务，如果是的话，那么就帮助当前事务创建一个X锁（也就是为当前事务创建一个锁结构，is_waiting属性是false），然后自己进入等待状态（也就是为自己也创建一个锁结构，is_waiting属性是true）。</p>
<p>情景二：对于二级索引记录来说，本身并没有trx_id隐藏列，但是在二级索引页面的Page Header部分有一个PAGE_MAX_TRX_ID属性，该属性代表对该页面做改动的最大的事务id，如果PAGE_MAX_TRX_ID属性值小于当前最小的活跃事务id，那么说明对该页面做修改的事务都已经提交了，否则就需要在页面中定位到对应的二级索引记录，然后回表找到它对应的聚簇索引记录，然后再重复情景一的做法。</p>
<p>通过上面的叙述我们知道，一个事务对新插入的记录可以不显式的加锁（生成一个锁结构），但是由于事务id的存在，相当于加了一个隐式锁。别的事务在对这条记录加S锁或者X锁时，由于隐式锁的存在，会先帮助当前事务生成一个锁结构，然后自己再生成一个锁结构后进入等待状态。</p>
<h3 id="256-innodb锁的内存结构">25.6 InnoDB锁的内存结构</h3>
<p>一条记录加锁的本质就是在内存中创建一个锁结构与之关联，那么是不是一个事务对多条记录加锁，就要创建多个锁结构呢？比方说事务T1要执行下面这个语句：</p>
<pre><code class="language-mysql"># 事务T1
SELECT * FROM hero LOCK IN SHARE MODE;
</code></pre>
<p>很显然这条语句需要为hero表中的所有记录进行加锁，那是不是需要为每条记录都生成一个锁结构呢？其实理论上创建多个锁结构没问题，反而更容易理解，但是谁知道你在一个事务里想对多少记录加锁呢，如果一个事务要获取10000条记录的锁，要生成10000个这样的结构也太亏了吧！所以InnoDB，决定在对不同记录加锁时，如果符合下面这些条件：</p>
<ul>
<li>在同一个事务中进行加锁操作</li>
<li>被加锁的记录在同一个页面中</li>
<li>加锁的类型是一样的</li>
<li>等待状态是一样的</li>
</ul>
<p>那么这些记录的锁就可以被放到一个锁结构中。我们还是画个图来看看InnoDB存储引擎中的锁结构具体长什么样吧：<br>
<img src="https://q456qq520.github.io/post-images/1677739806152.png" alt="" loading="lazy"></p>
<ol>
<li>锁所在的事务信息<br>
不论是表锁还是行锁，都是在事务执行过程中生成的，哪个事务生成了这个锁结构，这里就记载着这个事务的信息。</li>
<li>索引信息<br>
对于行锁来说，需要记录一下加锁的记录是属于哪个索引的。</li>
<li>表锁／行锁信息<br>
表锁结构和行锁结构在这个位置的内容是不同的：</li>
</ol>
<ul>
<li>表锁：记载着这是对哪个表加的锁，还有其他的一些信息。</li>
<li>行锁：记载了三个重要的信息：Space ID记录所在表空间。Page Number记录所在页号。n_bits对于行锁来说，一条记录就对应着一个比特位，一个页面中包含很多记录，用不同的比特位来区分到底是哪一条记录加了锁。为此在行锁结构的末尾放置了一堆比特位，这个n_bits属性代表使用了多少比特位。</li>
</ul>
<ol start="4">
<li>type_mode：<br>
这是一个32位的数，被分成了lock_mode、lock_type和rec_lock_type三个部分，如图所示：<br>
<img src="https://q456qq520.github.io/post-images/1677740543847.png" alt="" loading="lazy"></li>
</ol>
<p>锁的模式（lock_mode），占用低4位，可选的值如下：</p>
<ul>
<li>LOCK_IS（十进制的0）：表示共享意向锁，也就是IS锁。</li>
<li>LOCK_IX（十进制的1）：表示独占意向锁，也就是IX锁。</li>
<li>LOCK_S（十进制的2）：表示共享锁，也就是S锁。</li>
<li>LOCK_X（十进制的3）：表示独占锁，也就是X锁。</li>
<li>LOCK_AUTO_INC（十进制的4）：表示AUTO-INC锁。</li>
</ul>
<p>锁的类型（lock_type），占用第5～8位，不过现阶段只有第5位和第6位被使用：</p>
<ul>
<li>LOCK_TABLE（十进制的16），也就是当第5个比特位置为1时，表示表级锁。</li>
<li>LOCK_REC（十进制的32），也就是当第6个比特位置为1时，表示行级锁。</li>
</ul>
<p>行锁的具体类型（rec_lock_type），使用其余的位来表示。只有在lock_type的值为LOCK_REC时，也就是只有在该锁为行级锁时，才会被细分为更多的类型：</p>
<ul>
<li>LOCK_ORDINARY（十进制的0）：表示next-key锁。</li>
<li>LOCK_GAP（十进制的512）：也就是当第10个比特位置为1时，表示gap锁。</li>
<li>LOCK_REC_NOT_GAP（十进制的1024）：也就是当第11个比特位置为1时，表示正经记录锁。</li>
<li>LOCK_INSERT_INTENTION（十进制的2048）：也就是当第12个比特位置为1时，表示插入意向锁。</li>
<li>LOCK_WAIT（十进制的256） ：也就是当第9个比特位置为1时，表示is_waiting为true，也就是当前事务尚未获取到锁，处在等待状态；当这个比特位为0时，表示is_waiting为false，也就是当前事务获取锁成功。</li>
</ul>
<ol start="4">
<li>其他信息：为了更好的管理系统运行过程中生成的各种锁结构而设计了各种哈希表和链表。</li>
<li>一堆比特位<br>
如果是行锁结构的话，在该结构末尾还放置了一堆比特位，比特位的数量是由上面提到的n_bits属性表示的。<br>
InnoDB页面中的每条记录在记录头信息中都包含一个heap_no属性，伪记录Infimum的heap_no值为0，Supremum的heap_no值为1，之后每插入一条记录，heap_no值就增1。锁结构最后的一堆比特位就对应着一个页面中的记录，一个比特位映射一个heap_no。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RocketMq技术内幕笔记（四）]]></title>
        <id>https://q456qq520.github.io/post/rocketmq-ji-zhu-nei-mu-bi-ji-si/</id>
        <link href="https://q456qq520.github.io/post/rocketmq-ji-zhu-nei-mu-bi-ji-si/">
        </link>
        <updated>2023-02-26T09:58:46.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="5-rocketmq-消息消费">5 RocketMQ 消息消费</h2>
<h3 id="51-rocketmq-消息消费概述">5.1 RocketMQ 消息消费概述</h3>
<p>消息消费以组的模式开展， 一个消费组内可以包含多个消费者，每一个消费组可订阅 多个主题，消费组之间有集群模式与广播模式两种消费模式 。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="5-rocketmq-消息消费">5 RocketMQ 消息消费</h2>
<h3 id="51-rocketmq-消息消费概述">5.1 RocketMQ 消息消费概述</h3>
<p>消息消费以组的模式开展， 一个消费组内可以包含多个消费者，每一个消费组可订阅 多个主题，消费组之间有集群模式与广播模式两种消费模式 。</p>
<!-- more -->
<p>集群模式，主题下的同一条 消息只允许被其中一个消费者消费 。<br>
广播模式，主题下的同一条消息将被集群内的所有消 费者消费一次。</p>
<p>消息服务器与消费者之间的消息传送也有两种方式:推模式、拉模式。 所谓的拉模式，是消费端主动发起拉消息请求，而推模式是消息到达消息服务器后，推送给消息消费者。 RocketMQ 消息推模式的实现基于拉模式，在拉模式上包装一层，一个拉取任务完成后开始下一个拉取任务。</p>
<p>集群模式下，多个消费者如何对消息队列进行负载呢?消息队列负载机制遵循一个通用的思想 : <mark>一个消息队列同一时间只允许被一个消费者消费，一个消费者可以消费多个消息队列</mark> 。</p>
<p>RocketMQ 支持局部顺序消息消费，也就是保证同一个消息队列上的消息顺序消费。 不 支持消息全局顺序消费， 如果要实现某一主题的全局顺序消息消费， 可以将该主题的队列数设置为1，牺牲高可用性。</p>
<p>RocketMQ 支持两种消息过滤模式:表达式(TAG、 SQL92)与类过滤模式。</p>
<p>消息拉模式，主要是由客户端手动调用消息拉取API，而消息推模式是消息服务器主 动将消息推送到消息消费端</p>
<h3 id="52-消息消费者初探">5.2 消息消费者初探</h3>
<p>下面分析推模式的消费者 MQPushConsume的主要API， 如下图所示。<br>
<img src="https://q456qq520.github.io/post-images/1677406267122.png" alt="" loading="lazy"></p>
<blockquote>
<p>MQConsume</p>
</blockquote>
<pre><code class="language-java">/**
* 发送消息 ACK确认
* @param msg 消息
* @param delayLevel 消息延迟级别
* @param brokerName 消息服务器名称
*/
void sendMessageBack(final MessageExt msg, final int delayLevel, final String brokerName)
throws RemotingException, MQBrokerException, InterruptedException, MQClientException;

/**
* 获取消费者对主题 topic分配了哪些消息队列
* @param topic 主题名称
*/
Set&lt;MessageQueue&gt; fetchSubscribeMessageQueues(final String topic) throws MQClientException;
</code></pre>
<blockquote>
<p>MQPushConsumer</p>
</blockquote>
<pre><code class="language-java">/**
* 注册并发消息事件监昕器
* @param messageListener
*/
void registerMessageListener(final MessageListenerConcurrently messageListener);

/**
* 注册顺序消费事件监听器
* @param messageListener
*/
void registerMessageListener(final MessageListenerOrderly messageListener);

/**
* 基于主题订阅消息
* @param topic 消息主题
* @param subExpression 消息过滤表达式，TAG或SQL92表达式
*/
void subscribe(final String topic, final String subExpression) ;
/**

* 基于主题订阅消息，消息过滤方式使用类模式
* @param topic 消息主题
* @param fullClassName 过滤类全路径名
* @param filterClassSource 过滤类代码
*/
void subscribe(final String topic, final String fullClassName,final String filterClassSource);

/**
* 取消消息订阅 
* @param topic
*/
void unsubscribe(final String topic);
</code></pre>
<p>DefaultMQPushConsumer (推模式消息消费者)主要属性:</p>
<blockquote>
<p>DefaultMQPushConsumer</p>
</blockquote>
<pre><code class="language-java">//消费者所属组
private String consumerGroup;

//消息消费模式，分为集群模式、广播模式，默认为集群模式
private MessageModel messageModel = MessageModel.CLUSTERING;

//根据消息进度从消息服务器拉取不到消息时重新计算消费策略
//CONSUME_FROM_MIN_OFFSET,从队列当前最小偏移量开始消费
//CONSUME_FROM_MAX_OFFSET,从队列当前最大偏移量开始消费
//CONSUME_FROM_TIMESTAMP,从消费者启动时间戳开始消费
private ConsumeFromWhere consumeFromWhere = ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET;
//集群模式下消息队列负载策略 
private AllocateMessageQueueStrategy allocateMessageQueueStrategy;
 //集群模式下消息队列负载策略
private AllocateMessageQueueStrategy allocateMessageQueueStrategy;

//订阅信息
private Map&lt;String /* topic */, String /* sub expression */&gt; subscription = new HashMap&lt;String, String&gt;();

/**
* 消息业务监听器
*/
private MessageListener messageListener;

/**
* 消息消费进度存储器
*/
private OffsetStore offsetStore;

/**
* 消息者最新线程数
*/
private int consumeThreadMin = 20;

/**
* 消费者最大线程数，由于消费者线程池使用无界队列，
* 故消费者线程个数其实最多只有 consumeThreadMin 个
*/
private int consumeThreadMax = 20;
/**
* 消费者最大线程数，由于消费者线程池使用无界队列，
* 故消费者线程个数其实最多只有 consumeThreadMin 个
*/
private int consumeThreadMax = 20;

/**
* Threshold for dynamic adjustment of the number of thread pool
*/
private long adjustThreadPoolNumsThreshold = 100000;

/**
* 并发消息消费时处理队列最大跨度，默认 2000,
* 表示如果消息处理队列中偏移量最大的消息与偏移量最小的消息的跨度超过 2000则延迟到毫秒后再拉取消息
*/
private int consumeConcurrentlyMaxSpan = 2000;
//默认值1000， 每1000次流控后打印流控日志
private int pullThresholdForQueue = 1000;

/**
* 推模式下拉取任务间隔时间，默认一次拉取任务完成继续拉取。
*/
private long pullInterval = 0;

/**
* 消息并发消费时一次消费消息条数，通俗点说 就是每次传入MessageListtener#consumeMessage中的消息条数
*/
private int consumeMessageBatchMaxSize = 1;

/**
* 每次消息拉取所拉取的条数，默认32条
*/
private int pullBatchSize = 32;
//是否每次拉取消息都更新订阅信息，默认为 false
private boolean postSubscriptionWhenPull = false;
//最大消费重试次数。如果消息消费次数超过 maxReconsumeTimes还未成功，则将该消息转移到一个失败队列,等待被删除
private int maxReconsumeTimes = -1;
/**
* 延迟将该队列的消息提交到消费者线程的等待时间，默认延迟ls
*/
private long suspendCurrentQueueTimeMillis = 1000;
/**
* 消息消费超时时间，默认为15，单位为分钟 
*/
private long consumeTimeout = 15;
</code></pre>
<h3 id="53-消费者启动流程">5.3 消费者启动流程</h3>
<p>消息消费者是如何启动的，分析 DefaultMQPushConsumerlmpl 的start方法，具体代码如下。</p>
<blockquote>
<p>DefaultMQPushConsumelmpl#copySubscription</p>
</blockquote>
<pre><code class="language-java">private void copySubscription() throws MQClientException {
    try {
        Map&lt;String, String&gt; sub = this.defaultMQPushConsumer.getSubscription();
        if (sub != null) {
            for (final Map.Entry&lt;String, String&gt; entry : sub.entrySet()) {
                final String topic = entry.getKey();
                final String subString = entry.getValue();
                SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(topic, subString);
                this.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData);
            }
        }

        if (null == this.messageListenerInner) {
            this.messageListenerInner = this.defaultMQPushConsumer.getMessageListener();
        }

        switch (this.defaultMQPushConsumer.getMessageModel()) {
            case BROADCASTING:
                break;
            case CLUSTERING:
                final String retryTopic = MixAll.getRetryTopic(this.defaultMQPushConsumer.getConsumerGroup());
                SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(retryTopic, SubscriptionData.SUB_ALL);
                this.rebalanceImpl.getSubscriptionInner().put(retryTopic, subscriptionData);
                break;
            default:
                break;
        }
    } catch (Exception e) {
        throw new MQClientException(&quot;subscription exception&quot;, e);
    }
}
</code></pre>
<p>Step1 :构建主题订阅信息 SubscriptionData 并加入到 Rebalancelmpl 的订阅消息中。 订阅关系来源主要有两个。<br>
1)通过调用 DefaultMQPushConsumerlmpl#subscrib巳( String topic, String subExpression) 方法。<br>
2)订阅重试主题消息。从这里可以看出，RocketMQ消息重试是以消费组为单位，而不是主题，消息重试主题名为 %RETRY%+消费组名。消费者在启动的时候会自动订阅该主题，参与该主题的消息队列负载。</p>
<blockquote>
<p>DefaultMQPushConsumelmpl#start</p>
</blockquote>
<pre><code class="language-java">if (this.defaultMQPushConsumer.getMessageModel() == MessageModel.CLUSTERING) {
    this.defaultMQPushConsumer.changeInstanceNameToPID();
}

this.mQClientFactory = MQClientManager.getInstance().getOrCreateMQClientInstance(this.defaultMQPushConsumer, this.rpcHook);

this.rebalanceImpl.setConsumerGroup(this.defaultMQPushConsumer.getConsumerGroup());
this.rebalanceImpl.setMessageModel(this.defaultMQPushConsumer.getMessageModel());
this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultMQPushConsumer.getAllocateMessageQueueStrategy());
this.rebalanceImpl.setmQClientFactory(this.mQClientFactory);

if (this.pullAPIWrapper == null) {
    this.pullAPIWrapper = new PullAPIWrapper(
        mQClientFactory,
        this.defaultMQPushConsumer.getConsumerGroup(), isUnitMode());
}
this.pullAPIWrapper.registerFilterMessageHook(filterMessageHookList);
</code></pre>
<p>Step2:初始化 MQClientlnstance、 Rebalancelmple (消息重新负载实现类)等。</p>
<blockquote>
<p>DefaultMQPushConsumerlmpl#start</p>
</blockquote>
<pre><code class="language-java">if (this.defaultMQPushConsumer.getOffsetStore() != null) {
    this.offsetStore = this.defaultMQPushConsumer.getOffsetStore();
} else {
    switch (this.defaultMQPushConsumer.getMessageModel()) {
        case BROADCASTING:
            this.offsetStore = new LocalFileOffsetStore(this.mQClientFactory, this.defaultMQPushConsumer.getConsumerGroup());
            break;
        case CLUSTERING:
            this.offsetStore = new RemoteBrokerOffsetStore(this.mQClientFactory, this.defaultMQPushConsumer.getConsumerGroup());
            break;
        default:
            break;
    }
    this.defaultMQPushConsumer.setOffsetStore(this.offsetStore);
}
this.offsetStore.load();
</code></pre>
<p>Step3 : 初始化消息进度。如果消息消费是集群模式，那么消息进度保存在 Broker上; 如果是广播模式，那么消息消费进度存储在消费端。</p>
<blockquote>
<p>DefaultMQPushConsumerlmpl#start</p>
</blockquote>
<pre><code class="language-java">if (this.getMessageListenerInner() instanceof MessageListenerOrderly) {
this.consumeOrderly = true;
this.consumeMessageService =
    new ConsumeMessageOrderlyService(this, (MessageListenerOrderly) this.getMessageListenerInner());
//POPTODO reuse Executor ?
this.consumeMessagePopService = new ConsumeMessagePopOrderlyService(this, (MessageListenerOrderly) this.getMessageListenerInner());
} else if (this.getMessageListenerInner() instanceof MessageListenerConcurrently) {
this.consumeOrderly = false;
this.consumeMessageService =
    new ConsumeMessageConcurrentlyService(this, (MessageListenerConcurrently) this.getMessageListenerInner());
//POPTODO reuse Executor ?
this.consumeMessagePopService =
    new ConsumeMessagePopConcurrentlyService(this, (MessageListenerConcurrently) this.getMessageListenerInner());
}

this.consumeMessageService.start();
</code></pre>
<p>Step4 :根据是否是顺序消费，创建消费端消费线程服务。 ConsumeMessageService 主要负责消息消费，内部维护一个线程池。</p>
<blockquote>
<p>DefaultMQPushConsumerlmpl#start</p>
</blockquote>
<pre><code class="language-java">boolean registerOK = mQClientFactory.registerConsumer(this.defaultMQPushConsumer.getConsumerGroup(), this);
if (!registerOK) {
    this.serviceState = ServiceState.CREATE_JUST;
    this.consumeMessageService.shutdown(defaultMQPushConsumer.getAwaitTerminationMillisWhenShutdown());
    throw new MQClientException(&quot;The consumer group[&quot; + this.defaultMQPushConsumer.getConsumerGroup()
        + &quot;] has been created before, specify another name please.&quot; + FAQUrl.suggestTodo(FAQUrl.GROUP_NAME_DUPLICATE_URL),
        null);
}

mQClientFactory.start();
</code></pre>
<p>Step5 :向 MQClientlnstance注册消费者，并启动MQClientlnstance，在一个JVM中的所有消费者、生产者持有同一个 MQClientlnstance, MQClientlnstance 只会启动一次。</p>
<h3 id="54-消息拉取">5.4 消息拉取</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《从根儿上理解MySQL》读书笔记(四)]]></title>
        <id>https://q456qq520.github.io/post/lesslesscong-gen-er-shang-li-jie-mysqlgreatergreater-du-shu-bi-ji-si/</id>
        <link href="https://q456qq520.github.io/post/lesslesscong-gen-er-shang-li-jie-mysqlgreatergreater-du-shu-bi-ji-si/">
        </link>
        <updated>2023-02-20T10:05:28.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="第15章-查询优化的百科全书-explain详解上">第15章 查询优化的百科全书-Explain详解（上）</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="第15章-查询优化的百科全书-explain详解上">第15章 查询优化的百科全书-Explain详解（上）</h2>
<!-- more -->
<p>一条查询语句在经过MySQL查询优化器的各种基于成本和规则的优化会后生成一个所谓的<code>执行计划</code>，这个执行计划展示了接下来具体执行查询的方式，比如多表连接的顺序是什么，对于每个表采用什么访问方法来具体执行查询等等。</p>
<p>mysql为我们提供了<code>EXPLAIN</code>语句来帮助我们查看某个查询语句的具体执行计划</p>
<pre><code class="language-mysql">mysql&gt; EXPLAIN SELECT 1;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+
|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | No tables used |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+
1 row in set, 1 warning (0.01 sec)
</code></pre>
<p>EXPLAIN语句输出的各个列的作用先大致如下：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>在一个大的查询语句中每个SELECT关键字都对应一个唯一的id</td>
</tr>
<tr>
<td>select_type</td>
<td>SELECT关键字对应的那个查询的类型</td>
</tr>
<tr>
<td>table</td>
<td>表名</td>
</tr>
<tr>
<td>partitions</td>
<td>匹配的分区信息</td>
</tr>
<tr>
<td>type</td>
<td>针对单表的访问方法</td>
</tr>
<tr>
<td>possible_keys</td>
<td>可能用到的索引</td>
</tr>
<tr>
<td>key</td>
<td>实际上使用的索引</td>
</tr>
<tr>
<td>key_len</td>
<td>实际使用到的索引长度</td>
</tr>
<tr>
<td>ref</td>
<td>当使用索引列等值查询时，与索引列进行等值匹配的对象信息</td>
</tr>
<tr>
<td>rows</td>
<td>预估的需要读取的记录条数</td>
</tr>
<tr>
<td>filtered</td>
<td>某个表经过搜索条件过滤后剩余记录条数的百分比</td>
</tr>
<tr>
<td>Extra</td>
<td>一些额外的信息</td>
</tr>
</tbody>
</table>
<p>下面我们来构建两个和single_table表构造一模一样的s1、s2表，而且这两个表里边儿有10000条记录，除id列外其余的列都插入随机值。表：</p>
<pre><code class="language-mysql">CREATE TABLE single_table (
    id INT NOT NULL AUTO_INCREMENT,
    key1 VARCHAR(100),
    key2 INT,
    key3 VARCHAR(100),
    key_part1 VARCHAR(100),
    key_part2 VARCHAR(100),
    key_part3 VARCHAR(100),
    common_field VARCHAR(100),
    PRIMARY KEY (id),
    KEY idx_key1 (key1),
    UNIQUE KEY idx_key2 (key2),
    KEY idx_key3 (key3),
    KEY idx_key_part(key_part1, key_part2, key_part3)
) Engine=InnoDB CHARSET=utf8;
</code></pre>
<h3 id="151-执行计划输出中各列详解">15.1 执行计划输出中各列详解</h3>
<h4 id="1511-table">15.1.1 table</h4>
<p>MySQL规定<code>EXPLAIN语句输出的每条记录都对应着某个单表的访问方法，该条记录的table列代表着该表的表名</code>。所以我们看一条比较简单的查询语句：</p>
<pre><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | NULL  |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+
1 row in set, 1 warning (0.00 sec)
</code></pre>
<p>这个查询语句只涉及对s1表的单表查询，所以EXPLAIN输出中只有一条记录，其中的table列的值是s1，表明这条记录是用来说明对s1表的单表访问方法的。</p>
<p>下面我们看一下一个连接查询的执行计划：</p>
<pre><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                 |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------------+
|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | NULL                                  |
|  1 | SIMPLE      | s2    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9954 |   100.00 | Using join buffer (Block Nested Loop) |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------------+
2 rows in set, 1 warning (0.01 sec)
</code></pre>
<h4 id="1512-id">15.1.2 id</h4>
<p>我们知道我们写的查询语句一般都以SELECT关键字开头，比较简单的查询语句里只有一个SELECT关键字，比如下面这个查询语句：</p>
<pre><code class="language-mysql">SELECT * FROM s1 WHERE key1 = 'a';
</code></pre>
<p>稍微复杂一点的连接查询中也只有一个SELECT关键字，比如：</p>
<pre><code class="language-mysql">SELECT * FROM s1 INNER JOIN s2 ON s1.key1 = s2.key1 WHERE s1.common_field = 'a';
</code></pre>
<p>但是下面两种情况下在一条查询语句中会出现多个SELECT关键字：</p>
<pre><code class="language-mysql">SELECT * FROM s1  WHERE key1 IN (SELECT * FROM s2);

SELECT * FROM s1  UNION SELECT * FROM s2;
</code></pre>
<p>查询语句中每出现一个SELECT关键字，MySQL就会为它分配一个唯一的id值。这个id值就是EXPLAIN语句的第一个列。</p>
<p>对于连接查询来说，一个SELECT关键字后边的FROM子句中可以跟随多个表，所以在连接查询的执行计划中，<code>每个表都会对应一条记录，但是这些记录的id值都是相同的</code>，比如：</p>
<pre><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                 |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------------+
|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | NULL                                  |
|  1 | SIMPLE      | s2    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9954 |   100.00 | Using join buffer (Block Nested Loop) |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------------+
2 rows in set, 1 warning (0.01 sec)
</code></pre>
<p>上述连接查询中参与连接的s1和s2表分别对应一条记录，但是这两条记录对应的id值都是1。<code>在连接查询的执行计划中，每个表都会对应一条记录，这些记录的id列的值是相同的，出现在前面的表表示驱动表，出现在后边的表表示被驱动表</code>。所以从上面的EXPLAIN输出中我们可以看出，查询优化器准备让s1表作为驱动表，让s2表作为被驱动表来执行查询。</p>
<p>对于包含子查询的查询语句来说，就可能涉及多个SELECT关键字，所以在包含子查询的查询语句的执行计划中，每个SELECT关键字都会对应一个唯一的id值，比如这样：</p>
<pre><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key1 FROM s2) OR key3 = 'a';
+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+
| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref  | rows | filtered | Extra       |
+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+
|  1 | PRIMARY     | s1    | NULL       | ALL   | idx_key3      | NULL     | NULL    | NULL | 9688 |   100.00 | Using where |
|  2 | SUBQUERY    | s2    | NULL       | index | idx_key1      | idx_key1 | 303     | NULL | 9954 |   100.00 | Using index |
+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+
2 rows in set, 1 warning (0.02 sec)
</code></pre>
<p>从输出结果中我们可以看到，s1表在外层查询中，外层查询有一个独立的SELECT关键字，所以第一条记录的id值就是1，s2表在子查询中，子查询有一个独立的SELECT关键字，所以第二条记录的id值就是2。特别注意的是<code>查询优化器可能对涉及子查询的查询语句进行重写，从而转换为连接查询</code>。所以如果我们想知道查询优化器对某个包含子查询的语句是否进行了重写，直接查看执行计划就好了，比如说：</p>
<pre><code class="language-java">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key3 FROM s2 WHERE common_field = 'a');
+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+------------------------------+
| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref               | rows | filtered | Extra                        |
+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+------------------------------+
|  1 | SIMPLE      | s2    | NULL       | ALL  | idx_key3      | NULL     | NULL    | NULL              | 9954 |    10.00 | Using where; Start temporary |
|  1 | SIMPLE      | s1    | NULL       | ref  | idx_key1      | idx_key1 | 303     | xiaohaizi.s2.key3 |    1 |   100.00 | End temporary                |
+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+------------------------------+
2 rows in set, 1 warning (0.00 sec)
</code></pre>
<p>虽然我们的查询语句是一个子查询，但是执行计划中s1和s2表对应的记录的id值全部是1，这就表明了查询优化器将子查询转换为了连接查询。</p>
<p>对于包含UNION子句的查询语句来说，每个SELECT关键字对应一个id值也是没错的，不过还是有点儿特别的东西，比方说下面这个查询：</p>
<pre><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1  UNION SELECT * FROM s2;
+----+--------------+------------+------------+------+---------------+------+---------+------+------+----------+-----------------+
| id | select_type  | table      | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra           |
+----+--------------+------------+------------+------+---------------+------+---------+------+------+----------+-----------------+
|  1 | PRIMARY      | s1         | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | NULL            |
|  2 | UNION        | s2         | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9954 |   100.00 | NULL            |
| NULL | UNION RESULT | &lt;union1,2&gt; | NULL       | ALL  | NULL          | NULL | NULL    | NULL | NULL |     NULL | Using temporary |
+----+--------------+------------+------------+------+---------------+------+---------+------+------+----------+-----------------+
3 rows in set, 1 warning (0.00 sec)
</code></pre>
<p>UNION子句会把多个查询的结果集合并起来并对结果集中的记录进行去重，怎么去重呢？MySQL使用的是内部的临时表。正如上面的查询计划中所示，UNION子句是为了把id为1的查询和id为2的查询的结果集合并起来并去重，所以在内部创建了一个名为<code>&lt;union1, 2&gt;</code>的临时表（就是执行计划第三条记录的table列的名称），id为NULL表明这个临时表是为了合并两个查询的结果集而创建的。</p>
<p>跟UNION对比起来，UNION ALL就不需要为最终的结果集进行去重，它只是单纯的把多个查询的结果集中的记录合并成一个并返回给用户，所以也就不需要使用临时表。</p>
<h4 id="1513-select_type">15.1.3 select_type</h4>
<p>MySQL的为每一个SELECT关键字代表的小查询都定义了一个称之为select_type的属性，意思是我们只要知道了某个小查询的select_type属性，就知道了这个小查询在整个大查询中扮演了一个什么角色。</p>
<p><code>SIMPLE</code><br>
查询语句中不包含UNION或者子查询的查询都算作是SIMPLE类型，连接查询也算是SIMPLE类型。</p>
<p><code>PRIMARY</code><br>
对于包含UNION、UNION ALL或者子查询的大查询来说，它是由几个小查询组成的，其中最左边的那个查询的select_type值就是PRIMARY。</p>
<p><code>UNION</code><br>
对于包含UNION或者UNION ALL的大查询来说，它是由几个小查询组成的，其中除了最左边的那个小查询以外，其余的小查询的select_type值就是UNION。</p>
<p><code>UNION RESULT</code><br>
MySQL选择使用临时表来完成UNION查询的去重工作，针对该临时表的查询的select_type就是UNION RESULT，例子上面有，就不赘述了。</p>
<p><code>SUBQUERY</code><br>
如果包含子查询的查询语句不能够转为对应的semi-join的形式，并且该子查询是不相关子查询，并且查询优化器决定采用将该子查询物化的方案来执行该子查询时，该子查询的第一个SELECT关键字代表的那个查询的select_type就是SUBQUERY。</p>
<blockquote>
<p>由于select_type为SUBQUERY的子查询由于会被物化，所以只需要执行一遍。</p>
</blockquote>
<p><code>DEPENDENT SUBQUERY</code><br>
如果包含子查询的查询语句不能够转为对应的semi-join的形式，并且该子查询是相关子查询，则该子查询的第一个SELECT关键字代表的那个查询的select_type就是DEPENDENT SUBQUERY。</p>
<blockquote>
<p>select_type为DEPENDENT SUBQUERY的查询可能会被执行多次。</p>
</blockquote>
<p><code>DEPENDENT UNION</code><br>
在包含UNION或者UNION ALL的大查询中，如果各个小查询都依赖于外层查询的话，那除了最左边的那个小查询之外，其余的小查询的select_type的值就是DEPENDENT UNION。</p>
<p><code>DERIVED</code><br>
对于采用物化的方式执行的包含派生表的查询，该派生表对应的子查询的select_type就是DERIVED。</p>
<pre><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM (SELECT key1, count(*) as c FROM s1 GROUP BY key1) AS derived_s1 where c &gt; 1;
+----+-------------+------------+------------+-------+---------------+----------+---------+------+------+----------+-------------+
| id | select_type | table      | partitions | type  | possible_keys | key      | key_len | ref  | rows | filtered | Extra       |
+----+-------------+------------+------------+-------+---------------+----------+---------+------+------+----------+-------------+
|  1 | PRIMARY     | &lt;derived2&gt; | NULL       | ALL   | NULL          | NULL     | NULL    | NULL | 9688 |    33.33 | Using where |
|  2 | DERIVED     | s1         | NULL       | index | idx_key1      | idx_key1 | 303     | NULL | 9688 |   100.00 | Using index |
+----+-------------+------------+------------+-------+---------------+----------+---------+------+------+----------+-------------+
2 rows in set, 1 warning (0.00 sec)
</code></pre>
<p><code>MATERIALIZED</code><br>
当查询优化器在执行包含子查询的语句时，选择将子查询物化之后与外层查询进行连接查询时，该子查询对应的select_type属性就是MATERIALIZED。</p>
<p><code>UNCACHEABLE SUBQUERY</code><br>
不常用，就不多介绍了。</p>
<p><code>UNCACHEABLE UNION</code><br>
不常用，就不多介绍了。</p>
<h4 id="1514-partitions">15.1.4 partitions</h4>
<p>一般情况下我们的查询语句的执行计划的partitions列的值都是NULL。</p>
<h4 id="1515-type">15.1.5 type</h4>
<p>执行计划的一条记录就代表着MySQL对某个表的执行查询时的访问方法，其中的type列就表明了这个访问方法是什么。</p>
<pre><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 = 'a';
+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref   | rows | filtered | Extra |
+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------+
|  1 | SIMPLE      | s1    | NULL       | ref  | idx_key1      | idx_key1 | 303     | const |    8 |   100.00 | NULL  |
+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------+
1 row in set, 1 warning (0.04 sec)
</code></pre>
<p>可以看到type列的值是ref，表明MySQL即将使用ref访问方法来执行对s1表的查询。使用InnoDB存储引擎的表进行单表访问的一些访问方法如下：system，const，eq_ref，ref，fulltext，ref_or_null，index_merge，unique_subquery，index_subquery，range，index，ALL。</p>
<p><code>system</code><br>
当表中只有一条记录并且该表使用的存储引擎的统计数据是精确的，比如MyISAM、Memory，那么对该表的访问方法就是system。</p>
<p><code>const</code><br>
当我们根据主键或者唯一二级索引列与常数进行等值匹配时，对单表的访问方法就是const。</p>
<p><code>eq_ref</code><br>
在连接查询时，如果被驱动表是通过主键或者唯一二级索引列等值匹配的方式进行访问的（如果该主键或者唯一二级索引是联合索引的话，所有的索引列都必须进行等值比较），则对该被驱动表的访问方法就是eq_ref。</p>
<pre><code class="language-mysql">EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.id = s2.id;
</code></pre>
<p><code>ref</code><br>
当通过普通的二级索引列与常量进行等值匹配时来查询某个表，那么对该表的访问方法就可能是ref。</p>
<p><code>fulltext</code><br>
全文索引</p>
<p><code>ref_or_null</code><br>
当对普通二级索引进行等值匹配查询，该索引列的值也可以是NULL值时，那么对该表的访问方法就可能是ref_or_null。</p>
<p><code>index_merge</code><br>
一般情况下对于某个表的查询只能使用到一个索引，但在某些场景下可以使用Intersection、Union、Sort-Union这三种索引合并的方式来执行查询，那么对该表的访问方法就可能是index_merge。</p>
<p><code>unique_subquery</code><br>
类似于两表连接中被驱动表的eq_ref访问方法，unique_subquery是针对在一些包含IN子查询的查询语句中，如果查询优化器决定将IN子查询转换为EXISTS子查询，而且子查询可以使用到主键进行等值匹配的话，那么该子查询执行计划的type列的值就是unique_subquery。</p>
<p><code>index_subquery</code><br>
index_subquery与unique_subquery类似，只不过访问子查询中的表时使用的是普通的索引。</p>
<p><code>range</code><br>
如果使用索引获取某些范围区间的记录，那么就可能使用到range访问方法。</p>
<p><code>index</code><br>
当我们可以使用索引覆盖，但需要扫描全部的索引记录时，该表的访问方法就是index。</p>
<p><code>ALL</code><br>
全表扫描</p>
<h4 id="1516-possible_keys和key">15.1.6 possible_keys和key</h4>
<p>在EXPLAIN语句输出的执行计划中，possible_keys列表示在某个查询语句中，对某个表执行单表查询时可能用到的索引有哪些，key列表示实际用到的索引有哪些。</p>
<p>不过有一点比较特别，就是在使用<code>index</code>访问方法来查询某个表时，possible_keys列是空的，而key列展示的是实际使用到的索引。</p>
<p>另外需要注意的一点是，p<code>ossible_keys列中的值并不是越多越好，可能使用的索引越多，查询优化器计算查询成本时就得花费更长时间，所以如果可以的话，尽量删除那些用不到的索引</code>。</p>
<h4 id="1517-key_len">15.1.7 key_len</h4>
<p>key_len列表示当优化器决定使用某个索引执行查询时，该索引记录的最大长度，它是由这三个部分构成的：</p>
<ol>
<li>对于使用固定长度类型的索引列来说，它实际占用的存储空间的最大长度就是该固定值，对于指定字符集的变长类型的索引列来说，比如某个索引列的类型是VARCHAR(100)，使用的字符集是utf8，那么该列实际占用的最大存储空间就是100 × 3 = 300个字节。</li>
<li>如果该索引列可以存储NULL值，则key_len比不可以存储NULL值时多1个字节。</li>
<li>对于变长字段来说，都会有2个字节的空间来存储该变长列的实际长度。</li>
</ol>
<h4 id="1518-ref">15.1.8 ref</h4>
<p>当使用索引列等值匹配的条件去执行查询时，也就是在访问方法是const、eq_ref、ref、ref_or_null、unique_subquery、index_subquery其中之一时，ref列展示的就是与索引列作等值匹配的东东是什么，比如只是一个常数或者是某个列。</p>
<pre><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 = 'a';
+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------+
| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref   | rows | filtered | Extra |
+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------+
|  1 | SIMPLE      | s1    | NULL       | ref  | idx_key1      | idx_key1 | 303     | const |    8 |   100.00 | NULL  |
+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------+
1 row in set, 1 warning (0.01 sec)
</code></pre>
<h4 id="1519-rows">15.1.9 rows</h4>
<p>如果查询优化器决定使用全表扫描的方式对某个表执行查询时，执行计划的rows列就代表预计需要扫描的行数，如果使用索引来执行查询时，执行计划的rows列就代表预计扫描的索引记录行数。</p>
<h4 id="15110-filtered">15.1.10 filtered</h4>
<p>分析连接查询的成本时提出过一个<code>condition filtering</code>的概念，就是MySQL在计算驱动表扇出时采用的一个策略：</p>
<ul>
<li>如果使用的是全表扫描的方式执行的单表查询，那么计算驱动表扇出时需要估计出满足搜索条件的记录到底有多少条。</li>
<li>如果使用的是索引执行的单表扫描，那么计算驱动表扇出的时候需要估计出满足除使用到对应索引的搜索条件外的其他搜索条件的记录有多少条。</li>
</ul>
<pre><code>mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &gt; 'z' AND common_field = 'a';
+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+------------------------------------+
| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref  | rows | filtered | Extra                              |
+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+------------------------------------+
|  1 | SIMPLE      | s1    | NULL       | range | idx_key1      | idx_key1 | 303     | NULL |  266 |    10.00 | Using index condition; Using where |
+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+------------------------------------+
1 row in set, 1 warning (0.00 sec)
</code></pre>
<p>从执行计划的key列中可以看出来，该查询使用idx_key1索引来执行查询，从rows列可以看出满足key1 &gt; 'z'的记录有266条。执行计划的filtered列就代表查询优化器预测在这266条记录中，有多少条记录满足其余的搜索条件，也就是common_field = 'a'这个条件的百分比。此处filtered列的值是10.00，说明查询优化器预测在266条记录中有10.00%的记录满足common_field = 'a'这个条件。</p>
<p>对于单表查询来说，这个filtered列的值没什么意义，我们更关注在连接查询中驱动表对应的执行计划记录的filtered值，比方说下面这个查询：</p>
<pre><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.key1 = s2.key1 WHERE s1.common_field = 'a';
+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+
| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref               | rows | filtered | Extra       |
+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+
|  1 | SIMPLE      | s1    | NULL       | ALL  | idx_key1      | NULL     | NULL    | NULL              | 9688 |    10.00 | Using where |
|  1 | SIMPLE      | s2    | NULL       | ref  | idx_key1      | idx_key1 | 303     | xiaohaizi.s1.key1 |    1 |   100.00 | NULL        |
+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+
2 rows in set, 1 warning (0.00 sec)
</code></pre>
<p>从执行计划中可以看出来，查询优化器打算把s1当作驱动表，s2当作被驱动表。我们可以看到驱动表s1表的执行计划的rows列为9688， filtered列为10.00，这意味着驱动表s1的扇出值就是9688 × 10.00% = 968.8，这说明还要对被驱动表执行大约968次查询。</p>
<h2 id="第16章-查询优化的百科全书-explain详解下">第16章 查询优化的百科全书-Explain详解（下）</h2>
<h3 id="161-extra">16.1 Extra</h3>
<p>Extra列是用来说明一些额外信息的，我们可以通过这些额外信息来更准确的理解MySQL到底将如何执行给定的查询语句。</p>
<p><code>No tables used</code><br>
当查询语句的没有FROM子句时将会提示该额外信息。</p>
<p><code>Impossible WHERE</code><br>
查询语句的WHERE子句永远为FALSE时将会提示该额外信息。</p>
<blockquote>
<p>EXPLAIN SELECT * FROM s1 WHERE 1 != 1;</p>
</blockquote>
<p><code>No matching min/max row</code><br>
当查询列表处有MIN或者MAX聚集函数，但是并没有符合WHERE子句中的搜索条件的记录时，将会提示该额外信息。</p>
<p><code>Using index</code><br>
当我们的查询列表以及搜索条件中只包含属于某个索引的列，也就是在可以使用索引覆盖的情况下，在Extra列将会提示该额外信息。</p>
<p><code>Using index condition</code><br>
有些搜索条件中虽然出现了索引列，但却不能使用到索引。</p>
<p><code>Using where</code><br>
当我们使用全表扫描来执行对某个表的查询，并且该语句的WHERE子句中有针对该表的搜索条件时，在Extra列中会提示上述额外信息。</p>
<p>当使用索引访问来执行对某个表的查询，并且该语句的WHERE子句中有除了该索引包含的列之外的其他搜索条件时，在Extra列中也会提示上述额外信息。</p>
<p><code>Using join buffer (Block Nested Loop)</code><br>
在连接查询执行过程中，当被驱动表不能有效的利用索引加快访问速度，MySQL一般会为其分配一块名叫join buffer的内存块来加快查询速度，也就是我们所讲的<code>基于块的嵌套循环算法</code>。</p>
<p><code>Not exists</code><br>
当我们使用左（外）连接时，如果WHERE子句中包含要求被驱动表的某个列等于NULL值的搜索条件，而且那个列又是不允许存储NULL值的，那么在该表的执行计划的Extra列就会提示Not exists额外信息。</p>
<p><code>Using intersect(...)、Using union(...)和Using sort_union(...)</code><br>
如果执行计划的Extra列出现了Using intersect(...)提示，说明准备使用Intersect索引合并的方式执行查询，括号中的...表示需要进行索引合并的索引名称；如果出现了Using union(...)提示，说明准备使用Union索引合并的方式执行查询；出现了Using sort_union(...)提示，说明准备使用Sort-Union索引合并的方式执行查询。</p>
<p><code>Zero limit</code><br>
当我们的LIMIT子句的参数为0时，表示压根儿不打算从表中读出任何记录，将会提示该额外信息。</p>
<p><code>Using filesort</code><br>
有一些情况下对结果集中的记录进行排序是可以使用到索引的。但是很多情况下排序操作无法使用到索引，只能在内存中（记录较少的时候）或者磁盘中（记录较多的时候）进行排序，MySQL把这种在内存中或者磁盘上进行排序的方式统称为<code>文件排序（英文名：filesort）</code>。如果某个查询需要使用文件排序的方式执行查询，就会在执行计划的Extra列中显示Using filesort提示。</p>
<p>如果查询中需要使用filesort的方式进行排序的记录非常多，那么这个过程是很耗费性能的，我们最好想办法将使用文件排序的执行方式改为使用索引进行排序。</p>
<p><code>Using temporary</code><br>
在许多查询的执行过程中，MySQL可能会借助临时表来完成一些功能，比如去重、排序之类的，比如我们在执行许多包含DISTINCT、GROUP BY、UNION等子句的查询过程中，如果不能有效利用索引来完成查询，MySQL很有可能寻求通过建立内部的临时表来执行查询。如果查询中使用到了内部的临时表，在执行计划的Extra列将会显示Using temporary提示。</p>
<p>执行计划中出现Using temporary并不是一个好的征兆，因为建立与维护临时表要付出很大成本的，所以我们最好能使用索引来替代掉使用临时表。</p>
<p><code>Start temporary, End temporary</code><br>
查询优化器会优先尝试将IN子查询转换成semi-join，而semi-join又有好多种执行策略，当执行策略为DuplicateWeedout时，也就是通过建立临时表来实现为外层查询中的记录进行去重操作时，驱动表查询执行计划的Extra列将显示Start temporary提示，被驱动表查询执行计划的Extra列将显示End temporary提示。</p>
<p><code>LooseScan</code><br>
在将In子查询转为semi-join时，如果采用的是LooseScan执行策略，则在驱动表执行计划的Extra列就是显示LooseScan提示。</p>
<h3 id="162-json格式的执行计划">16.2 Json格式的执行计划</h3>
<p>EXPLAIN语句输出中缺少了一个衡量执行计划好坏的重要属性 —— 成本。不过MySQL提供了一种查看某个执行计划花费的成本的方式：</p>
<p>在EXPLAIN单词和真正的查询语句中间加上<mark>FORMAT=JSON</mark>。</p>
<h3 id="163-extented-explain">16.3 Extented EXPLAIN</h3>
<p>在我们使用EXPLAIN语句查看了某个查询的执行计划后，紧接着还可以使用SHOW WARNINGS语句查看与这个查询的执行计划有关的一些扩展信息。</p>
<pre><code class="language-mysql">mysql&gt; EXPLAIN SELECT s1.key1, s2.key1 FROM s1 LEFT JOIN s2 ON s1.key1 = s2.key1 WHERE s2.common_field IS NOT NULL;
+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+
| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref               | rows | filtered | Extra       |
+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+
|  1 | SIMPLE      | s2    | NULL       | ALL  | idx_key1      | NULL     | NULL    | NULL              | 9954 |    90.00 | Using where |
|  1 | SIMPLE      | s1    | NULL       | ref  | idx_key1      | idx_key1 | 303     | xiaohaizi.s2.key1 |    1 |   100.00 | Using index |
+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+
2 rows in set, 1 warning (0.00 sec)

mysql&gt; SHOW WARNINGS\G
*************************** 1. row ***************************
  Level: Note
   Code: 1003
Message: /* select#1 */ select `xiaohaizi`.`s1`.`key1` AS `key1`,`xiaohaizi`.`s2`.`key1` AS `key1` from `xiaohaizi`.`s1` join `xiaohaizi`.`s2` where ((`xiaohaizi`.`s1`.`key1` = `xiaohaizi`.`s2`.`key1`) and (`xiaohaizi`.`s2`.`common_field` is not null))
1 row in set (0.00 sec)
</code></pre>
<p>可以看到SHOW WARNINGS展示出来的信息有三个字段，分别是Level、Code、Message。我们最常见的就是Code为1003的信息，当Code值为1003时，Message字段展示的信息类似于查询优化器将我们的查询语句重写后的语句。比如我们上面的查询本来是一个左（外）连接查询，但是有一个s2.common_field IS NOT NULL的条件，着就会导致查询优化器把左（外）连接查询优化为内连接查询，从SHOW WARNINGS的Message字段也可以看出来，原本的LEFT JOIN已经变成了JOIN。</p>
<h2 id="第17章-神兵利器-optimizer-trace表的神器功效">第17章 神兵利器-optimizer trace表的神器功效</h2>
<p>在MySQL 5.6以及之后的版本中，MySQL提出了一个optimizer trace的功能，这个功能可以让我们方便的查看优化器生成执行计划的整个过程，这个功能的开启与关闭由系统变量optimizer_trace决定，我们看一下：</p>
<pre><code class="language-mysql">mysql&gt; SHOW VARIABLES LIKE 'optimizer_trace';
+-----------------+--------------------------+
| Variable_name   | Value                    |
+-----------------+--------------------------+
| optimizer_trace | enabled=off,one_line=off |
+-----------------+--------------------------+
1 row in set (0.02 sec)
</code></pre>
<p>可以看到enabled值为off，表明这个功能默认是关闭的。</p>
<blockquote>
<p>one_line的值是控制输出格式的，如果为on那么所有输出都将在一行中展示，不适合人阅读，所以我们就保持其默认值为off吧。</p>
</blockquote>
<pre><code class="language-mysql">mysql&gt; SET optimizer_trace=&quot;enabled=on&quot;;
Query OK, 0 rows affected (0.00 sec)
</code></pre>
<p>当该查询语句执行完成后，就可以到information_schema数据库下的OPTIMIZER_TRACE表中查看完整的优化过程。这个OPTIMIZER_TRACE表有4个列，分别是：</p>
<ol>
<li>QUERY：表示我们的查询语句。</li>
<li>TRACE：表示优化过程的JSON格式文本。</li>
<li>MISSING_BYTES_BEYOND_MAX_MEM_SIZE：由于优化过程可能会输出很多，如果超过某个限制时，多余的文本将不会被显示，这个字段展示了被忽略的文本字节数。</li>
<li>INSUFFICIENT_PRIVILEGES：表示是否没有权限查看优化过程，默认值是0，只有某些特殊情况下才会是1，我们暂时不关心这个字段的值。</li>
</ol>
<p>优化器执行过程大致分为了三个阶段：</p>
<ul>
<li>prepare阶段</li>
<li>optimize阶段</li>
<li>execute阶段</li>
</ul>
<p>我们所说的基于成本的优化主要集中在optimize阶段，对于单表查询来说，我们主要关注optimize阶段的&quot;rows_estimation&quot;这个过程，这个过程深入分析了对单表查询的各种执行方案的成本；对于多表连接查询来说，我们更多需要关注&quot;considered_execution_plans&quot;这个过程，这个过程里会写明各种不同的连接方式所对应的成本。反正优化器最终会选择成本最低的那种方案来作为最终的执行计划，也就是我们使用EXPLAIN语句所展现出的那种方案。</p>
<h2 id="第18章-调节磁盘和cpu的矛盾-innodb的buffer-pool">第18章 调节磁盘和CPU的矛盾-InnoDB的Buffer Pool</h2>
<p>InnoDB存储引擎在处理客户端的请求时，当需要访问某个页的数据时，就会把完整的页的数据全部加载到内存中，也就是说即使我们<code>只需要访问一个页的一条记录，那也需要先把整个页的数据加载到内存中</code>。将整个页加载到内存中后就可以进行读写访问了，在进行完读写访问之后并不着急把该页对应的内存空间释放掉，而是将其缓存起来，这样将来有请求再次访问该页面时，就可以省去磁盘IO的开销了。</p>
<h3 id="181-innodb的buffer-pool">18.1 InnoDB的Buffer Pool</h3>
<h4 id="1811-buffer-pool">18.1.1 Buffer Pool</h4>
<p>在MySQL服务器启动的时候就向操作系统申请了一片连续的内存，他们给这片内存起了个名，叫做<mark>Buffer Pool（中文名是缓冲池）</mark>。默认情况下Buffer Pool只有128M。可以在启动服务器的时候配置innodb_buffer_pool_size参数的值。</p>
<h4 id="1812-buffer-pool内部组成">18.1.2 Buffer Pool内部组成</h4>
<p>Buffer Pool中默认的缓存页大小和在磁盘上默认的页大小是一样的，都是16KB。InnoDB为每一个缓存页都创建了一些所谓的控制信息，这些控制信息包括该页所属的表空间编号、页号、缓存页在Buffer Pool中的地址、链表节点信息、一些锁信息以及LSN信息等。</p>
<p>每个缓存页对应的控制信息占用的内存大小是相同的，我们就把每个页对应的控制信息占用的一块内存称为一个控制块吧，<mark>控制块和缓存页是一一对应的，它们都被存放到 Buffer Pool 中，其中控制块被存放到 Buffer Pool 的前面，缓存页被存放到 Buffer Pool 后边</mark>。</p>
<figure data-type="image" tabindex="1"><img src="https://q456qq520.github.io/post-images/1677054865529.png" alt="" loading="lazy"></figure>
<h4 id="1813-free链表的管理">18.1.3 free链表的管理</h4>
<p>随着程序的运行，会不断的有磁盘上的页被缓存到Buffer Pool中。那么问题来了，从磁盘上读取一个页到Buffer Pool中的时候该放到哪个缓存页的位置呢？或者说怎么区分Buffer Pool中哪些缓存页是空闲的，哪些已经被使用了呢？</p>
<p>我们最好在某个地方记录一下Buffer Pool中哪些缓存页是可用的，这个时候缓存页对应的控制块就派上大用场了，我们可以把所有空闲的缓存页对应的控制块作为一个节点放到一个链表中，这个链表也可以被称作<mark>free链表（或者说空闲链表）</mark>。刚刚完成初始化的Buffer Pool中所有的缓存页都是空闲的，所以每一个缓存页对应的控制块都会被加入到free链表中，假设该Buffer Pool中可容纳的缓存页数量为n，那增加了free链表的效果图就是这样的：</p>
<figure data-type="image" tabindex="2"><img src="https://q456qq520.github.io/post-images/1677054988757.png" alt="" loading="lazy"></figure>
<p>链表的基节点占用的内存空间并不包含在为Buffer Pool申请的一大片连续内存空间之内，而是单独申请的一块内存空间。</p>
<h4 id="1814-缓存页的哈希处理">18.1.4 缓存页的哈希处理</h4>
<p>当我们需要访问某个页中的数据时，就会把该页从磁盘加载到Buffer Pool中，如果该页已经在Buffer Pool中的话直接使用就可以了。那么问题也就来了，我们怎么知道该页在不在Buffer Pool中呢？</p>
<p>所以我们可以用表空间号 + 页号作为key，缓存页作为value创建一个哈希表，在需要访问某个页的数据时，先从哈希表中根据表空间号 + 页号看看有没有对应的缓存页，如果有，直接使用该缓存页就好，如果没有，那就从free链表中选一个空闲的缓存页，然后把磁盘中对应的页加载到该缓存页的位置。</p>
<h4 id="1815-flush链表的管理">18.1.5 flush链表的管理</h4>
<p>如果我们修改了Buffer Pool中某个缓存页的数据，那它就和磁盘上的页不一致了，这样的缓存页也被称为<mark>脏页（英文名：dirty page）</mark>。</p>
<p>所以每次修改缓存页后，我们并不着急立即把修改同步到磁盘上，而是在未来的某个时间点进行同步，但是如果不立即同步到磁盘的话，那之后再同步的时候我们怎么知道Buffer Pool中哪些页是脏页，哪些页从来没被修改过呢？</p>
<p>所以，我们不得不再创建一个存储脏页的链表，凡是修改过的缓存页对应的控制块都会作为一个节点加入到一个链表中，因为这个链表节点对应的缓存页都是需要被刷新到磁盘上的，所以也叫flush链表。链表的构造和free链表差不多，假设某个时间点Buffer Pool中的脏页数量为n，那么对应的flush链表就长这样：<br>
<img src="https://q456qq520.github.io/post-images/1677058320210.png" alt="" loading="lazy"></p>
<h4 id="1816-lru链表的管理">18.1.6 LRU链表的管理</h4>
<h5 id="缓存不够的窘境">缓存不够的窘境</h5>
<p>Buffer Pool对应的内存大小毕竟是有限的，如果需要缓存的页占用的内存大小超过了Buffer Pool大小，也就是free链表中已经没有多余的空闲缓存页的时候就需要把某些旧的缓存页从Buffer Pool中移除，然后再把新的页放进来， 那么问题来了，移除哪些缓存页呢？</p>
<h5 id="简单的lru链表">简单的LRU链表</h5>
<p>当Buffer Pool中不再有空闲的缓存页时，就需要淘汰掉部分最近很少使用的缓存页。</p>
<p>不过，我们怎么知道哪些缓存页最近频繁使用，我们可以再创建一个链表，由于这个链表是为了按照<mark>最近最少使用</mark>的原则去淘汰缓存页的，所以这个链表可以被称为<mark>LRU链表（LRU的英文全称：Least Recently Used）</mark>。当我们需要访问某个页时，可以这样处理LRU链表：</p>
<ol>
<li>如果该页不在Buffer Pool中，在把该页从磁盘加载到Buffer Pool中的缓存页时，就把该缓存页对应的控制块作为节点塞到链表的头部。</li>
<li>如果该页已经缓存在Buffer Pool中，则直接把该页对应的控制块移动到LRU链表的头部。</li>
</ol>
<p>也就是说：只要我们使用到某个缓存页，就把该缓存页调整到LRU链表的头部，这样LRU链表尾部就是最近最少使用的缓存页喽～ 所以当Buffer Pool中的空闲缓存页使用完时，到LRU链表的尾部找些缓存页淘汰。</p>
<h5 id="划分区域的lru链表">划分区域的LRU链表</h5>
<p>上面的这个简单的LRU链表用了没多长时间就发现问题了，因为存在这两种比较尴尬的情况：</p>
<p>情况一：InnoDB提供了一个看起来比较贴心的服务——<code>预读（英文名：read ahead）</code>。所谓预读，就是InnoDB认为执行当前的请求可能之后会读取某些页面，就预先把它们加载到Buffer Pool中。根据触发方式的不同，预读又可以细分为下面两种：</p>
<ul>
<li>
<p>线性预读<br>
InnoDB提供了一个系统变量innodb_read_ahead_threshold，如果顺序访问了某个区（extent）的页面超过这个系统变量的值，就会触发一次异步读取下一个区中全部的页面到Buffer Pool的请求，注意异步读取意味着从磁盘中加载这些被预读的页面并不会影响到当前工作线程的正常执行。这个innodb_read_ahead_threshold系统变量的值默认是56，我们可以在服务器启动时通过启动参数或者服务器运行过程中直接调整该系统变量的值，不过它是一个全局变量，需要使用SET GLOBAL命令来修改。</p>
</li>
<li>
<p>随机预读<br>
如果Buffer Pool中已经缓存了某个区的13个连续的页面，不论这些页面是不是顺序读取的，都会触发一次异步读取本区中所有其的页面到Buffer Pool的请求。InnoDB同时提供了innodb_random_read_ahead系统变量，它的默认值为OFF，也就意味着InnoDB并不会默认开启随机预读的功能，如果我们想开启该功能，可以通过修改启动参数或者直接使用SET GLOBAL命令把该变量的值设置为ON。</p>
</li>
</ul>
<p>预读本来是个好事儿，如果预读到Buffer Pool中的页成功的被使用到，那就可以极大的提高语句执行的效率。可是如果用不到呢？这些预读的页都会放到LRU链表的头部，但是如果此时Buffer Pool的容量不太大而且很多预读的页面都没有用到的话，这就会导致处在LRU链表尾部的一些缓存页会很快的被淘汰掉，也就是所谓的劣币驱逐良币，会大大降低缓存命中率。</p>
<p>情况二：可能会写一些需要扫描全表的查询语句（比如没有建立合适的索引或者压根儿没有WHERE子句的查询）。</p>
<p>扫描全表意味着什么？意味着将访问到该表所在的所有页！假设这个表中记录非常多的话，那该表会占用特别多的页，当需要访问这些页时，会把它们统统都加载到Buffer Pool中，这也就意味Buffer Pool中的所有页都被换了一次血，其他查询语句在执行时又得执行一次从磁盘加载到Buffer Pool的操作。而这种全表扫描的语句执行的频率也不高，每次执行都要把Buffer Pool中的缓存页换一次血，这严重的影响到其他查询对 Buffer Pool的使用，从而大大降低了缓存命中率。</p>
<p>总结就是加载到Buffer Pool中的页不一定被用到或者如果非常多的使用频率偏低的页被同时加载到Buffer Pool时，可能会把那些使用频率非常高的页从Buffer Pool中淘汰掉。</p>
<p>因为有这两种情况的存在，所以InnoDB把这个LRU链表按照一定比例分成两截，分别是：</p>
<ul>
<li>一部分存储使用频率非常高的缓存页，所以这一部分链表也叫做热数据，或者称young区域。</li>
<li>另一部分存储使用频率不是很高的缓存页，所以这一部分链表也叫做冷数据，或者称old区域。</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://q456qq520.github.io/post-images/1677059398007.png" alt="" loading="lazy"></figure>
<p>我们是按照某个比例将LRU链表分成两半的，不是某些节点固定是young区域的，某些节点固定是old区域的，随着程序的运行，某个节点所属的区域也可能发生变化。那这个划分成两截的比例怎么确定呢？对于InnoDB存储引擎来说，我们可以通过查看系统变量innodb_old_blocks_pct的值来确定old区域在LRU链表中所占的比例。</p>
<blockquote>
<p>mysql&gt; SHOW VARIABLES LIKE 'innodb_old_blocks_pct';</p>
</blockquote>
<p>有了这个被划分成young和old区域的LRU链表之后，InnoDB就可以针对我们上面提到的两种可能降低缓存命中率的情况进行优化了：</p>
<ol>
<li>当磁盘上的某个页面在初次加载到Buffer Pool中的某个缓存页时，该缓存页对应的控制块会被放到old区域的头部。这样针对预读到Buffer Pool却不进行后续访问的页面就会被逐渐从old区域逐出，而不会影响young区域中被使用比较频繁的缓存页。</li>
<li>在进行全表扫描时，虽然首次被加载到Buffer Pool的页被放到了old区域的头部，但是后续会被马上访问到，每次进行访问的时候又会把该页放到young区域的头部，这样仍然会把那些使用频率比较高的页面给顶下去。所以我们只需要规定，在对某个处在old区域的缓存页进行第一次访问时就在它对应的控制块中记录下来这个访问时间，如果后续的访问时间与第一次访问的时间在某个时间间隔内，那么该页面就不会被从old区域移动到young区域的头部，否则将它移动到young区域的头部。上述的这个间隔时间是由系统变量innodb_old_blocks_time控制的。默认值是1000，它的单位是毫秒。</li>
</ol>
<blockquote>
<p>mysql&gt; SHOW VARIABLES LIKE 'innodb_old_blocks_time';</p>
</blockquote>
<h5 id="更进一步优化lru链表">更进一步优化LRU链表</h5>
<p>对于young区域的缓存页来说，我们每次访问一个缓存页就要把它移动到LRU链表的头部，这样开销是不是太大啦，毕竟在young区域的缓存页都是热点数据，也就是可能被经常访问的，这样频繁的对LRU链表进行节点移动操作是不太好的，为了解决这个问题其实我们还可以提出一些优化策略，比如只有被访问的缓存页位于young区域的1/4的后边，才会被移动到LRU链表头部，这样就可以降低调整LRU链表的频率，从而提升性能。</p>
<h4 id="1817-其他的一些链表">18.1.7 其他的一些链表</h4>
<p>为了更好的管理Buffer Pool中的缓存页，除了我们上面提到的一些措施，设计InnoDB的大佬们还引进了其他的一些链表，比如unzip LRU链表用于管理解压页，zip clean链表用于管理没有被解压的压缩页，zip free数组中每一个元素都代表一个链表，它们组成所谓的伙伴系统来为压缩页提供内存空间等等。</p>
<h3 id="182-刷新脏页到磁盘">18.2 刷新脏页到磁盘</h3>
<p>后台有专门的线程每隔一段时间负责把脏页刷新到磁盘，这样可以不影响用户线程处理正常的请求。主要有两种刷新路径：</p>
<ol>
<li>从LRU链表的冷数据中刷新一部分页面到磁盘。<br>
后台线程会定时从LRU链表尾部开始扫描一些页面，扫描的页面数量可以通过系统变量innodb_lru_scan_depth来指定，如果从里边儿发现脏页，会把它们刷新到磁盘。这种刷新页面的方式被称之为BUF_FLUSH_LRU。</li>
<li>从flush链表中刷新一部分页面到磁盘。<br>
后台线程也会定时从flush链表中刷新一部分页面到磁盘，刷新的速率取决于当时系统是不是很繁忙。这种刷新页面的方式被称之为BUF_FLUSH_LIST。<br>
有时候后台线程刷新脏页的进度比较慢，导致用户线程在准备加载一个磁盘页到Buffer Pool时没有可用的缓存页，这时就会尝试看看LRU链表尾部有没有可以直接释放掉的未修改页面，如果没有的话会不得不将LRU链表尾部的一个脏页同步刷新到磁盘（和磁盘交互是很慢的，这会降低处理用户请求的速度）。这种刷新单个页面到磁盘中的刷新方式被称之为BUF_FLUSH_SINGLE_PAGE。</li>
</ol>
<h3 id="183-多个buffer-pool实例">18.3 多个Buffer Pool实例</h3>
<p>Buffer Pool本质是InnoDB向操作系统申请的一块连续的内存空间，在多线程环境下，访问Buffer Pool中的各种链表都需要加锁处理什么的，在Buffer Pool特别大而且多线程并发访问特别高的情况下，单一的Buffer Pool可能会影响请求的处理速度。</p>
<p>所以在Buffer Pool特别大的时候，我们可以把它们拆分成若干个小的Buffer Pool，每个Buffer Pool都称为一个实例，它们都是独立的，独立的去申请内存空间，独立的管理各种链表，独立的等等，所以在多线程并发访问时并不会相互影响，从而提高并发处理能力。我们可以在服务器启动的时候通过设置innodb_buffer_pool_instances的值来修改Buffer Pool实例的个数。</p>
<h4 id="1831-innodb_buffer_pool_chunk_size">18.3.1 innodb_buffer_pool_chunk_size</h4>
<p>每次当我们要重新调整Buffer Pool大小时，都需要重新向操作系统申请一块连续的内存空间，然后将旧的Buffer Pool中的内容复制到这一块新空间，这是极其耗时的。所以MySQL不再一次性为某个Buffer Pool实例向操作系统申请一大片连续的内存空间，而是以一个所谓的chunk为单位向操作系统申请空间。也就是说一个Buffer Pool实例其实是由若干个chunk组成的，一个chunk就代表一片连续的内存空间，里边儿包含了若干缓存页与其对应的控制块。</p>
<h4 id="1832-配置buffer-pool时的注意事项">18.3.2 配置Buffer Pool时的注意事项</h4>
<ol>
<li>innodb_buffer_pool_size必须是innodb_buffer_pool_chunk_size × innodb_buffer_pool_instances的倍数（这主要是想保证每一个Buffer Pool实例中包含的chunk数量相同）。</li>
<li>如果在服务器启动时，innodb_buffer_pool_chunk_size × innodb_buffer_pool_instances的值已经大于innodb_buffer_pool_size的值，那么innodb_buffer_pool_chunk_size的值会被服务器自动设置为innodb_buffer_pool_size/innodb_buffer_pool_instances的值。</li>
</ol>
<h3 id="184-查看buffer-pool的状态信息">18.4 查看Buffer Pool的状态信息</h3>
<blockquote>
<p>mysql&gt; SHOW ENGINE INNODB STATUS\G</p>
</blockquote>
<h2 id="第19章-事务简介">第19章 事务简介</h2>
<p>在对某个页面进行读写访问时，都会先把这个页面加载到Buffer Pool中，之后如果修改了某个页面，也不会立即把修改同步到磁盘，而只是把这个修改了的页面加到Buffer Pool的flush链表中，在之后的某个时间点才会刷新到磁盘。</p>
<h3 id="191-事务的概念">19.1 事务的概念</h3>
<p>数据库把需要保证原子性、隔离性、一致性和持久性的一个或多个数据库操作称之为一个事务（英文名是：transaction）。</p>
<p>事务是一个抽象的概念，它其实对应着一个或多个数据库操作，数据库根据这些操作所执行的不同阶段把事务大致上划分成了这么几个状态：</p>
<ol>
<li>活动的（active）<br>
事务对应的数据库操作正在执行过程中时，我们就说该事务处在活动的状态。</li>
<li>部分提交的（partially committed）<br>
当事务中的最后一个操作执行完成，但由于操作都在内存中执行，所造成的影响并没有刷新到磁盘时，我们就说该事务处在部分提交的状态。</li>
<li>失败的（failed）<br>
当事务处在活动的或者部分提交的状态时，可能遇到了某些错误（数据库自身的错误、操作系统错误或者直接断电等）而无法继续执行，或者人为的停止当前事务的执行，我们就说该事务处在失败的状态。</li>
<li>中止的（aborted）<br>
从而当前事务处在了失败的状态，要撤销失败事务对当前数据库造成的影响。我们把这个撤销的过程称之为回滚。当回滚操作执行完毕时，也就是数据库恢复到了执行事务之前的状态，我们就说该事务处在了中止的状态。</li>
<li>提交的（committed）<br>
当一个处在部分提交的状态的事务将修改过的数据都同步到磁盘上之后，我们就可以说该事务处在了提交的状态。</li>
</ol>
<figure data-type="image" tabindex="4"><img src="https://q456qq520.github.io/post-images/1677061485111.png" alt="" loading="lazy"></figure>
<p><mark><strong>只有当事务处于提交的或者中止的状态时，一个事务的生命周期才算是结束了。</strong></mark></p>
<p>对于已经提交的事务来说，该事务对数据库所做的修改将永久生效，对于处于中止状态的事务，该事务对数据库所做的所有修改都会被回滚到没执行该事务之前的状态。</p>
<h3 id="192-mysql中事务的语法">19.2 MySQL中事务的语法</h3>
<h4 id="1921-开启事务">19.2.1 开启事务</h4>
<p>我们可以使用下面两种语句之一来开启一个事务：</p>
<ol>
<li>BEGIN [WORK];<br>
BEGIN语句代表开启一个事务，后边的单词WORK可有可无。开启事务后，就可以继续写若干条语句，这些语句都属于刚刚开启的这个事务。</li>
<li>START TRANSACTION;<br>
START TRANSACTION语句和BEGIN语句有着相同的功效，都标志着开启一个事务，不过可以在START TRANSACTION语句后边跟随几个修饰符。
<ul>
<li>READ ONLY：标识当前事务是一个只读事务</li>
<li>READ WRITE：标识当前事务是一个读写事务，默认方式</li>
<li>WITH CONSISTENT SNAPSHOT：启动一致性读</li>
</ul>
</li>
</ol>
<h4 id="1922-提交事务">19.2.2 提交事务</h4>
<p>提交事务的语法为：COMMIT [WORK]，COMMIT语句就代表提交一个事务，后边的WORK可有可无。</p>
<h4 id="1923-手动中止事务">19.2.3 手动中止事务</h4>
<p>手动中止事务的语法为：ROLLBACK [WORK]，ROLLBACK语句就代表中止并回滚一个事务，后边的WORK可有可无类似的。</p>
<h3 id="193-支持事务的存储引擎">19.3 支持事务的存储引擎</h3>
<p>MySQL中并不是所有存储引擎都支持事务的功能，目前只有InnoDB和NDB存储引擎支持（NDB存储引擎不是我们的重点），如果某个事务中包含了修改使用不支持事务的存储引擎的表，那么对该使用不支持事务的存储引擎的表所做的修改将无法进行回滚。</p>
<h3 id="194-自动提交">19.4 自动提交</h3>
<p>MySQL中有一个系统变量autocommit：</p>
<pre><code class="language-mysql">mysql&gt; SHOW VARIABLES LIKE 'autocommit';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| autocommit    | ON    |
+---------------+-------+
1 row in set (0.01 sec)
</code></pre>
<p>可以看到它的默认值为ON，也就是说默认情况下，如果我们不显式的使用START TRANSACTION或者BEGIN语句开启一个事务，那么每一条语句都算是一个独立的事务，这种特性称之为事务的自动提交。</p>
<h3 id="195-隐式提交">19.5 隐式提交</h3>
<p>当我们使用START TRANSACTION或者BEGIN语句开启了一个事务，或者把系统变量autocommit的值设置为OFF时，事务就不会进行自动提交，但是如果我们输入了某些语句之后就会悄悄的提交掉，就像我们输入了COMMIT语句了一样，这种因为某些特殊的语句而导致事务提交的情况称为隐式提交，这些会导致事务隐式提交的语句包括：</p>
<ol>
<li>定义或修改数据库对象的数据定义语言（Data definition language，缩写为：DDL）。</li>
<li>隐式使用或修改mysql数据库中的表</li>
<li>事务控制或关于锁定的语句<br>
当我们在一个事务还没提交或者回滚时就又使用START TRANSACTION或者BEGIN语句开启了另一个事务时，会隐式的提交上一个事。</li>
<li>加载数据的语句<br>
比如我们使用LOAD DATA语句来批量往数据库中导入数据时，也会隐式的提交前面语句所属的事务。</li>
<li>关于MySQL复制的一些语句<br>
使用START SLAVE、STOP SLAVE、RESET SLAVE、CHANGE MASTER TO等语句时也会隐式的提交前面语句所属的事务。</li>
<li>其它的一些语句<br>
使用ANALYZE TABLE、CACHE INDEX、CHECK TABLE、FLUSH、 LOAD INDEX INTO CACHE、OPTIMIZE TABLE、REPAIR TABLE、RESET等语句也会隐式的提交前面语句所属的事务。</li>
</ol>
<h3 id="196-保存点">19.6 保存点</h3>
<p>如果你开启了一个事务，并且已经敲了很多语句，忽然发现上一条语句有点问题，你只好使用ROLLBACK语句来让数据库状态恢复到事务执行之前的样子，然后一切从头再来，总有一种一夜回到解放前的感觉。数据库提出了一个保存点（英文：savepoint）的概念，就是在事务对应的数据库语句中打几个点，我们在调用ROLLBACK语句时可以指定会滚到哪个点，而不是回到最初的原点。定义保存点的语法如下：</p>
<blockquote>
<p>SAVEPOINT 保存点名称;</p>
</blockquote>
<p>当我们想回滚到某个保存点时，可以使用下面这个语句（下面语句中的单词WORK和SAVEPOINT是可有可无的）：</p>
<blockquote>
<p>ROLLBACK [WORK] TO [SAVEPOINT] 保存点名称;</p>
</blockquote>
<p>如果我们想删除某个保存点，可以使用这个语句：</p>
<blockquote>
<p>RELEASE SAVEPOINT 保存点名称;</p>
</blockquote>
<h2 id="第20章-说过的话就一定要办到-redo日志上">第20章 说过的话就一定要办到-redo日志（上）</h2>
<h3 id="201-redo日志是什么">20.1 redo日志是什么</h3>
<p>InnoDB存储引擎是以页为单位来管理存储空间的，进行的增删改查操作其实本质上都是在访问页面（包括读页面、写页面、创建新页面等操作）。在真正访问页面之前，需要把在磁盘上的页缓存到内存中的Buffer Pool之后才可以访问。但是事务的时候又有一个称之为持久性的特性，就是说对于一个已经提交的事务，在事务提交后即使系统发生了崩溃，这个事务对数据库中所做的更改也不能丢失。假设在事务提交后突然发生了某个故障，导致内存中的数据都失效了，那么这个已经提交了的事务对数据库中所做的更改也就跟着丢失了，这是我们所不能忍受的。那么如何保证这个持久性呢？</p>
<p>我们只是想让已经提交了的事务对数据库中数据所做的修改永久生效，即使后来系统崩溃，在重启后也能把这种修改恢复出来。所以我们其实没有必要在每次事务提交时就把该事务在内存中修改过的全部页面刷新到磁盘，只需要把修改了哪些东西记录一下就好，这样我们在事务提交时，把上述内容刷新到磁盘中，即使之后系统崩溃了，重启之后只要按照上述内容所记录的步骤重新更新一下数据页，那么该事务对数据库中所做的修改又可以被恢复出来，也就意味着满足持久性的要求。因为在系统奔溃重启时需要按照上述内容所记录的步骤重新更新数据页，所以上述内容也被称之为<mark>重做日志</mark>，英文名为<mark>redo log</mark>。</p>
<p>redo日志刷新到磁盘的好处如下：</p>
<ul>
<li>redo日志占用的空间非常小<br>
  存储表空间ID、页号、偏移量以及需要更新的值所需的存储空间是很小的。</li>
<li>redo日志是顺序写入磁盘的<br>
  在执行事务的过程中，每执行一条语句，就可能产生若干条redo日志，这些日志是按照产生的顺序写入磁盘的，也就是使用顺序IO。</li>
</ul>
<h3 id="202-redo日志格式">20.2 redo日志格式</h3>
<p>redo日志本质上只是记录了一下事务对数据库做了哪些修改。 InnoDB针对事务对数据库的不同修改场景定义了多种类型的redo日志，但是绝大部分类型的redo日志都有下面这种通用的结构：<br>
<img src="https://q456qq520.github.io/post-images/1677146469313.png" alt="" loading="lazy"></p>
<ol>
<li>type：该条redo日志的类型。<br>
  在MySQL 5.7.21这个版本中，InnoDB一共为redo日志设计了53种不同的类型。</li>
<li>space ID：表空间ID。</li>
<li>page number：页号。</li>
<li>data：该条redo日志的具体内容。</li>
</ol>
<h3 id="203-简单的redo日志类型">20.3 简单的redo日志类型</h3>
<p>如果我们没有为某个表显式的定义主键，并且表中也没有定义Unique键，那么InnoDB会自动的为表添加一个称之为row_id的隐藏列作为主键。为这个row_id隐藏列赋值的方式如下：</p>
<ol>
<li>服务器会在内存中维护一个全局变量，每当向某个包含隐藏的row_id列的表中插入一条记录时，就会把该变量的值当作新记录的row_id列的值，并且把该变量自增1。</li>
<li>每当这个变量的值为256的倍数时，就会将该变量的值刷新到系统表空间的页号为7的页面中一个称之为Max Row ID的属性处</li>
<li>当系统启动时，会将上面提到的Max Row ID属性加载到内存中，将该值加上256之后赋值给我们前面提到的全局变量</li>
</ol>
<p>这个Max Row ID属性占用的存储空间是8个字节，当某个事务向某个包含row_id隐藏列的表插入一条记录，并且为该记录分配的row_id值为256的倍数时，就会向系统表空间页号为7的页面的相应偏移量处写入8个字节的值。但是我们要知道，这个写入实际上是在Buffer Pool中完成的，我们需要为这个页面的修改记录一条redo日志，以便在系统奔溃后能将已经提交的该事务对该页面所做的修改恢复出来。这种情况下<mark>redo日志中只需要记录一下在某个页面的某个偏移量处修改了几个字节的值</mark>，具体被修改的内容是什么就好了，InnoDB把这种极其简单的redo日志称之为物理日志，并且根据在页面中写入数据的多少划分了几种不同的redo日志类型：</p>
<ul>
<li>MLOG_1BYTE（type字段对应的十进制数字为1）：表示在页面的某个偏移量处写入1个字节的redo日志类型。</li>
<li>MLOG_2BYTE（type字段对应的十进制数字为2）：表示在页面的某个偏移量处写入2个字节的redo日志类型。</li>
<li>MLOG_4BYTE（type字段对应的十进制数字为4）：表示在页面的某个偏移量处写入4个字节的redo日志类型。</li>
<li>MLOG_8BYTE（type字段对应的十进制数字为8）：表示在页面的某个偏移量处写入8个字节的redo日志类型。</li>
<li>MLOG_WRITE_STRING（type字段对应的十进制数字为30）：表示在页面的某个偏移量处写入一串数据。</li>
</ul>
<p>上面提到的Max Row ID属性实际占用8个字节的存储空间，MLOG_8BYTE的redo日志结构如下所示：<br>
<img src="https://q456qq520.github.io/post-images/1677146763313.png" alt="" loading="lazy"></p>
<p>其余MLOG_1BYTE、MLOG_2BYTE、MLOG_4BYTE类型的redo日志结构和MLOG_8BYTE的类似，只不过具体数据中包含对应个字节的数据罢了。MLOG_WRITE_STRING类型的redo日志表示写入一串数据，但是因为不能确定写入的具体数据占用多少字节，所以需要在日志结构中添加一个<mark>len</mark>字段。</p>
<h3 id="204-复杂一些的redo日志类型">20.4 复杂一些的redo日志类型</h3>
<p>有时候执行一条语句会修改非常多的页面，包括系统数据页面和用户数据页面（用户数据指的就是聚簇索引和二级索引对应的B+树）。以一条INSERT语句为例，它除了要向B+树的页面中插入数据，也可能更新系统数据Max Row ID的值，不过对于我们用户来说，平时更关心的是语句对B+树所做更新：</p>
<ul>
<li>表中包含多少个索引，一条INSERT语句就可能更新多少棵B+树。</li>
<li>针对某一棵B+树来说，既可能更新叶子节点页面，也可能更新内节点页面，也可能创建新的页面（在该记录插入的叶子节点的剩余空间比较少，不足以存放该记录时，会进行页面的分裂，在内节点页面中添加目录项记录）。</li>
</ul>
<p>在语句执行过程中，INSERT语句对所有页面的修改都得保存到redo日志中去。这句话说的比较轻巧，做起来可就比较麻烦了，一个数据页中除了存储实际的记录之后，还有什么File Header、Page Header、Page Directory等等部分（在介绍数据页的章节有详细讲解），所以每往叶子节点代表的数据页里插入一条记录时，还有其他很多地方会跟着更新，比如说：</p>
<ol>
<li>可能更新Page Directory中的槽信息。</li>
<li>Page Header中的各种页面统计信息，比如PAGE_N_DIR_SLOTS表示的槽数量可能会更改，PAGE_HEAP_TOP代表的还未使用的空间最小地址可能会更改，PAGE_N_HEAP代表的本页面中的记录数量可能会更改，等等，各种信息都可能会被修改。</li>
<li>我们知道在数据页里的记录是按照索引列从小到大的顺序组成一个单向链表的，每插入一条记录，还需要更新上一条记录的记录头信息中的next_record属性来维护这个单向链表。<br>
<img src="https://q456qq520.github.io/post-images/1677207440794.png" alt="" loading="lazy"><br>
把一条记录插入到一个页面时需要更改的地方非常多。这时我们如果使用上面介绍的简单的物理redo日志来记录这些修改时，可以有两种解决方案：</li>
</ol>
<p>方案一：在每个修改的地方都记录一条redo日志。<br>
  有多少数据修改，就写多少条物理redo日志。这样子记录redo日志的缺点是显而易见的，因为被修改的地方是在太多了，可能记录的redo日志占用的空间都比整个页面占用的空间都多了。<br>
方案二：将整个页面的第一个被修改的字节到最后一个修改的字节之间所有的数据当成是一条物理redo日志中的具体数据。从图中也可以看出来，第一个被修改的字节到最后一个修改的字节之间仍然有许多没有修改过的数据，我们把这些没有修改的数据也加入到redo日志中去太浪费了。</p>
<p>正因为上述两种使用物理redo日志的方式来记录某个页面中做了哪些修改比较浪费，InnoDB提出了一些新的redo日志类型，比如：</p>
<ul>
<li>MLOG_REC_INSERT（对应的十进制数字为9）：表示插入一条使用非紧凑行格式的记录时的redo日志类型。</li>
<li>MLOG_COMP_REC_INSERT（对应的十进制数字为38）：表示插入一条使用紧凑行格式的记录时的redo日志类型。</li>
<li>MLOG_COMP_PAGE_CREATE（type字段对应的十进制数字为58）：表示创建一个存储紧凑行格式记录的页面的redo日志类型。</li>
<li>MLOG_COMP_REC_DELETE（type字段对应的十进制数字为42）：表示删除一条使用紧凑行格式记录的redo日志类型。</li>
<li>MLOG_COMP_LIST_START_DELETE（type字段对应的十进制数字为44）：表示从某条给定记录开始删除页面中的一系列使用紧凑行格式记录的redo日志类型。</li>
<li>MLOG_COMP_LIST_END_DELETE（type字段对应的十进制数字为43）：与MLOG_COMP_LIST_START_DELETE类型的redo日志呼应，表示删除一系列记录直到MLOG_COMP_LIST_END_DELETE类型的redo日志对应的记录为止。</li>
<li>MLOG_ZIP_PAGE_COMPRESS（type字段对应的十进制数字为51）：表示压缩一个数据页的redo日志类型。</li>
</ul>
<p>这些类型的redo日志既包含物理层面的意思，也包含逻辑层面的意思，具体指：<br>
物理层面看，这些日志都指明了对哪个表空间的哪个页进行了修改。<br>
逻辑层面看，在系统奔溃重启时，并不能直接根据这些日志里的记载，将页面内的某个偏移量处恢复成某个数据，而是需要调用一些事先准备好的函数，执行完这些函数后才可以将页面恢复成系统奔溃前的样子。</p>
<p>我们以类型为MLOG_COMP_REC_INSERT这个代表插入一条使用紧凑行格式的记录时的redo日志为例来理解一下我们上面所说的物理层面和逻辑层面到底是什么意思。<br>
<img src="https://q456qq520.github.io/post-images/1677208360208.png" alt="" loading="lazy"></p>
<blockquote>
<p>n_uniques的值为主键的列数，对于其他二级索引来说，该值为索引列数+主键列数。</p>
</blockquote>
<h3 id="205-mini-transaction">20.5 Mini-Transaction</h3>
<h4 id="2051-以组的形式写入redo日志">20.5.1 以组的形式写入redo日志</h4>
<p>语句在执行过程中可能修改若干个页面。比如我们前面说的一条INSERT语句可能修改系统表空间页号为7的页面的Max Row ID属性，还会更新聚簇索引和二级索引对应B+树中的页面。由于对这些页面的更改都发生在Buffer Pool中，所以在修改完页面之后，需要记录一下相应的redo日志。在执行语句的过程中产生的redo日志被InnoDB划分成了若干个不可分割的组，比如：</p>
<ol>
<li>更新Max Row ID属性时产生的redo日志是不可分割的。</li>
<li>向聚簇索引对应B+树的页面中插入一条记录时产生的redo日志是不可分割的。</li>
<li>向某个二级索引对应B+树的页面中插入一条记录时产生的redo日志是不可分割的。</li>
<li>还有其他的一些对页面的访问操作时产生的redo日志是不可分割的。</li>
</ol>
<p>我们以向某个索引对应的B+树插入一条记录为例，在向B+树中插入这条记录之前，需要先定位到这条记录应该被插入到哪个叶子节点代表的数据页中，定位到具体的数据页之后，有两种可能的情况：</p>
<p>情况一：该数据页的剩余的空闲空间充足，足够容纳这一条待插入记录，那么事情很简单，直接把记录插入到这个数据页中，记录一条类型为MLOG_COMP_REC_INSERT的redo日志就好了，我们把这种情况称之为乐观插入。<br>
情况二：该数据页剩余的空闲空间不足，那么事情就悲剧了，我们前面说过，遇到这种情况要进行所谓的页分裂操作，也就是新建一个叶子节点，然后把原先数据页中的一部分记录复制到这个新的数据页中，然后再把记录插入进去，把这个叶子节点插入到叶子节点链表中，最后还要在内节点中添加一条目录项记录指向这个新创建的页面。很显然，这个过程要对多个页面进行修改，也就意味着会产生多条redo日志，我们把这种情况称之为悲观插入。</p>
<p>InnoDB认为向某个索引对应的B+树中插入一条记录的这个过程必须是原子的，不能说插了一半之后就停止了。比方说在悲观插入过程中，新的页面已经分配好了，数据也复制过去了，新的记录也插入到页面中了，可是没有向内节点中插入一条目录项记录，这个插入过程就是不完整的，这样会形成一棵不正确的B+树。我们知道redo日志是为了在系统奔溃重启时恢复崩溃前的状态，如果在悲观插入的过程中只记录了一部分redo日志，那么在系统奔溃重启时会将索引对应的B+树恢复成一种不正确的状态，这是InnoDB所不能忍受的。所以他们规定在执行这些需要保证原子性的操作时必须以组的形式来记录的redo日志，在进行系统奔溃重启恢复时，针对某个组中的redo日志，要么把全部的日志都恢复掉，要么一条也不恢复。怎么做到的呢？这得分情况讨论：</p>
<ol>
<li>
<p>有的需要保证原子性的操作会生成多条redo日志，比如向某个索引对应的B+树中进行一次悲观插入就需要生成许多条redo日志。<br>
就是在该组中的最后一条redo日志后边加上一条特殊类型的redo日志，该类型名称为MLOG_MULTI_REC_END，type字段对应的十进制数字为31，该类型的redo日志结构很简单，只有一个type字段。只有当解析到类型为MLOG_MULTI_REC_END的redo日志，才认为解析到了一组完整的redo日志，才会进行恢复。否则的话直接放弃前面解析到的redo日志。type字段的第一个比特位为1，代表该需要保证原子性的操作只产生了单一的一条redo日志，否则表示该需要保证原子性的操作产生了一系列的redo日志。<br>
<img src="https://q456qq520.github.io/post-images/1677209909187.png" alt="" loading="lazy"></p>
</li>
<li>
<p>有的需要保证原子性的操作只生成一条redo日志，比如更新Max Row ID属性的操作就只会生成一条redo日志。</p>
</li>
</ol>
<h4 id="2052-mini-transaction的概念">20.5.2 Mini-Transaction的概念</h4>
<p>MySQL把对底层页面中的一次原子访问的过程称之为一个<mark>Mini-Transaction</mark>，简称mtr，比如上面所说的修改一次Max Row ID的值算是一个Mini-Transaction，向某个索引对应的B+树中插入一条记录的过程也算是一个Mini-Transaction。通过上面的叙述我们也知道，一个所谓的mtr可以包含一组redo日志，在进行奔溃恢复时这一组redo日志作为一个不可分割的整体。</p>
<p><mark>一个事务可以包含若干条语句，每一条语句其实是由若干个mtr组成，每一个mtr又可以包含若干条redo日志。</mark></p>
<h3 id="206-redo日志的写入过程">20.6 redo日志的写入过程</h3>
<h4 id="2061-redo-log-block">20.6.1 redo log block</h4>
<p>通过mtr生成的redo日志都放在了大小为512字节的页中。为了和我们前面提到的表空间中的页做区别，我们这里把用来存储redo日志的页称为block。一个redo log block的示意图如下：<br>
<img src="https://q456qq520.github.io/post-images/1677210454228.png" alt="" loading="lazy"></p>
<p>真正的redo日志都是存储到占用496字节大小的<code>log block body</code>中，图中的<code>log block header</code>和<code>log block trailer</code>存储的是一些管理信息。</p>
<figure data-type="image" tabindex="5"><img src="https://q456qq520.github.io/post-images/1677210723157.png" alt="" loading="lazy"></figure>
<ul>
<li>LOG_BLOCK_HDR_NO：每一个block都有一个大于0的唯一标号，本属性就表示该标号值。</li>
<li>LOG_BLOCK_HDR_DATA_LEN：表示block中已经使用了多少字节，初始值为12（因为log block body从第12个字节处开始）。随着往block中写入的redo日志越来也多，本属性值也跟着增长。如果log block body已经被全部写满，那么本属性的值被设置为512。</li>
<li>LOG_BLOCK_FIRST_REC_GROUP：一条redo日志也可以称之为一条redo日志记录（redo log record），一个mtr会生产多条redo日志记录，这些redo日志记录被称之为一个redo日志记录组（redo log record group）。LOG_BLOCK_FIRST_REC_GROUP就代表该block中第一个mtr生成的redo日志记录组的偏移量（其实也就是这个block里第一个mtr生成的第一条redo日志的偏移量）。</li>
<li>LOG_BLOCK_CHECKPOINT_NO：表示所谓的checkpoint的序号</li>
<li>LOG_BLOCK_CHECKSUM：表示block的校验值，用于正确性校验。</li>
</ul>
<h4 id="2062-redo日志缓冲区">20.6.2 redo日志缓冲区</h4>
<p>写入redo日志时也不能直接直接写到磁盘上，实际上在服务器启动时就向操作系统申请了一大片称之为redo log buffer的连续内存空间，翻译成中文就是<mark>redo日志缓冲区</mark>，我们也可以简称为<mark>log buffer</mark>。这片内存空间被划分成若干个连续的redo log block，就像这样：</p>
<figure data-type="image" tabindex="6"><img src="https://q456qq520.github.io/post-images/1677489015933.png" alt="" loading="lazy"></figure>
<p>可以通过启动参数innodb_log_buffer_size来指定log buffer的大小，在MySQL 5.7.21这个版本中，该启动参数的默认值为16MB。</p>
<h4 id="2063-redo日志写入log-buffer">20.6.3 redo日志写入log buffer</h4>
<p>向log buffer中写入redo日志的过程是顺序的，也就是先往前面的block中写，当该block的空闲空间用完之后再往下一个block中写。当我们想往log buffer中写入redo日志时，第一个遇到的问题就是应该写在哪个block的哪个偏移量处，InnoDB提供了一个称之为buf_free的全局变量，该变量指明后续写入的redo日志应该写入到log buffer中的哪个位置，如图所示：<br>
<img src="https://q456qq520.github.io/post-images/1677489217583.png" alt="" loading="lazy"></p>
<p>一个mtr执行过程中可能产生若干条redo日志，这些redo日志是一个不可分割的组，所以其实并不是每生成一条redo日志，就将其插入到log buffer中，而是每个mtr运行过程中产生的日志先暂时存到一个地方，当该mtr结束的时候，将过程中产生的一组redo日志再全部复制到log buffer中。</p>
<h2 id="第21章-redo日志下">第21章 redo日志（下）</h2>
<h3 id="211-redo日志文件">21.1 redo日志文件</h3>
<h4 id="2111-redo日志刷盘时机">21.1.1 redo日志刷盘时机</h4>
<p>mtr运行过程中产生的一组redo日志在mtr结束时会被复制到log buffer中，在一些情况下它们会被刷新到磁盘里，比如：</p>
<ul>
<li>log buffer空间不足时<br>
  log buffer的大小是有限的（通过系统变量innodb_log_buffer_size指定），如果不停的往这个有限大小的log buffer里塞入日志，很快它就会被填满。设计InnoDB的大佬认为如果当前写入log buffer的redo日志量已经占满了log buffer总容量的大约一半左右，就需要把这些日志刷新到磁盘上。</li>
<li>事务提交时<br>
  我们前面说过之所以使用redo日志主要是因为它占用的空间少，还是顺序写，在事务提交时可以不把修改过的Buffer Pool页面刷新到磁盘，但是为了保证持久性，必须要把修改这些页面对应的redo日志刷新到磁盘。</li>
<li>后台线程不停的刷刷刷<br>
  后台有一个线程，大约每秒都会刷新一次log buffer中的redo日志到磁盘。</li>
<li>正常关闭服务器时</li>
<li>做checkpoint时</li>
</ul>
<h4 id="2112-redo日志文件组">21.1.2 redo日志文件组</h4>
<p>MySQL的数据目录（使用==SHOW VARIABLES LIKE 'datadir'==查看）下默认有两个名为<code>ib_logfile0</code>和<code>ib_logfile1</code>的文件，log buffer中的日志默认情况下就是刷新到这两个磁盘文件中。如果我们对默认的redo日志文件不满意，可以通过下面几个启动参数来调节：</p>
<ul>
<li>innodb_log_group_home_dir<br>
  该参数指定了redo日志文件所在的目录，默认值就是当前的数据目录。</li>
<li>innodb_log_file_size<br>
  该参数指定了每个redo日志文件的大小，在MySQL 5.7.21这个版本中的默认值为48MB，</li>
<li>innodb_log_files_in_group<br>
  该参数指定redo日志文件的个数，默认值为2，最大值为100。</li>
</ul>
<p>磁盘上的redo日志文件不只一个，而是以一个日志文件组的形式出现的。这些文件以ib_logfile[数字]（数字可以是0、1、2...）的形式进行命名。在将redo日志写入日志文件组时，是从ib_logfile0开始写，如果ib_logfile0写满了，就接着ib_logfile1写，同理，ib_logfile1写满了就去写ib_logfile2，依此类推。如果写到最后一个文件该咋办？那就重新转到ib_logfile0继续写，所以整个过程如下图所示：</p>
<figure data-type="image" tabindex="7"><img src="https://q456qq520.github.io/post-images/1677489786566.png" alt="" loading="lazy"></figure>
<h4 id="2113-redo日志文件格式">21.1.3 redo日志文件格式</h4>
<p>log buffer本质上是一片连续的内存空间，被划分成了若干个512字节大小的block。将log buffer中的redo日志刷新到磁盘的本质就是把block的镜像写入日志文件中，所以redo日志文件其实也是由若干个512字节大小的block组成。都是由两部分组成：</p>
<ul>
<li>前2048个字节，也就是前4个block是用来存储一些管理信息的。</li>
<li>从第2048字节往后是用来存储log buffer中的block镜像的。</li>
</ul>
<figure data-type="image" tabindex="8"><img src="https://q456qq520.github.io/post-images/1677489963509.png" alt="" loading="lazy"></figure>
<p>而其中前4个特殊block如下<br>
<img src="https://q456qq520.github.io/post-images/1677490599945.png" alt="" loading="lazy"></p>
<ol>
<li>log file header：描述该redo日志文件的一些整体属性</li>
</ol>
<table>
<thead>
<tr>
<th>属性名</th>
<th>长度（单位：字节）</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>LOG_HEADER_FORMAT</td>
<td>4</td>
<td>redo日志的版本，在MySQL 5.7.21中该值永远为1</td>
</tr>
<tr>
<td>LOG_HEADER_PAD1</td>
<td>4</td>
<td>做字节填充用的，没什么实际意义</td>
</tr>
<tr>
<td>LOG_HEADER_START_LSN</td>
<td>8</td>
<td>标记本redo日志文件开始的LSN值，也就是文件偏移量为2048字节初对应的LSN值</td>
</tr>
<tr>
<td>LOG_HEADER_CREATOR</td>
<td>32</td>
<td>一个字符串，标记本redo日志文件的创建者是谁。正常运行时该值为MySQL的版本号，比如：&quot;MySQL 5.7.21&quot;，使用mysqlbackup命令创建的redo日志文件的该值为&quot;ibbackup&quot;和创建时间。</td>
</tr>
<tr>
<td>LOG_BLOCK_CHECKSUM</td>
<td>4</td>
<td>本block的校验值，所有block都有</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>checkpoint1：记录关于checkpoint的一些属性，看一下它的结构：</li>
</ol>
<table>
<thead>
<tr>
<th>属性名</th>
<th>长度（单位：字节）</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>LOG_CHECKPOINT_NO</td>
<td>8</td>
<td>服务器做checkpoint的编号，每做一次checkpoint，该值就加1。</td>
</tr>
<tr>
<td>LOG_CHECKPOINT_LSN</td>
<td>8</td>
<td>服务器做checkpoint结束时对应的LSN值，系统奔溃恢复时将从该值开始。</td>
</tr>
<tr>
<td>LOG_CHECKPOINT_OFFSET</td>
<td>8</td>
<td>上个属性中的LSN值在redo日志文件组中的偏移量</td>
</tr>
<tr>
<td>LOG_CHECKPOINT_LOG_BUF_SIZE</td>
<td>8</td>
<td>服务器在做checkpoint操作时对应的log buffer的大小</td>
</tr>
<tr>
<td>LOG_BLOCK_CHECKSUM</td>
<td>4</td>
<td>本block的校验值，所有block都有</td>
</tr>
</tbody>
</table>
<h3 id="212-log-sequeue-number">21.2 Log Sequeue Number</h3>
<p>InnoDB为记录已经写入的redo日志量，设计了一个称之为<mark>Log Sequeue Number</mark>的全局变量，翻译过来就是：日志序列号，简称<mark>lsn</mark>。InnoDB规定初始的lsn值为8704（也就是一条redo日志也没写入时，lsn的值为8704）。</p>
<p>每一组由mtr生成的redo日志都有一个唯一的LSN值与其对应，LSN值越小，说明redo日志产生的越早。</p>
<h4 id="2121-flushed_to_disk_lsn">21.2.1 flushed_to_disk_lsn</h4>
<p>redo日志是首先写到log buffer中，之后才会被刷新到磁盘上的redo日志文件。所以InnoDB提出了一个称之为<mark>buf_next_to_write</mark>的全局变量，标记当前log buffer中已经有哪些日志被刷新到磁盘中了。</p>
<p>InnoDB提出了一个表示刷新到磁盘中的redo日志量的全局变量，称之为<mark>flushed_to_disk_lsn</mark>。系统第一次启动时，该变量的值和初始的lsn值是相同的，都是8704。随着系统的运行，redo日志被不断写入log buffer，但是并不会立即刷新到磁盘，lsn的值就和flushed_to_disk_lsn的值拉开了差距。如果两者的值相同时，说明log buffer中的所有redo日志都已经刷新到磁盘中了。</p>
<h4 id="2122-lsn值和redo日志文件偏移量的对应关系">21.2.2 lsn值和redo日志文件偏移量的对应关系</h4>
<p>因为lsn的值是代表系统写入的redo日志量的一个总和，一个mtr中产生多少日志，lsn的值就增加多少（当然有时候要加上log block header和log block trailer的大小），这样mtr产生的日志写到磁盘中时，很容易计算某一个lsn值在redo日志文件组中的偏移量，如图：</p>
<figure data-type="image" tabindex="9"><img src="https://q456qq520.github.io/post-images/1677491173209.png" alt="" loading="lazy"></figure>
<h4 id="2123-flush链表中的lsn">21.2.3 flush链表中的LSN</h4>
<p>一个mtr代表一次对底层页面的原子访问，在访问过程中可能会产生一组不可分割的redo日志，在mtr结束时，会把这一组redo日志写入到log buffer中。除此之外，在mtr结束时还有一件非常重要的事情要做，就是把在mtr执行过程中可能修改过的页面加入到Buffer Pool的flush链表。</p>
<p>当第一次修改某个缓存在Buffer Pool中的页面时，就会把这个页面对应的控制块插入到flush链表的头部，之后再修改该页面时由于它已经在flush链表中了，就不再次插入了。也就是说flush链表中的脏页是按照页面的第一次修改时间从大到小进行排序的。在这个过程中会在缓存页对应的控制块中记录两个关于页面何时修改的属性：</p>
<ul>
<li>oldest_modification：如果某个页面被加载到Buffer Pool后进行第一次修改，那么就将修改该页面的mtr开始时对应的lsn值写入这个属性。</li>
<li>newest_modification：每修改一次页面，都会将修改该页面的mtr结束时对应的lsn值写入这个属性。也就是说该属性表示页面最近一次修改后对应的系统lsn值。</li>
</ul>
<p>假设mtr_1执行过程中修改了页a，那么在mtr_1执行结束时，就会将页a对应的控制块加入到flush链表的头部。并且将mtr_1开始时对应的lsn写入页a对应的控制块的oldest_modification属性中，把mtr_1结束时对应的lsn写入页a对应的控制块的newest_modification属性中。</p>
<p>总结一下上面说的，就是：flush链表中的脏页按照修改发生的时间顺序进行排序，也就是按照oldest_modification代表的LSN值进行排序，被多次更新的页面不会重复插入到flush链表中，但是会更新newest_modification属性的值。</p>
<h4 id="2124-checkpoint">21.2.4 checkpoint</h4>
<p>我们的redo日志文件组容量是有限的，我们不得不选择循环使用redo日志文件组中的文件，但是这会造成最后写的redo日志与最开始写的redo日志追尾，这时应该想到：<mark>redo日志只是为了系统奔溃后恢复脏页用的，如果对应的脏页已经刷新到了磁盘，也就是说即使现在系统奔溃，那么在重启后也用不着使用redo日志恢复该页面了，所以该redo日志也就没有存在的必要了，那么它占用的磁盘空间就可以被后续的redo日志所重用</mark>。也就是说：<mark>判断某些redo日志占用的磁盘空间是否可以覆盖的依据就是它对应的脏页是否已经刷新到磁盘里</mark>。我们看一下前面一直介绍的那个例子：<br>
<img src="https://q456qq520.github.io/post-images/1677491805432.png" alt="" loading="lazy"></p>
<p>虽然mtr_1和mtr_2生成的redo日志都已经被写到了磁盘上，但是它们修改的脏页仍然留在Buffer Pool中，所以它们生成的redo日志在磁盘上的空间是不可以被覆盖的。之后随着系统的运行，如果页a被刷新到了磁盘，那么它对应的控制块就会从flush链表中移除。</p>
<p>这样mtr_1生成的redo日志就没有用了，它们占用的磁盘空间就可以被覆盖掉了。设计InnoDB的大佬提出了一个全局变量<mark>checkpoint_lsn</mark>来代表当前系统中可以被覆盖的redo日志总量是多少，这个变量初始值也是8704。</p>
<p>比方说现在页a被刷新到了磁盘，mtr_1生成的redo日志就可以被覆盖了，所以我们可以进行一个增加checkpoint_lsn的操作，我们把这个过程称之为做一次checkpoint。做一次checkpoint其实可以分为两个步骤：</p>
<p>步骤一：计算一下当前系统中可以被覆盖的redo日志对应的lsn值最大是多少。<br>
  redo日志可以被覆盖，意味着它对应的脏页被刷到了磁盘，只要我们计算出当前系统中被最早修改的脏页对应的oldest_modification值，那凡是在系统lsn值小于该节点的oldest_modification值时产生的redo日志都是可以被覆盖掉的，我们就把该脏页的oldest_modification赋值给checkpoint_lsn。</p>
<p>比方说当前系统中页a已经被刷新到磁盘，那么flush链表的尾节点就是页c，该节点就是当前系统中最早修改的脏页了，它的oldest_modification值为8916，我们就把8916赋值给checkpoint_lsn（也就是说在redo日志对应的lsn值小于8916时就可以被覆盖掉）。</p>
<p>步骤二：将checkpoint_lsn和对应的redo日志文件组偏移量以及此次checkpint的编号写到日志文件的管理信息（就是checkpoint1或者checkpoint2）中。<br>
  InnoDB维护了一个目前系统做了多少次checkpoint的变量<mark>checkpoint_no</mark>，每做一次checkpoint，该变量的值就加1。我们前面说过计算一个lsn值对应的redo日志文件组偏移量是很容易的，所以可以计算得到该checkpoint_lsn在redo日志文件组中对应的偏移量checkpoint_offset，然后把这三个值都写到redo日志文件组的管理信息中。<br>
  每一个redo日志文件都有2048个字节的管理信息，但是上述关于checkpoint的信息只会被写到日志文件组的第一个日志文件的管理信息中。InnoDB规定，当checkpoint_no的值是偶数时，就写到checkpoint1中，是奇数时，就写到checkpoint2中。</p>
<h4 id="2125-批量从flush链表中刷出脏页">21.2.5 批量从flush链表中刷出脏页</h4>
<p>如果当前系统修改页面的操作十分频繁，这样就导致写日志操作十分频繁，系统lsn值增长过快。如果后台的刷脏操作不能将脏页刷出，那么系统无法及时做checkpoint，可能就需要用户线程同步的从flush链表中把那些最早修改的脏页（oldest_modification最小的脏页）刷新到磁盘，这样这些脏页对应的redo日志就没用了，然后就可以去做checkpoint了。</p>
<h4 id="2126-查看系统中的各种lsn值">21.2.6 查看系统中的各种LSN值</h4>
<p>我们可以使用<mark>SHOW ENGINE INNODB STATUS</mark>命令查看当前InnoDB存储引擎中的各种LSN值的情况，比如：</p>
<pre><code class="language-mysql">mysql&gt; SHOW ENGINE INNODB STATUS\G

(...省略前面的许多状态)
LOG
---
Log sequence number 124476971
Log flushed up to   124099769
Pages flushed up to 124052503
Last checkpoint at  124052494
0 pending log flushes, 0 pending chkp writes
24 log i/o's done, 2.00 log i/o's/second
----------------------
(...省略后边的许多状态)
</code></pre>
<ol>
<li>Log sequence number：代表系统中的lsn值，也就是当前系统已经写入的redo日志量，包括写入log buffer中的日志。</li>
<li>Log flushed up to：代表flushed_to_disk_lsn的值，也就是当前系统已经写入磁盘的redo日志量。</li>
<li>Pages flushed up to：代表flush链表中被最早修改的那个页面对应的oldest_modification属性值。</li>
<li>Last checkpoint at：当前系统的checkpoint_lsn值。</li>
</ol>
<h3 id="213-innodb_flush_log_at_trx_commit的用法">21.3 innodb_flush_log_at_trx_commit的用法</h3>
<p>为了保证事务的持久性，用户线程在事务提交时需要将该事务执行过程中产生的所有redo日志都刷新到磁盘上。如果对事务的持久性要求不是那么强烈的话，可以选择修改一个称为<mark>innodb_flush_log_at_trx_commit</mark>的系统变量的值，该变量有3个可选的值：</p>
<p>0：当该系统变量值为0时，表示在事务提交时不立即向磁盘中同步redo日志，这个任务是交给后台线程做的。<br>
  这样很明显会加快请求处理速度，但是如果事务提交后服务器挂了，后台线程没有及时将redo日志刷新到磁盘，那么该事务对页面的修改会丢失。<br>
1：当该系统变量值为1时，表示在事务提交时需要将redo日志同步到磁盘，可以保证事务的持久性。1也是innodb_flush_log_at_trx_commit的默认值。<br>
2：当该系统变量值为2时，表示在事务提交时需要将redo日志写到操作系统的缓冲区中，但并不需要保证将日志真正的刷新到磁盘。<br>
  这种情况下如果数据库挂了，操作系统没挂的话，事务的持久性还是可以保证的，但是操作系统也挂了的话，那就不能保证持久性了。</p>
<h3 id="214-崩溃恢复">21.4 崩溃恢复</h3>
<h4 id="2141-确定恢复的起点">21.4.1 确定恢复的起点</h4>
<p>checkpoint_lsn之前的redo日志都可以被覆盖，也就是说这些redo日志对应的脏页都已经被刷新到磁盘中了，既然它们已经被刷盘，我们就没必要恢复它们了。对于checkpoint_lsn之后的redo日志，它们对应的脏页可能没被刷盘，也可能被刷盘了，我们不能确定，所以需要从checkpoint_lsn开始读取redo日志来恢复页面。</p>
<p>当然，redo日志文件组的第一个文件的管理信息中有两个block都存储了checkpoint_lsn的信息，我们当然是要<mark>选取最近发生的那次checkpoint的信息</mark>。衡量checkpoint发生时间早晚的信息就是所谓的checkpoint_no，我们只要把checkpoint1和checkpoint2这两个block中的checkpoint_no值读出来比一下大小，哪个的checkpoint_no值更大，说明哪个block存储的就是最近的一次checkpoint信息。这样我们就能拿到最近发生的checkpoint对应的checkpoint_lsn值以及它在redo日志文件组中的偏移量checkpoint_offset。</p>
<h4 id="2142-确定恢复的终点">21.4.2 确定恢复的终点</h4>
<p>在写redo日志的时候都是顺序写的，写满了一个block之后会再往下一个block中写：<br>
<img src="https://q456qq520.github.io/post-images/1677492591192.png" alt="" loading="lazy"></p>
<p>普通block的log block header部分有一个称之为<mark>LOG_BLOCK_HDR_DATA_LEN</mark>的属性，该属性值记录了当前block里使用了多少字节的空间。对于被填满的block来说，该值永远为512。如果该属性的值不为512，那么就是它了，它就是此次奔溃恢复中需要扫描的最后一个block。</p>
<h4 id="2143-怎么恢复">21.4.3 怎么恢复</h4>
<p>假设现在的redo日志文件中有5条redo日志，如图：<br>
<img src="https://q456qq520.github.io/post-images/1677492672934.png" alt="" loading="lazy"></p>
<p>由于redo 0在checkpoint_lsn后边，恢复时可以不管它。我们现在可以按照redo日志的顺序依次扫描checkpoint_lsn之后的各条redo日志，按照日志中记载的内容将对应的页面恢复出来。这样没什么问题，不过InnoDB还是想了一些办法加快这个恢复的过程：</p>
<ul>
<li>
<p>使用哈希表<br>
根据redo日志的space ID和page number属性计算出散列值，把space ID和page number相同的redo日志放到哈希表的同一个槽里，如果有多个space ID和page number都相同的redo日志，那么它们之间使用链表连接起来，按照生成的先后顺序链接起来的，如下图<br>
<img src="https://q456qq520.github.io/post-images/1677492773396.png" alt="" loading="lazy"><br>
之后就可以遍历哈希表，因为对同一个页面进行修改的redo日志都放在了一个槽里，所以可以一次性将一个页面修复好（避免了很多读取页面的随机IO），这样可以加快恢复速度。另外需要注意一点的是，同一个页面的redo日志是按照生成时间顺序进行排序的，所以恢复的时候也是按照这个顺序进行恢复。</p>
</li>
<li>
<p>跳过已经刷新到磁盘的页面<br>
checkpoint_lsn之前的redo日志对应的脏页确定都已经刷到磁盘了，但是checkpoint_lsn之后的redo日志我们不能确定是否已经刷到磁盘，主要是因为在最近做的一次checkpoint后，可能后台线程又不断的从LRU链表和flush链表中将一些脏页刷出Buffer Pool。这些在checkpoint_lsn之后的redo日志，如果它们对应的脏页在奔溃发生时已经刷新到磁盘，那在恢复时也就没有必要根据redo日志的内容修改该页面了。<br>
在File Header里有一个称之为FIL_PAGE_LSN的属性，该属性记载了最近一次修改页面时对应的lsn值（其实就是页面控制块中的newest_modification值）。如果在做了某次checkpoint之后有脏页被刷新到磁盘中，那么该页对应的FIL_PAGE_LSN代表的lsn值肯定大于checkpoint_lsn的值，凡是符合这种情况的页面就不需要重复执行lsn值小于FIL_PAGE_LSN的redo日志了，所以更进一步提升了奔溃恢复的速度。</p>
</li>
</ul>
<h3 id="215-log_block_hdr_no是如何计算的">21.5 LOG_BLOCK_HDR_NO是如何计算的</h3>
<p>对于实际存储redo日志的普通的log block来说，在log block header处有一个称之为LOG_BLOCK_HDR_NO的属性，我们说这个属性代表一个唯一的标号。这个属性是初次使用该block时分配的，跟当时的系统lsn值有关。使用下面的公式计算该block的LOG_BLOCK_HDR_NO值：</p>
<blockquote>
<p>((lsn / 512) &amp; 0x3FFFFFFFUL) + 1</p>
</blockquote>
<p>0x3FFFFFFFUL对应的二进制数的前2位为0，后30位的值都为1。</p>
<p>不论lsn多大，((lsn / 512) &amp; 0x3FFFFFFFUL)的值肯定在0<sub>0x3FFFFFFFUL之间，再加1的话肯定在1</sub>0x40000000UL之间。而0x40000000UL这个值大家应该很熟悉，这个值就代表着1GB。也就是说系统最多能产生不重复的LOG_BLOCK_HDR_NO值只有1GB个。InnoDB规定redo日志文件组中包含的所有文件大小总和不得超过512GB，一个block大小是512字节，也就是说redo日志文件组中包含的block块最多为1GB个，所以有1GB个不重复的编号值也就够用了。</p>
<p>另外，LOG_BLOCK_HDR_NO值的第一个比特位比较特殊，称之为<mark>flush bit</mark>，如果该值为1，代表着本block是在某次将log buffer中的block刷新到磁盘的操作中的第一个被刷入的block。</p>
<p>链接:<a href="/post/lesslesscong-gen-er-shang-li-jie-mysqlgreatergreater-du-shu-bi-ji-wu">《从根儿上理解MySQL》读书笔记(五)</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Elasticsearch]]></title>
        <id>https://q456qq520.github.io/post/elasticsearch/</id>
        <link href="https://q456qq520.github.io/post/elasticsearch/">
        </link>
        <updated>2023-02-20T08:50:59.000Z</updated>
        <summary type="html"><![CDATA[<p>··</p>
]]></summary>
        <content type="html"><![CDATA[<p>··</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[面试题（二）]]></title>
        <id>https://q456qq520.github.io/post/mian-shi-ti-er/</id>
        <link href="https://q456qq520.github.io/post/mian-shi-ti-er/">
        </link>
        <updated>2023-02-12T04:23:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="zookeeper">Zookeeper</h2>
<h3 id="1-zk的使用场景">1. zk的使用场景</h3>
<ol>
<li>统一命名服务（Name Service）</li>
<li>配置管理</li>
<li>集群管理</li>
<li>共享锁<br>
实现方式也是需要获得锁的 Server 创建一个 EPHEMERAL_SEQUENTIAL 目录节点，然后调用 getChildren方法获取当前的目录节点列表中最小的目录节点是不是就是自己创建的目录节点，如果正是自己创建的，那么它就获得了这个锁，如果不是那么它就调用 exists(String path, boolean watch) 方法并监控 Zookeeper 上目录节点列表的变化，一直到自己创建的节点是列表中最小编号的目录节点，从而获得锁，释放锁很简单，只要删除前面它自己所创建的目录节点就行了。</li>
<li>队列管理</li>
<li>负载均衡</li>
<li>分布式通知/协调</li>
</ol>
<h3 id="2-zk节点类型有哪些有哪些角色-持久化临时leaderfollowobserver">2. zk节点类型有哪些，有哪些角色。持久化/临时，leader，follow，observer</h3>
<p><code>节点类型</code><br>
PERSISTENT：持久化节点<br>
PERSISTENT_SEQUENTIAL：持久化有序节点<br>
PHEMERAL：临时节点<br>
EPHEMERAL_SEQUENTIAL：临时有序节点<br>
容器节点：当没有子节点时，未来会被服务器删除（命令加 -c）<br>
TTL节点：超过TTL指定时间，被服务器删除</p>
<blockquote>
<p>注：临时节点下不能创建子节点，临时节点的声明周期不是永久，跟随客户端连接，客户端会话失效后，临时节点会自动删除。3.5新增了2种节点</p>
</blockquote>
<p><code>角色</code><br>
leader<br>
Leader服务器是整个zookeeper集群的核心，主要工作任务：<br>
1. 事务请求(增/删/改)的唯一调度和处理者，保证集群事务处理的顺序性<br>
2. 集群内部各服务器的调度者<br>
follower<br>
1. 处理客户端非事务请求、转发事务请求给leader服务器<br>
2. 参与事务请求Proposal的投票（需要半数以上服务器通知才能通知leader commit数据，leader发起的提案，需要follower投票）<br>
3. 参与leader选举的投票<br>
observer<br>
observer 是 zookeeper3.3 开始引入的一个全新的服务器角色，从字面来理解，该角色充当了观察者的角色。观察 zookeeper 集群中的最新状态变化并将这些状态变化同步到 observer 服务器上。Observer 的工作原理与follower 角色基本一致，而它和 follower 角色唯一的不同在于 observer 不参与任何形式的投票，包括事务请求Proposal的投票和leader选举的投票。简单来说，observer服务器只提供非事务请求服务，通常在于不影响集群事务处理能力的前提下提升集群非事务处理的能力。</p>
<h3 id="3zk的恢复模式是如何工作的-按顺序启动三个zk节点他们是如何选出leader的">3.zk的恢复模式，是如何工作的。按顺序启动三个zk节点，他们是如何选出leader的</h3>
<p>崩溃恢复模式，zk 使用单一主进程 leader 来处理客户端所有的事务请求，采用ZAB协议将服务器数状态以事务形式广播到所有Follower上。</p>
<p><code>恢复模式</code>：ZAB协议支持的崩溃恢复可以保证在Leader进程崩溃的时候可以重新选出Leader并且保证数据的完整性;<br>
什么时候会进入恢复模式呢？</p>
<ol>
<li>集群刚刚启动的时候。</li>
<li>leader 因为故障宕机了。</li>
<li>leader 失去了半数的机器支持。</li>
</ol>
<p>特殊情况崩溃的处理：<br>
已经被 leader 提交的 Proposal 确保最终被所有的 Follower 提交。确保只有在 leader 上被提出的 Proposal 会被遗弃。</p>
<p>这里的丢弃事务是如何让进行的呢？我们知道，每一个事务都是有一个 zxid进行标记的，这个zxid 是一个 64位的数字，低32位做为计数器，高32位作为 leadert 的epcho周期、重新选举出来的 leader 会在急集群中找到最大的日志的 zxid，然后提取出来 + 1 作为自己的 epcho 周期数，然后把后面的32位清零，开始计数。</p>
<p><code>选举流程</code><br>
Zk的选举算法有两种：一种是基于basic paxos实现的，另外一种是基于fast paxos算法实现的。系统默认的选举算法为fast paxos。</p>
<ol>
<li>Zookeeper选主流程<br>
第一次启动（5台服务器顺序启动）<br>
（1）服务器1启动，发起选举。服务器1投自己一票，此时服务器1有一票，未超过半数以上票数，选举无法完成，服务器保持状态为LOOKING；<br>
（2）服务器2启动，再次发起选举。服务器1和服务器2分别半先投给自己1票，服务器1和服务器2会通信，此时服务器1发现服务器2的myid比自己大，因此会将自己的票给服务器2。此时服务器1票数为0，服务器票数为2。服务器2的票数没有达到半数以上，选举无法完成，服务器1和2状态为LOOKING；<br>
（3）服务器3启动，发起一次选举。最终服务1会有0票，服务器2会有0票，服务器3会有3票，此时服务器3的票数超过半数，因此服务器3当选为leader。服务器1和服务器2的状态变为FOLLOWING,服务器3的状态变为LEADING;<br>
(4)随后服务器4和服务器5启动，此时已经有leader了，不再进行选举了，服务器4和服务器5更改状态为FOLLOWING。</li>
</ol>
<p>非第一次启动<br>
当集群中的一台服务器无法和leader保持连接时，会进入leader选举，而此时，集群会有以下两种状态：<br>
集群中已经存在leader:针对这种情况，该节点试图去选择leader时，会被其他节点告知当前服务器的leader信息。因此，该服务器仅需要和leader重新建立连接并同步状态即可。<br>
集群中已经不存在leader:假设集群由5个节点组成，SID分别为1,2,3,4,5；ZXID分别为9,9,8,7,6，EPOCH均为1，且此时SID为3的服务器为leader。突然，当3和5服务器发生故障时，会触发leader选举。选举规则为：EPOCH大的直接胜出，如果EPOCH相同，则ZXID大的胜出，如果ZXID相同，则SID大的胜出。</p>
<p><code>Zookeeper集群&quot;脑裂&quot;问题处理</code><br>
脑裂 (Split-Brain) 就是比如当你的 cluster 里面有两个节点，它们都知道在这个 cluster 里需要选举出一个 master。那么当它们两个之间的通信完全没有问题的时候，就会达成共识，选出其中一个作为 master。但是如果它们之间的通信出了问题，那么两个结点都会觉得现在没有 master，所以每个都把自己选举成 master，于是 cluster 里面就会有两个 master。</p>
<p>假死：由于心跳超时（网络原因导致的）认为 leader 死了，但其实 leader 还存活着。<br>
脑裂：由于假死会发起新的 leader 选举，选举出一个新的 leader，但旧的 leader 网络又通了，导致出现了两个 leader ，有的客户端连接到老的 leader，而有的客户端则连接到新的 leader。</p>
<p>解决脑裂问题：</p>
<ol>
<li>Quorums (法定人数) 方式:即只有集群中超过半数节点投票才能选举出 Leader。这样的方式可以确保 leader 的唯一性,要么选出唯一的一个 leader,要么选举失败。</li>
<li>添加冗余的心跳线，例如双线条线，尽量减少“裂脑”发生机会。</li>
<li>启用磁盘锁。正在服务一方锁住共享磁盘，“裂脑&quot;发生时，让对方完全&quot;抢不走&quot;共享磁盘资源。但使用锁磁盘也会有一个不小的问题，如果占用共享盘的一方不主动&quot;解锁”，另一方就永远得不到共享磁盘。</li>
<li>设置仲裁机制。例如设置参考 IP（如网关 IP），当心跳线完全断开时，2个节点都各自 ping 一下 参考 IP，不通则表明断点就出在本端，不仅&quot;心跳&quot;、还兼对外&quot;服务&quot;的本端网络链路断了，即使启动（或继续）应用服务也没有用了，那就主动放弃竞争，让能够 ping 通参考 IP 的一端去起服务。更保险一些，ping 不通参考 IP 的一方干脆就自我重启，以彻底释放有可能还占用着的那些共享资源。</li>
</ol>
<h3 id="4zk的广播模式是如何工作的-一个写入请求是如何工作的">4.zk的广播模式，是如何工作的。一个写入请求是如何工作的</h3>
<p><code>消息广播模式</code>：在ZooKeeper中所有的事务请求都由一个主服务器也就是Leader来处理，其他服务器为Follower，Leader将客户端的事务请求转换为事务Proposal，并且将Proposal分发给集群中其他所有的Follower，然后Leader等待Follwer反馈，当有过半数（&gt;=N/2+1）的Follower反馈信息后，Leader将再次向集群内Follower广播Commit信息，Commit为将之前的Proposal提交。</p>
<figure data-type="image" tabindex="1"><img src="https://q456qq520.github.io/post-images/1676252940259.jpeg" alt="" loading="lazy"></figure>
<p>一个客户端的写请求进来之后，leader 会为每个客户端的写请求包装成事务，并提供一个递增事务ID(zxid),保证每个消息的因果关系顺序。leader 会为该事务生成一个 Proposal,进行广播，leader 会为每一个 Follower服务器分配一个单独的FIFO 队列，然后把 Proposal 放到队列中，每一个 Follower 收到 该 Proposal 之后会把它持久到磁盘上，当完全写入之后，发一个 ACK 给leader，收到超过半数机器的ack之后，他自己把自己机器上 Proposal 提交一下，同时开始广播 commit,每一个 Follower 收到 commit 之后，完成各自的事务提交。</p>
<h2 id="kafka">Kafka</h2>
<h3 id="5mq的使用场景">5.mq的使用场景</h3>
<ol>
<li>异步通信：有些业务不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</li>
<li>解耦：降低工程间的强依赖程度，针对异构系统进行适配。在项目启动之初来预测将来项目会碰到什么需求，是极其困难的。通过消息系统在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，当应用发生变化时，可以独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束</li>
<li>冗余：有些情况下，处理数据的过程会失败。除非数据被持久化，否则将造成丢失。消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的&quot;插入-获取-删除&quot;范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。</li>
<li>扩展性：因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。不需要改变代码、不需要调节参数。便于分布式扩容</li>
<li>过载保护：在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量无法提取预知；如果以为了能处理这类瞬间峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃</li>
<li>可恢复性：系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。</li>
<li>顺序保证：在大多使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。</li>
<li>缓冲：在任何重要的系统中，都会有需要不同的处理时间的元素。消息队列通过一个缓冲层来帮助任务最高效率的执行，该缓冲有助于控制和优化数据流经过系统的速度。以调节系统响应时间。</li>
<li>数据流处理：分布式系统产生的海量数据流，如：业务日志、监控数据、用户行为等，针对这些数据流进行实时或批量采集汇总，然后进行大数据分析是当前互联网的必备技术，通过消息队列完成此类数据收集是最好的选择</li>
</ol>
<h3 id="6kafka为什么这么快-批量压缩磁盘顺序写零拷贝">6.kafka为什么这么快。批量，压缩，磁盘顺序写，零拷贝</h3>
<p><code>顺序读写</code><br>
实际上不管是内存还是磁盘，快或慢关键在于寻址的方式，磁盘分为顺序读写与随机读写，内存也一样分为顺序读写与随机读写。基于磁盘的随机读写确实很慢，但磁盘的顺序读写性能却很高。磁盘的顺序读写是磁盘使用模式中最有规律的，并且操作系统也对这种模式做了大量优化，Kafka就是使用了磁盘顺序读写来提升的性能。Kafka的message是不断追加到本地磁盘文件末尾的，而不是随机的写入，这使得Kafka写入吞吐量得到了显著提升。</p>
<p>这种方法有一个缺陷—— 没有办法删除数据 ，所以Kafka是不会删除数据的，它会把所有的数据都保留下来，每个消费者（Consumer）对每个Topic都有一个offset用来表示读取到了第几条数据。<br>
如果不删除硬盘肯定会被撑满，所以Kafka提供了两种策略来删除数据。一是基于时间，二是基于partition文件大小。</p>
<p><code>Page Cache</code><br>
为了优化读写性能，Kafka利用了操作系统本身的Page Cache，就是利用操作系统自身的内存而不是JVM空间内存。这样做的好处有：</p>
<ul>
<li>避免Object消耗：如果是使用 Java 堆，Java对象的内存消耗比较大，通常是所存储数据的两倍甚至更多。</li>
<li>避免GC问题：随着JVM中数据不断增多，垃圾回收将会变得复杂与缓慢，使用系统缓存就不会存在GC问题</li>
</ul>
<p>相比于使用JVM或in-memory cache等数据结构，利用操作系统的Page Cache更加简单可靠。首先，操作系统层面的缓存利用率会更高，因为存储的都是紧凑的字节结构而不是独立的对象。其次，操作系统本身也对于Page Cache做了大量优化，提供了 write-behind、read-ahead以及flush等多种机制。再者，即使服务进程重启，系统缓存依然不会消失，避免了in-process cache重建缓存的过程。<br>
通过操作系统的Page Cache，Kafka的读写操作基本上是基于内存的，读写速度得到了极大的提升。</p>
<p><code>零拷贝</code><br>
基于传统的IO方式，底层实际上通过调用来实现。通过把数据从硬盘读取到内核缓冲区，再复制到用户缓冲区；然后再通过写入到socket缓冲区，最后写入网卡设备。整个过程发生了4次用户态和内核态的上下文切换和4次拷贝。<br>
<img src="https://q456qq520.github.io/post-images/1676270483249.jpeg" alt="" loading="lazy"><br>
零拷贝技术是指计算机执行操作时，CPU不需要先将数据从某处内存复制到另一个特定区域，这种技术通常用于通过网络传输文件时节省CPU周期和内存带宽。<br>
那么对于零拷贝而言，<mark>并非真的是完全没有数据拷贝的过程，只不过是减少用户态和内核态的切换次数以及CPU拷贝的次数</mark>。</p>
<p>几种常见的零拷贝技术如下：</p>
<ol>
<li>mmap<br>
<img src="https://q456qq520.github.io/post-images/1676270475877.jpeg" alt="" loading="lazy"><br>
mmap() 就是在用户态直接引用文件句柄，也就是用户态和内核态共享内核态的数据缓冲区，此时数据不需要复制到用户态空间。当应用程序往 mmap 输出数据时，此时就直接输出到了内核态数据，如果此时输出设备是磁盘的话，会直接写盘（flush间隔是30秒）。</li>
<li>对于sendfile 而言，数据不需要在应用程序做业务处理，仅仅是从一个 DMA 设备传输到另一个 DMA设备。 此时数据只需要复制到内核态，用户态不需要复制数据，并且也不需要像 mmap 那样对内核态的数据的句柄（文件引用）。如下图所示：<br>
<img src="https://q456qq520.github.io/post-images/1676270518662.jpeg" alt="" loading="lazy"></li>
</ol>
<p><code>分区分段 + 索引</code><br>
Kafka的message是按topic分类存储的，topic中的数据又是按照一个一个的partition即分区存储到不同broker节点。每个partition对应了操作系统上的一个文件夹，partition实际上又是按照segment分段存储的。<br>
通过这种分区分段的设计，Kafka的message消息实际上是分布式存储在一个一个小的segment中的，每次文件操作也是直接操作的segment。为了进一步的查询优化，Kafka又默认为分段后的数据文件建立了索引文件，就是文件系统上的.index文件。这种分区分段+索引的设计，不仅提升了数据读取的效率，同时也提高了数据操作的并行度。</p>
<p><code>批量压缩</code><br>
在很多情况下，系统的瓶颈不是CPU或磁盘，而是网络IO，对于需要在广域网上的数据中心之间发送消息的数据流水线尤其如此。进行数据压缩会消耗少量的CPU资源,不过对于kafka而言,网络IO更应该需要考虑。</p>
<ul>
<li>如果每个消息都压缩，但是压缩率相对很低，所以Kafka使用了批量压缩，即将多个消息一起压缩而不是单个消息压缩</li>
<li>Kafka允许使用递归的消息集合，批量的消息可以通过压缩的形式传输并且在日志中也可以保持压缩格式，直到被消费者解压缩</li>
<li>Kafka支持多种压缩协议，包括Gzip和Snappy压缩协议<br>
Kafka速度的秘诀在于，它把所有的消息都变成一个批量的文件，并且进行合理的批量压缩，减少网络IO损耗，通过mmap提高I/O速度，写入数据的时候由于单个Partition是末尾添加所以速度最优；读取数据的时候配合sendfile直接暴力输出。</li>
</ul>
<h3 id="7kafka会丢消息吗哪些场景下会存在">7.kafka会丢消息吗？哪些场景下会存在？</h3>
<p>会，主要有下面三种场景：</p>
<ol>
<li>
<p><code>生产者丢失消息</code><br>
Kafka Producer 是异步发送消息的，如果你的 Producer 客户端使用了 producer.send(msg) 方法来发送消息，方法会立即返回，但此时并不能代表消息已经发送成功了。如果消息再发送的过程中发生了网络抖动，那么消息可能没有传递到 Broker，那么消息可能会丢失。如果发送的消息本身不符合，如大小超过了 Broker 的承受能力等。</p>
</li>
<li>
<p><code>服务端丢失消息</code><br>
Leader Broker 宕机了，触发选举过程，集群选举了一个落后 Leader 太多的 Broker 作为 Leader，那么落后的那些消息就会丢失了。<br>
Kafka 为了提升性能，使用页缓存机制，将消息写入页缓存而非直接持久化至磁盘，采用了异步批量刷盘机制，也就是说，按照一定的消息量和时间间隔去刷盘，刷盘的动作由操作系统来调度的，如果刷盘之前，Broker 宕机了，重启后在页缓存的这部分消息则会丢失。</p>
</li>
<li>
<p><code>消费者丢失消息</code><br>
消费者拉取了消息，并处理了消息，但处理消息异常了导致失败，并且提交了偏移量，消费者重启后，会从之前已提交的位移的下一个位置重新开始消费，消费失败的那些消息不会再次处理，即相当于消费者丢失了消息。<br>
消费者拉取了消息，并提交了消费位移，但是在消息处理结束之前突然发生了宕机等故障，消费者重启后，会从之前已提交的位移的下一个位置重新开始消费，之前未处理完成的消息不会再次处理，即相当于消费者丢失了消息。</p>
</li>
</ol>
<p><code>解决办法</code></p>
<ol>
<li>生产端不要使用 producer.send(msg)，而要使用 producer.send(msg, callback)。带有回调通知的 send 方法可以针对发送失败的消息进行重试处理。</li>
<li>生产端设置 acks = all。代表了你对“已提交”消息的定义。如果设置成 all，则表明所有副本 Broker 都要接收到消息，该消息才算是“已提交”。这是最高等级的“已提交”定义。</li>
<li>生产端设置 retries = 3，当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 retries &gt; 0 的 Producer 能够自动重试消息发送，避免消息丢失。消息太大，超过max.request.size参数配置的值则此方法不可行。</li>
<li>生产端设置 retry.backoff.ms = 300，合理估算重试的时间间隔，可以避免无效的频繁重试。</li>
<li>Broker 端设置 unclean.leader.election.enable = false。它控制的是哪些 Broker 有资格竞选分区的 Leader。如果一个 Broker 落后原先的 Leader 太多，那么它一旦成为新的 Leader，必然会造成消息的丢失。故一般都要将该参数设置成 false，即不允许这种情况的发生。</li>
<li>Broker 端设置 replication.factor &gt;= 3。其实这里想表述的是，最好将消息多保存几份，毕竟目前防止消息丢失的主要机制就是冗余。</li>
<li>Broker 端设置 min.insync.replicas &gt; 1。这控制的是消息至少要被写入到多少个副本才算是“已提交”。设置成大于 1 可以提升消息持久性。在实际环境中千万不要使用默认值 1。</li>
<li>Broker 端确保 replication.factor &gt; min.insync.replicas。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 replication.factor = min.insync.replicas + 1。</li>
<li>消费端确保消息消费完成再提交。最好把它设置成 enable.auto.commit = false，并采用手动提交位移的方式。</li>
<li>消费端没有重试机制不支持消息重试，也没有死信队列，因此使用 Kafka 做消息队列时，需要自己实现消息重试的功能。
<ul>
<li>创建一个 Topic 作为重试 Topic，用于接收等待重试的消息。</li>
<li>普通 Topic 消费者设置待重试消息的下一个重试 Topic。</li>
<li>从重试 Topic 获取待重试消息存储到 Redis 的 ZSet 中，并以下一次消费时间排序。</li>
<li>定时任务从 Redis 获取到达消费时间的消息，并把消息发送到对应的 Topic。</li>
<li>同一个消息重试次数过多则不再重试。</li>
</ul>
</li>
</ol>
<h3 id="8kafka会重复消费消息吗哪些场景下会存在">8.kafka会重复消费消息吗？哪些场景下会存在？</h3>
<p>会，主要有下面两种场景：<br>
<code>生产者重复消息</code><br>
原因：生产者发出一条消息，Broker 落盘以后因为网络等种种原因，发送端得到一个发送失败的响应或者网络中断，然后生产者收到一个可恢复的 Exception 重试消息导致消息重复。<br>
<code>消费者重复消息</code><br>
原因：数据消费完没有及时提交 offset 到 Broker，消息消费端在消费过程中挂掉没有及时提交 offset 到 Broker，另一个消费端启动拿之前记录的 offset 开始消费，由于 offset 的滞后性可能会导致新启动的客户端有少量重复消费。</p>
<p>Kafka 实际上通过两种机制来确保消息消费的精确一次：</p>
<ol>
<li>幂等性（Idempotence）<br>
保证在消息重发的时候，消费者不会重复处理。即使在消费者收到重复消息的时候，重复处理，也要保证最终结果的一致性。Kafka为了实现幂等性，在 0.11.0 版本之后，它在底层设计架构中引入了ProducerID和SequenceNumber。<br>
ProducerID：在每个新的 Producer 初始化时，会被分配一个唯一的 ProducerID，这个 ProducerID 对客户端使用者是不可见的。<br>
SequenceNumber：对于每个 ProducerID，Producer 发送数据的每个 Topic 和 Partition 都对应一个从 0 开始单调递增的 SequenceNumber 值。</li>
<li>事务（Transaction）<br>
幂等性不能实现多分区以及多会话上的消息无重复，而 Kafka 事务则可以弥补这个缺陷，Kafka 自 0.11 版本开始也提供了对事务的支持，目前主要是在 read committed 隔离级别上做事情。它能保证多条消息原子性地写入到目标分区，同时也能保证 Consumer 只能看到事务成功提交的消息。<br>
事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。另外，事务型 Producer 也不惧进程的重启。Producer 重启回来后，Kafka 依然保证它们发送消息的精确一次处理。</li>
</ol>
<h3 id="9kafka的部署结构">9.kafka的部署结构</h3>
<h3 id="10kafka生产者发送消息模式同步-异步-发后既忘-失败重试">10.kafka生产者，发送消息模式：同步、异步、发后既忘。失败重试</h3>
<ol>
<li>Fire-and-forget(发后既忘)<br>
只发送消息，不关心消息是否发送成功。本质上也是一种异步发送的方式，消息先存储在缓冲区中，达到设定条件后批量发送。当然这是kafka吞吐量最高的一种方式,并配合参数acks=0，这样生产者不需要等待服务器的响应，以网络能支持的最大速度发送消息。但是也是消息最不可靠的一种方式，因为对于发送失败的消息没有做任何处理。</li>
<li>Synchronous send(同步)<br>
同步发送，send()方法会返回Futrue对象，通过调用Futrue对象的get()方法，等待直到结果返回，根据返回的结果可以判断是否发送成功。如果业务要求消息必须是按顺序发送的，那么可以使用同步的方式，并且只能在一个partation上，结合参数设置retries的值让发送失败时重试，设置<code>max_in_flight_requests_per_connection=1</code>，可以控制生产者在收到服务器晌应之前只能发送1个消息，在消息发送成功后立刻flush，从而控制消息顺序发送，但是消息过大则不适用。</li>
<li>Asynchronous send(异步)<br>
异步发送，在调用send()方法的时候指定一个callback函数，当broker接收到返回的时候，该callback函数会被触发执行。如果业务需要知道消息发送是否成功，并且对消息的顺序不关心，那么可以用异步+回调的方式来发送消息，配合参数retries=0，并将发送失败的消息记录到日志文件中；要使用callback函数，先要实现org.apache.kafka.clients.producer.Callback接口，该接口只有一个onCompletion方法。如果发送异常，onCompletion的参数Exception e会为非空。</li>
</ol>
<h3 id="11kafka生产者如何确定分区">11.kafka生产者，如何确定分区</h3>
<p>Kafka 的消息数据的组织方式分一下几个层次：</p>
<ol>
<li>Topic，可以理解为一个容器，用来存放同一主题的消息，这里的主题可以理解为各种不同的业务、部门、甚至是租户等。</li>
<li>Partition，也叫做分区，就是把同一个 Topic 中的数据，分成几部分，保存在不同的 Kafka Broker 里，这样可以提高消息吞吐量。每一个消息只能存在于一个分区中，不会重复保存。</li>
<li>Replica，也叫做副本，每一个分区可以有若干个副本，它们保存着同样的数据，保证分区的可用性。</li>
</ol>
<p>Topic 是在生产消息之前就设定好的，每个消息会固定发送到指定的 Topic；Replica 是分区数据的完整副本，只需要分区的 Leader 副本的数据变化，同步数据即可。而分区是比较灵活的，一个消息被发送到指定的 Topic 后，要进入哪个分区，需要根据一个分区策略来计算。</p>
<p><code>轮询策略</code><br>
默认的策略就是轮询策略。轮询策略就是把生产的消息，按照分区，进行顺序分配。比如一个 Topic 被分成了三个分区，那么，第一条消息进入分区0，第二条消息进入分区1，第三条消息进去分区2，第四条消息再进入到分区0，以此类推。</p>
<p><code>自定义策略</code><br>
在 Kafka 中，如果要自己定义分区策略，需要修改生产者中的 partitioner.class 参数，它的值是一个 Java 类的完整名称（包含包名），这个类需要实现 <code>org.apache.kafka.clients.producer.Partitioner</code>接口，这个接口中有 partition 和 close 方法，其中 partition 方法就是实现具体分区逻辑的地方</p>
<p><code>随机策略</code></p>
<pre><code class="language-java">List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);
return ThreadLocalRandom.current().nextInt(partitions.size());
</code></pre>
<p><code>根据消息 key 分区的策略</code><br>
在 Kafka 中，每一则消息可以定义一个 key，我们可以根据这个 key 进行分区逻辑的计算。<br>
根据 key 来计算分区，有一个好处，就是可以让 key 相同的消息进入到同一个分区。因为在 Kafka 中，同一个分区是可以保证顺序的，而多个分区之间是不能保证顺序的，这样既可以享受分区带来的高吞吐量，也可以保证消息顺序。</p>
<h3 id="12kafka生产者线程模型">12.kafka生产者，线程模型</h3>
<figure data-type="image" tabindex="2"><img src="https://q456qq520.github.io/post-images/1676274380989.png" alt="" loading="lazy"></figure>
<h3 id="13kafka消费者如何确定分区rebalance如何处理">13.kafka消费者，如何确定分区，rebalance如何处理？</h3>
<p>消费者是采用Pull拉取方式从broker的partition获取数据，pull模式可以根据消费者的消费能力来进行自己调整，不同的消费者性能不一样。如果broker没有数据的话，消费者可以配置timeout，进行阻塞等待一段时间后再返回。</p>
<p>我们知道一个topic有多个partition，一个消费者组里面就有多个消费者，那是怎么分配的呢？一个主题topic可以有多个消费者，因为里面有多个partition分区（leader分区），一个partition leader可以由一个消费组里的一个消费者来消费。</p>
<p>那么消费者从哪个分区来进行消费呢？</p>
<ol>
<li>策略一、round-robin （RoundRobinAssignor非默认策略）轮训，按照消费者组来进行轮训分配，同个消费者组监听不同的主题也是一样，是把所有的partition和所有的consumer都列出来，所以的话消费者组里面的订阅主题是一样的才可以，主题不一样的话会出现分配不均匀的问题。</li>
<li>策略二、range（RangeAssignor默认策略）范围，按照主题来进行分配，如果不平均分配的话，则第一个消费者会分配比较多的分区，一个消费者监听不同的主题也不影响</li>
</ol>
<p>什么是Rebalance操作？<br>
Kafka怎么均匀的分配某一个topic下所有的partition到各个消费者的呢，从而使得消息的消费速度达到了最快，这就是平衡。而rebalance（重平衡）其实就是重新进行partition的分配，从而使得partition的分配重新达到了平衡的状态。</p>
<p>什么时候会发生rebalance？</p>
<ul>
<li>订阅 Topic 的分区数发生变化。</li>
<li>订阅的 Topic 个数发生变化。</li>
<li>消费组内成员个数发生变化。例如有新的 consumer 实例加入该消费组或者离开组(主动离开或被认为离开)。</li>
</ul>
<p>Rebalance 发生后的执行过程<br>
1、有新的 Consumer 加入 Consumer Group<br>
2、从 Consumer Group 选出 leader<br>
3、leader 进行分区的分配</p>
<h3 id="14kafka消费者位移提交自动-手动-同步-异步">14.kafka消费者，位移提交，自动、手动、同步、异步</h3>
<p>消费者在消费了消息之后会把消费的offset 更新到以 名称为__consumer_offsets_的内置Topic中; 每个消费组都有维护一个当前消费组的offset。</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>描述</th>
<th>default</th>
</tr>
</thead>
<tbody>
<tr>
<td>enable.auto.commit</td>
<td>如果为true，消费者的offset将在后台周期性的提交</td>
<td>true</td>
</tr>
<tr>
<td>auto.commit.interval.ms</td>
<td>如果enable.auto.commit设置为true，则消费者偏移量自动提交给Kafka的频率（以毫秒为单位）</td>
<td>5000</td>
</tr>
</tbody>
</table>
<p><code>自动提交</code><br>
消费者端开启了自动提交之后,每隔auto.commit.interval.ms自动提交一次;</p>
<p><code>手动提交</code><br>
手动提交 offset 的方法有两种:分别是 <code>commitSync(同步提交)</code>和 <code>commitAsync(异步 提交)</code>。两者的相同点是，都会将本次 poll 的一批数据最高的偏移量提交;不同点是， commitSync 阻塞当前线程，一直到提交成功，并且会自动失败重试(由不可控因素导致， 也会出现提交失败);而commitAsync则没有失败重试机制，故有可能提交失败。</p>
<h3 id="15kafka-broker如何保证消息存储持久化">15.kafka broker，如何保证消息存储持久化</h3>
<h3 id="16kafka-broker存储结构logindextimeindex">16.kafka broker，存储结构，log，index，timeIndex</h3>
<figure data-type="image" tabindex="3"><img src="https://q456qq520.github.io/post-images/1676276835685.png" alt="" loading="lazy"></figure>
<ol>
<li>kafka 中消息是以主题 Topic 为基本单位进行归类的，这里的 Topic 是逻辑上的概念，实际上在磁盘存储是根据分区 Partition 存储的, 即每个 Topic 被分成多个 Partition，分区 Partition 的数量可以在主题 Topic 创建的时候进行指定。</li>
<li>Partition 分区主要是为了解决 Kafka 存储的水平扩展问题而设计的， 如果一个 Topic 的所有消息都只存储到一个 Kafka Broker上的话， 对于 Kafka 每秒写入几百万消息的高并发系统来说，这个 Broker 肯定会出现瓶颈， 故障时候不好进行恢复，所以 Kafka 将 Topic 的消息划分成多个 Partition， 然后均衡的分布到整个 Kafka Broker 集群中。</li>
<li>Partition 分区内每条消息都会被分配一个唯一的消息 id,即我们通常所说的 偏移量 Offset, 因此 kafka 只能保证每个分区内部有序性,并不能保证全局有序性。</li>
<li>然后每个 Partition 分区又被划分成了多个 <code>LogSegment</code>，这是为了防止 Log 日志过大，Kafka 又引入了日志分段(LogSegment)的概念，将 Log 切分为多个 LogSegement，相当于一个巨型文件被平均分割为一些相对较小的文件，这样也便于消息的查找、维护和清理。这样在做历史数据清理的时候，直接删除旧的 LogSegement 文件就可以了。</li>
<li>Log 日志在物理上只是以文件夹的形式存储，而每个 LogSegement 对应磁盘上的一个日志文件和两个索引文件，以及可能的其他文件(比如以&quot;.snapshot&quot;为后缀的快照索引文件等)</li>
</ol>
<p>举个例子，假设现在有一个名为“topic-order”的 Topic，该 Topic 中有4个 Partition，那么在实际物理存储上表现为“topic-order-0”、“topic-order-1”、“topic-order-2”、“topic-order-3” 这4个文件夹。首先向 Log 中写入消息是顺序写入的。但是只有最后一个 LogSegement 才能执行写入操作，之前的所有 LogSegement 都不能执行写入操作。我们将最后一个 LogSegement 称为&quot;activeSegement&quot;，即表示当前活跃的日志分段。随着消息的不断写入，当 activeSegement 满足一定的条件时，就需要创建新的 activeSegement，之后再追加的消息会写入新的 activeSegement。</p>
<p>为了更高效的进行消息检索，每个 LogSegment 中的日志文件(以“.log”为文件后缀)都有对应的几个索引文件：偏移量索引文件(以“.index”为文件后缀)、时间戳索引文件(以“.timeindex”为文件后缀)、快照索引文件 (以“.snapshot”为文件后缀)。其中每个 LogSegment 都有一个 Offset 来作为基准偏移量(baseOffset)，用来表示当前 LogSegment 中第一条消息的 Offset。偏移量是一个64位的 Long 长整型数，日志文件和这几个索引文件都是根据基准偏移量(baseOffset)命名的，名称固定为20位数字，没有达到的位数前面用0填充。比如第一个 LogSegment 的基准偏移量为0，对应的日志文件为00000000000000000000.log。</p>
<h3 id="17kafka-broker是如何保证不丢数据的isr副本管理高水位线">17.kafka broker，是如何保证不丢数据的，ISR副本管理，高水位线</h3>
<p><code>什么是ISR</code><br>
ISR，全称 in-sync replicas，是一组动态维护的同步副本集合，每个topic分区都有自己的ISR列表，ISR中的所有副本都与leader保持同步状态(也包括leader本身)，只有ISR中的副本才有资格被选为新的leader，<br>
Producer发送消息时，消息只有被全部写到了ISR中，才会被视为已提交状态，若分区ISR中有N个副本，那么该分区ISR最多可以忍受 N-1 个副本崩溃而不丢失消息。</p>
<p><code>什么是高水位？</code><br>
在kafka中水位用于表示消息在分区中的位移或位置，高水位用于表示已提交的消息的分界线的位置，在高水位这个位置之前的消息都是已提交的，在高水位这个位置之后的消息都是未提交的。所以，高水位可以看作是已提交消息和未提交消息之间的分割线，如果把分区比喻为一个竖起来的水容器的话，这个表示就更明显了，在高水位之下的消息都是已提交的，在高水位之上的消息都是未提交的。<br>
<img src="https://q456qq520.github.io/post-images/1676281692278.png" alt="" loading="lazy"><br>
在 Kafka 中，高水位的作用主要有 2 个。</p>
<ol>
<li>定义消息可见性，即用来标识分区下的哪些消息是可以被消费者消费的。</li>
<li>帮助 Kafka 完成副本同步。</li>
</ol>
<blockquote>
<p>位移值等于高水位的消息也属于未提交消息。也就是说，高水位上的消息是不能被消费者消费的。</p>
</blockquote>
<p>每个副本对象都保存了一组高水位值和 LEO 值，但实际上，在 Leader 副本所在的 Broker 上，还保存了其他 Follower 副本的 LEO 值。</p>
<p><code>副本同步过程</code><br>
假设某Kafka集群中(broker1、2、3)仅有一个Topic，该Topic只有一个分区，该分区有3个副本，ISR中也是这3个副本，该Topic中目前没有任何数据，因此3个副本中的LEO和HW都是0。<br>
此时某Producer(Producer的acks参数设置成了-1)向broker1中的leader副本发送了一条消息，接下的流程如下：</p>
<ol>
<li>broker1上的leader副本接收到消息，将自己的LEO更新为1</li>
<li>broker2和3上的follower副本各自发送请求给broker1</li>
<li>broker1分别将消息推送给broker2、3上的副本</li>
<li>follower副本收到消息后，进行写入然后将自己的LEO也更新为1</li>
<li>leader副本收到其他follower副本的数据请求响应(response)后，更新HW值为1，此时位移为0的消息可以被consumer消费</li>
</ol>
<p><code>副本同步机制的危害</code></p>
<ol>
<li>数据丢失</li>
<li>数据不一致</li>
</ol>
<p>解决办法：<br>
kafka引入了Leader Epoch，Leader Epoch是一对值：（epoch,offset），epoch：代表当前 leader 的版本号，从0开始，当 Leader 变更过一次时，我们的 epoch 就会 +1，offset：该 epoch 版本的 Leader 写入第一条消息的位移</p>
<h3 id="18kafka-broker优先副本有什么作用是如何使用的">18.kafka broker，优先副本有什么作用？是如何使用的</h3>
<p>所谓的优先副本是指在AR集合列表中的第一个副本。理想情况下，优先副本就是该分区的leader 副本，所以也可以称之为 preferred leader。Kafka 要确保所有主题的优先副本在 Kafka 集群中均匀分布，这样就保证了所有分区的 leader 均衡分布。以此来促进集群的负载均衡，这一行为也可以称为“分区平衡”。</p>
<p><code>优先副本选举</code></p>
<h2 id="rocketmq">RocketMq</h2>
<h3 id="19rocketmq为什么这么快-磁盘顺序写零拷贝">19.rocketMq为什么这么快。磁盘顺序写，零拷贝</h3>
<ol>
<li>顺序读写<br>
对磁盘读写时，如果是顺序读写，那么磁头几乎不用换道，或者换道的时间很短。读写效率会提高很多。（rocketmq 写是顺序写，读并不是，但是它提高的读机制使得读类似顺序读）<br>
rocketmq 将消息写入CommitLog 文件夹中的mappedFile文件（这个文件超过1G后会新建一个）时，是按照顺序写入的。不论消息属于哪个 Topic 的哪个 Queue 。都会按照顺序依次存储到CommitLog 文件夹中的mappedFile文件。</li>
<li>零拷贝-mmap技术<br>
mmap将一个文件或者其它对象映射进内存。mmap系统调用使得进程之间通过映射同一个普通文件实现共享内存。普通文件被映射到进程地址空间后，进程可以像访问普通内存一样对文件进行访问，不必再调用read()，write（）等操作。因为已经将文件映射到内存，所以就减少了一次cpu拷贝</li>
<li>预读取机制：<br>
consumequeue中的数据是顺序存放的，还引入了PageCache的预读取机制，使得对consumequeue文件的读取几乎接近于内存读取，即使在有消息堆积情况下也不会影响性能。若用户要读取数据，其首先会从PageCache中读取，若没有命中，则OS在从物理磁盘上加载该数据到PageCache的同时，也会顺序对其相邻数据块中的数据进行预读取。</li>
<li>文件预分配：<br>
CommitLog 的大小默认是1G，当超过大小限制的时候需要准备新的文件，而 RocketMQ 就起了一个后台线程 AllocateMappedFileService，不断的处理 AllocateRequest，AllocateRequest其实就是预分配的请求，会提前准备好下一个文件的分配，防止在消息写入的过程中分配文件，产生抖动。</li>
</ol>
<h3 id="20rocketmq会丢消息吗哪些场景下会存在">20.rocketMq会丢消息吗？哪些场景下会存在？</h3>
<figure data-type="image" tabindex="4"><img src="https://q456qq520.github.io/post-images/1676339415188.png" alt="" loading="lazy"></figure>
<p>如何保证消息不丢失：<br>
<img src="https://q456qq520.github.io/post-images/1676339515168.png" alt="" loading="lazy"></p>
<h3 id="21rocketmq会重复消费消息吗哪些场景下会存在">21.rocketMq会重复消费消息吗？哪些场景下会存在？</h3>
<p>比如生产者发送消息的时候使用了重试机制，发送消息后由于网络原因没有收到MQ的响应信息，报了个超时异常，然后又去重新发送了一次消息。但其实MQ已经接到了消息，并返回了响应，只是因为网络原因超时了。这种情况下，一条消息就会被发送两次。</p>
<p>在消费者处理了一条消息后会返回一个offset给MQ，证明这条消息被处理过了。但是，假如这条消息已经处理过了，在返回offset给MQ的时候服务宕机了，MQ就没有接收到这条offset，那么服务重启后会再次消费这条消息。</p>
<p>如果说MQ解决不了数据重复消费的问题，那么现在可以转化成 At least once + 幂等性 = Exactly once 这样就可以保证重复消费了。主要有下列三种方法</p>
<ol>
<li>数据库的唯一约束实现幂等</li>
<li>为更新的数据设置前置条件</li>
<li>记录并检查操作<br>
在发送消息时，给每条消息指定一个全局唯一的 ID，消费时，先根据这个 ID 检查这条消息是否有被消费过，如果没有消费过，才更新数据，然后将消费状态置为已消费。</li>
</ol>
<h3 id="22rocketmq的部署结构name-servce之间部通讯">22.rocketMq的部署结构，Name Servce之间部通讯</h3>
<figure data-type="image" tabindex="5"><img src="https://q456qq520.github.io/post-images/1676341349908.png" alt="" loading="lazy"></figure>
<h3 id="23rocketmq生产者发送消息模式同步-异步-单向">23.rocketMq生产者，发送消息模式：同步、异步、单向。</h3>
<ol>
<li>同步发送<br>
Producer 向 broker 发送消息，阻塞当前线程等待 broker 响应 发送结果。</li>
<li>异步发送<br>
Producer 首先构建一个向 broker 发送消息的任务，把该任务提交给线程池，等执行完该任务时，回调用户自定义的回调函数，执行处理结果。</li>
<li>Oneway 发送<br>
Oneway 方式只负责发送请求，不等待应答，Producer 只负责把请求发出去，而不处理响应结果。</li>
<li>延迟发送：指定延迟的时间，在延迟时间到达之后再进行消息的发送。</li>
<li>批量发送：对于同类型、同特征的消息，可以聚合进行批量发送，减少MQ的连接发送次数，能够显著提升性能。</li>
</ol>
<h3 id="24rocketmq消费者如何确定分区rebalance如何处理">24.	rocketMq消费者，如何确定分区，rebalance如何处理？</h3>
<p><code>Rebalance(再均衡)</code>机制指的是：将一个Topic下的多个队列(或称之为分区)，在同一个消费者组(consumer group)下的多个消费者实例(consumer instance)之间进行重新分配。</p>
<p>Rebalance限制：<br>
由于一个队列最多分配给一个消费者，因此当某个消费者组下的消费者实例数量大于队列的数量时，多余的消费者实例将分配不到任何队列。</p>
<p>Rebalance除了以上限制，更加严重的是，在发生Rebalance时，存在着一些危害，如下所述：<br>
消费暂停：考虑在只有Consumer 1的情况下，其负责消费所有5个队列；在新增Consumer 2，触发Rebalance时，需要分配2个队列给其消费。那么Consumer 1就需要停止这2个队列的消费，等到这两个队列分配给Consumer 2后，这两个队列才能继续被消费。<br>
重复消费：Consumer 2 在消费分配给自己的2个队列时，必须接着从Consumer 1之前已经消费到的offset继续开始消费。然而默认情况下，offset是异步提交的，如consumer 1当前消费到offset为10，但是异步提交给broker的offset为8；那么如果consumer 2从8的offset开始消费，那么就会有2条消息重复。也就是说，Consumer 2 并不会等待Consumer1提交完offset后，再进行Rebalance，因此提交间隔越长，可能造成的重复消费就越多。<br>
消费突刺：由于rebalance可能导致重复消费，如果需要重复消费的消息过多；或者因为rebalance暂停时间过长，导致积压了部分消息。那么都有可能导致在rebalance结束之后瞬间可能需要消费很多消息。</p>
<p>具体步骤为：</p>
<ol>
<li>消费端会通过RebalanceService线程，10秒钟做一次基于topic下的所有队列负载</li>
<li>消费端遍历自己的所有topic，依次调rebalanceByTopic</li>
<li>根据topic获取此topic下的所有queue</li>
<li>选择一台broker获取基于group的所有消费端（有心跳向所有broker注册客户端信息）</li>
<li>选择队列分配策略实例AllocateMessageQueueStrategy执行分配算法</li>
</ol>
<p>什么时候触发负载均衡:</p>
<ol>
<li>消费者启动之后</li>
<li>消费者数量发生变更</li>
<li>每10秒会触发检查一次rebalance</li>
</ol>
<p>分配算法,RocketMQ提供了6中分区的分配算法:</p>
<ol>
<li>AllocateMessageQueueAveragely ：平均分配算法（默认）</li>
<li>AllocateMessageQueueAveragelyByCircle：环状分配消息队列</li>
<li>AllocateMessageQueueByConfig：按照配置来分配队列： 根据用户指定的配置来进行负载</li>
<li>AllocateMessageQueueByMachineRoom：按照指定机房来配置队列</li>
<li>AllocateMachineRoomNearby：按照就近机房来配置队列：</li>
<li>AllocateMessageQueueConsistentHash：一致性hash，根据消费者的cid进行</li>
</ol>
<h3 id="25rocketmq消费者tag是如何实现的">25.	rocketMq消费者，tag是如何实现的</h3>
<p>RocketMQ消息中间件相比于其他消息中间件提供了更细粒度的消息过滤,相比于Topic做业务维度的区分,Tag，即消息标签，用于对某个Topic下的消息进行进一步分类。消息队列RocketMQ版的生产者在发送消息时，指定消息的Tag，消费者需根据已经指定的Tag来进行订阅。</p>
<p>tag可以理解为topic的子类型,具有某一类型细分属性的集合,sql过滤模式是使用表达式实现通过消息内容的值进行过滤。</p>
<ol>
<li>消息生产者发送带tag的消息,先存储到commitlog,然后定时分发到topic对应的consumerQueue,消息对应的entry有8位存储tag的hashcode值。</li>
<li>消费端启动时将订阅关系通过心跳方式发送到broker,broker存储到ConsumerFilterManager中。</li>
<li>不论是push还是pull模式,本质上都是consumer去broker拉取消息,只不过对于push模式来说,通过pull将消息拉取到本地队列,并触发本地消费逻辑。</li>
<li>消息过滤逻辑是在broker实现,从consumerQueue拉取消息的时候,触发过滤逻辑,将符合条件的tag消息拉到本地消费。</li>
</ol>
<p><img src="https://q456qq520.github.io/post-images/1676344246694.png" alt="" loading="lazy">、</p>
<h3 id="26rocketmq消费者顺序消息消费失败如何处理">26.rocketMq消费者，顺序消息消费失败如何处理？</h3>
<p>当一条消息消费失败，RocketMQ就会自动进行消息重试。而如果消息超过最大重试次数，RocketMQ就会认为这个消息有问题。但是此时，RocketMQ不会立刻将这个有问题的消息丢弃，而会将其发送到这个消费者组对应的一种特殊队列：死信队列。</p>
<p>顺序消费通过客户端参数DefaultMQPushConsumer.maxReconsumeTimes设置最大重试次数，超过最大重试次数，消息将被转移到死信队列，范围是-1 – 16之间。<br>
maxReconsumeTimes默认值为-1，对于顺序消费模式来说 -1就代表着Integer.MAX_VALUE，表示无限次本地立即重试消费。这里的重试不再会将消息发往broker重试队列，只在在本地重试。<br>
顺序消费的重试由于不再需要broker控制，那么重试的间隔时间也是通过本地参数控制的，可通过MessageListenerOrderly#consumeMessage方法的ConsumeOrderlyContext参数指定重试策略，通过配置ConsumeOrderlyContext.suspendCurrentQueueTimeMillis属性指定间隔时间，参数取值范围10～30000ms，默认值-1，表示1000ms，即1秒重试一次。</p>
<p>业务方可以进行下面的操作处理失败消息：</p>
<ol>
<li>增加重试次数：如果重试次数设置较少，则增加重试次数以保证消息被成功消费。</li>
<li>检查消息内容：确保消息内容符合消费者的要求，避免消息因格式不正确导致消费失败。</li>
<li>检查消费者代码：检查消费者代码，确保代码实现了正确的消息处理流程。</li>
<li>消息补偿：如果多次重试仍然失败，考虑使用消息补偿机制以确保消息的最终一致性。</li>
</ol>
<h3 id="27rocketmq消费者非顺序消息消费失败如何处理重试队列retryconsumergroupconsumergroup">27.rocketMq消费者，非顺序消息消费失败如何处理？重试队列，%RETRY%consumerGroup@consumerGroup</h3>
<p>由于Consumer端逻辑出现了异常，导致没有返回SUCCESS状态，那么Broker就会在一段时间后尝试重试。</p>
<p>RocketMQ会为每个消费组都设置一个Topic名称为“%RETRY%+consumerGroup”的重试队列（这里需要注意的是，这个Topic的重试队列是针对消费组，而不是针对每个Topic设置的），用于暂时保存因为各种异常而导致Consumer端无法消费的消息，每个Consumer实例在启动的时候就默认订阅了该消费组的重试队列Topic。</p>
<p>考虑到异常恢复起来需要一些时间，会为重试队列设置多个重试级别，每个重试级别都有与之对应的重新投递延时，重试次数越多投递延时就越大（实际上就是配置的延时队列的级别level）。RocketMQ对于重试消息的处理是先保存至Topic名称为“SCHEDULE_TOPIC_XXXX”的延迟队列中，后台定时任务按照对应的时间进行Delay后重新保存至“%RETRY%+consumerGroup”的重试队列中。</p>
<p>对于非顺序消息，消费失败默认重试16次，延迟等级为3~18。(messageDelayLevel = &quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&quot;)</p>
<h3 id="28rocketmq-broker延迟队列如何实现schedule_topic_xxxx">28.rocketMq broker，延迟队列如何实现，SCHEDULE_TOPIC_XXXX</h3>
<p>Broker收到延时消息了，会先发送到主题（SCHEDULE_TOPIC_XXXX）的相应时间段的Message Queue中，然后通过一个定时任务轮询这些队列，到期后，把消息投递到目标Topic的队列中，然后消费者就可以正常消费这些消息。</p>
<h3 id="29rocketmq-broker事务消息是如何处理">29.	rocketMq broker，事务消息是如何处理？</h3>
<p>RocketMQ针对事务消息扩展了两个相关的概念：</p>
<ol>
<li>半消息<br>
半消息（Half Message）是一种特殊的消息类型，处于这个状态的消息暂时不能被Consumer消费。<br>
当一条事务消息被成功投递到Broker上，但Broker没有收到Producer的二次确认时，该事务消息就处于暂时不可消费的状态，这种消息就是半消息。</li>
<li>消息状态回查<br>
由于网络抖动、系统宕机等等原因，可能导致Producer向Broker发送的二次确认信息没有送达。如果Broker检测到某条事务消息长时间处于半消息状态，则会主动向Producer端发起回查操作，查询该事务消息在Producer端的事务状态。这个机制主要是用来解决分布式事务中的超时问题。</li>
</ol>
<p>RocketMQ事务消息流程图及执行步骤如下：<br>
<img src="https://q456qq520.github.io/post-images/1676345749327.png" alt="" loading="lazy"></p>
<ol>
<li>Producer向Broker端发送半消息</li>
<li>Broker发送ACK确认，表示半消息发送成功</li>
<li>Producer执行本地事务</li>
<li>本地事务完毕，根据事务的状态，Producer向Broker发送二次确认消息，确认该半消息的Commit或Rollback状态。Broker收到二次确认消息之后：如果是Commit状态，则直接将消息发送到Consumer端执行消费逻辑；如果是Rollback状态，则会直接将其标记为失败，不会发送给Consumer</li>
<li>针对超时情况，Broker主动向Producer发起消息回查</li>
<li>Producer处理回查消息，返回对应的本地事务执行结果</li>
<li>Broker针对消息回查的结果，执行【步骤4】的操作</li>
</ol>
<h3 id="30rocketmq-broker存储结构commitlogconsumequeueindex">30.rocketMq broker，存储结构，commitLog，consumequeue，index</h3>
<figure data-type="image" tabindex="6"><img src="https://q456qq520.github.io/post-images/1676345918124.png" alt="" loading="lazy"></figure>
<ol>
<li>Commitlog文件<br>
commitLog文件的最大的一个特点就是消息的顺序写入，随机读写，关于commitLog的文件的落盘有两种，一种是同步刷盘，一种是异步刷盘，可通过 flushDiskType 进行配置。在写入commitLog的时候内部会有一个mappedFile内存映射文件，消息是先写入到这个内存映射文件中，然后根据刷盘策略写到硬盘中。</li>
<li>consumerQueue文件<br>
每一个topic有多个queue，每个queue放着不同的消息。而每个topic下的queue队列都会对应一个Consumerqueue文件。消费者可以通过Consumerqueue来确定自己的消费进度，获取消息在commitLog文件中的具体的offset和大小。consumequeue存放在store文件里面，里面的consumequeue文件里面按照topic排放，然后每个topic默认4个队列，里面存放的consumequeue文件。ConsumeQueue中并不需要存储消息的内容，而存储的是消息在CommitLog中的offset。也就是说ConsumeQueue其实是CommitLog的一个索引文件。</li>
<li>indexFile文件<br>
RocketMQ还支持通过MessageID或者MessageKey来查询消息，使用ID查询时，因为ID就是用broker+offset生成的(这里msgId指的是服务端的)，所以很容易就找到对应的commitLog文件来读取消息。对于用MessageKey来查询消息，MessageStore通过构建一个index来提高读取速度。indexfile文件存储在store目录下的index文件里面，里面存放的是消息的hashcode和index内容，文件由一个文件头组成：长40字节。500w个hashslot，每个4字节。2000w个index条目，每个20字节。</li>
</ol>
<h3 id="31rocketmq-broker如何保证消息存储持久化集群模式同步双写异步刷盘">31.	rocketMq broker，如何保证消息存储持久化，集群模式，同步双写（异步刷盘）</h3>
<p>当消息投递到broker之后，会先存到page cache，然后根据broker设置的刷盘策略是否立即刷盘，也就是如果刷盘策略为异步，broker并不会等待消息落盘就会返回producer成功，也就是说当broker所在的服务器突然宕机，则会丢失部分页的消息。即使broker设置了同步刷盘，如果主broker磁盘损坏，也是会导致消息丢失。 因此可以给broker指定slave，同时设置master为SYNC_MASTER，然后将slave设置为同步刷盘策略。</p>
<p>此模式下，producer每发送一条消息，都会等消息投递到master和slave都落盘成功了，broker才会当作消息投递成功，保证休息不丢失。</p>
<h3 id="32kafka和rocketmq有啥区别">32.kafka和rocketmq有啥区别？</h3>
<p><code>相同之处</code><br>
两者底层原理有很多相似之处，RocketMQ借鉴了Kafka的设计。<br>
两者均利用了操作系统Page Cache的机制，同时尽可能通过顺序io降低读写的随机性，将读写集中在很小的范围内，减少缺页中断，进而减少了对磁盘的访问，提高了性能。</p>
<p><code>不同之处</code></p>
<ol>
<li>存储形式<br>
Kafka采用partition，每个topic的每个partition对应一个文件。顺序写入，定时刷盘。但一旦单个broker的partition过多，则顺序写将退化为随机写，Page Cache脏页过多，频繁触发缺页中断，性能大幅下降。<br>
RocketMQ采用CommitLog+ConsumeQueue，单个broker所有topic在CommitLog中顺序写，Page Cache只需保持最新的页面即可。同时每个topic下的每个queue都有一个对应的ConsumeQueue文件作为索引。ConsumeQueue占用Page Cache极少，刷盘影响较小。</li>
<li>存储可靠性<br>
RocketMQ支持异步刷盘，同步刷盘，同步Replication，异步Replication。<br>
Kafka使用异步刷盘，异步Replication。</li>
<li>顺序消息<br>
Kafka和RocketMQ都仅支持单topic分区有序。RocketMQ官方虽宣称支持严格有序，但方式为使用单个分区。</li>
<li>延时消息<br>
RocketMQ支持固定延时等级的延时消息，等级可配置。<br>
kfaka不支持延时消息。</li>
<li>消息重复<br>
RocketMQ仅支持At Least Once。<br>
Kafka支持At Least Once、Exactly Once。</li>
<li>消息过滤<br>
RocketMQ执行过滤是在Broker端，支持tag过滤及自定义过滤逻辑。<br>
Kafka不支持Broker端的消息过滤，需要在消费端自定义实现。</li>
<li>消息失败重试<br>
RocketMQ支持定时重试，每次重试间隔逐渐增加。<br>
Kafka不支持重试。</li>
<li>DLQ（dead letter queue）<br>
RocketMQ通过DLQ来记录所有消费失败的消息。<br>
Kafka无DLQ。Spring等第三方工具有实现，方式为将失败消息写入一个专门的topic。</li>
<li>回溯消费<br>
RocketMQ支持按照时间回溯消费，实现原理与Kafka相同。<br>
Kafka需要先根据时间戳找到offset，然后从offset开始消费。</li>
<li>事务<br>
RocketMQ支持事务消息，采用二阶段提交+broker定时回查。但也只能保证生产者与broker的一致性，broker与消费者之间只能单向重试。即保证的是最终一致性。<br>
Kafka从0.11版本开始支持事务消息，除支持最终一致性外，还实现了消息Exactly Once语义（单个partition）。</li>
<li>服务发现<br>
RocketMQ自己实现了namesrv。<br>
Kafka使用ZooKeeper。</li>
<li>高可用<br>
RocketMQ在高可用设计上粒度只控制在Broker。其保证高可用是通过master-slave主从复制来解决的。<br>
Kafka控制高可用的粒度是放在分区上。每个topic的leader分区和replica分区都可以在所有broker上负载均衡的存储。</li>
</ol>
<h3 id="33rocketmq发现丢消息了怎么办">33.rocketmq发现丢消息了怎么办？</h3>
<ol>
<li>生产者（Producer） 通过网络发送消息给 Broker，当 Broker 收到之后，将会返回确认响应信息给 Producer。所以生产者只要接收到返回的确认响应，就代表消息在生产阶段未丢失。</li>
<li>Broker 端不丢消息，保证消息的可靠性，我们需要将消息保存机制修改为同步刷盘方式，即消息存储磁盘成功，才会返回响应。</li>
<li>，Broker 通常采用一主（master）多从（slave）部署方式。为了保证消息不丢失，消息还需要复制到 slave 节点。采用同步的复制方式，master 节点将会同步等待 slave 节点复制完成，才会返回确认响应。</li>
<li>Broker 未收到消费确认响应或收到其他状态，消费者下次还会再次拉取到该条消息，进行重试。这样的方式有效避免了消费者消费过程发生异常，或者消息在网络传输中丢失的情况。</li>
</ol>
<h2 id="redis">Redis</h2>
<h3 id="34redisredis的使用场景redis为什么这么快">34.[redis]Redis的使用场景，redis为什么这么快？</h3>
<ol>
<li>基于内存实现<br>
Redis是基于内存存储实现的数据库，相对于数据存在磁盘的数据库，就省去磁盘磁盘I/O的消耗。</li>
<li>高效的数据结构</li>
<li>合理的线程模型<br>
Redis是单线程的，其实是指Redis的网络IO和键值对读写是由一个线程来完成的。但Redis的其他功能，比如持久化、异步删除、集群数据同步等等，实际是由额外的线程执行的。</li>
<li>I/O 多路复用<br>
I/O ：网络 I/O；多路 ：多个网络连接；复用：复用同一个线程。IO多路复用其实就是一种同步IO模型，它实现了一个线程可以监视多个文件句柄；一旦某个文件句柄就绪，就能够通知应用程序进行相应的读写操作；而没有文件句柄就绪时,就会阻塞应用程序，交出cpu。<br>
多路I/O复用技术可以让单个线程高效的处理多个连接请求，而Redis使用用epoll作为I/O多路复用技术的实现。并且Redis自身的事件处理模型将epoll中的连接、读写、关闭都转换为事件，不在网络I/O上浪费过多的时间。</li>
<li>虚拟内存机制</li>
</ol>
<h3 id="35rediskeys-是如何工作的scan是如何工作的">35.[redis]keys * 是如何工作的，scan是如何工作的</h3>
<p><code>keys *</code><br>
keys命令的原理就是扫描整个redis里面所有的db的key数据，然后根据我们的通配的字符串进行模糊查找出来。更为致命的是，这个命令会阻塞redis多路复用的io主线程，如果这个线程阻塞，在此执行之间其他的发送向redis服务端的命令，都会阻塞，从而引发一系列级联反应，导致瞬间响应卡顿，从而引发超时等问题，所以应该在生产环境禁止用使用keys和类似的命令smembers，这种时间复杂度为O（N），且会阻塞主线程的命令，是非常危险的。</p>
<p><code>scan</code><br>
Redis使用了Hash表作为底层实现，原因不外乎高效且实现简单。Redis底层key的存储结构就是类似于HashMap那样数组+链表的结构。其中第一维的数组大小为2n(n&gt;=0)。每次扩容数组长度扩大一倍。<br>
scan命令就是对这个一维数组进行遍历。每次返回的游标值也都是这个数组的索引。limit参数表示遍历多少个数组的元素，将这些元素下挂接的符合条件的结果都返回。因为每个元素下挂接的链表大小不同，所以每次返回的结果数量也就不同。</p>
<p>scan命令的时间复杂度虽然也是O(N)，但它是分次进行的，不会阻塞线程。<br>
scan命令提供了limit参数，可以控制每次返回结果的最大条数。</p>
<h3 id="37redisredis46-线程模型文件事件处理器">37.[redis]Redis4/6 线程模型（文件事件处理器）</h3>
<p>redis6.0之前线程模型：<br>
<img src="https://q456qq520.github.io/post-images/1676541394703.png" alt="" loading="lazy"></p>
<p>由于 Redis 是单线程来处理命令的，所有每一条到达服务端的命令不会立刻执行，所有的命令都会进入一个 Socket 队列中，当 socket 可读则交给单线程事件分发器逐个被执行。</p>
<p>redis支持多线程主要就是两个原因：</p>
<ol>
<li>可以充分利用服务器 CPU 资源，目前主线程只能利用一个核</li>
<li>多线程任务可以分摊 Redis 同步 IO 读写负荷</li>
</ol>
<p>Redis6.0的多线程默认是禁用的，只使用主线程。如需开启需要修改redis.conf配置文件：<code>io-threads-do-reads yes</code><br>
开启多线程后，还需要设置线程数，否则是不生效的。同样修改redis.conf配置文件。关于线程数的设置，官方有一个建议：4 核的机器建议设置为 2 或 3 个线程，8核的建议设置为 6 个线程，线程数一定要小于机器核数。线程数并不是越大越好，官方认为超过了 8 个基本就没什么意义了。</p>
<p>Redis6.0多线程的实现机制？流程如下：<br>
主线程获取 socket 放入等待列表<br>
将 socket 分配给各个 IO 线程（并不会等列表满）<br>
主线程阻塞等待 IO 线程（多线程）读取 socket 完毕<br>
主线程执行命令 - 单线程（如果命令没有接收完毕，会等 IO 下次继续）<br>
主线程阻塞等待 IO 线程（多线程）将数据回写 socket 完毕（一次没写完，会等下次再写）<br>
解除绑定，清空等待队列</p>
<p><strong>需要注意的是，Redis 多 IO 线程模型只用来处理网络读写请求，对于 Redis 的读写命令，依然是单线程处理。</strong></p>
<figure data-type="image" tabindex="7"><img src="https://q456qq520.github.io/post-images/1676541918506.png" alt="" loading="lazy"></figure>
<h3 id="38redis数据结构string-list-hash-set-zset-位图-hyperlogloguv-布隆过滤器">38.[redis]数据结构：String、List、Hash、Set、ZSet、位图、HyperLogLog(uv)、布隆过滤器</h3>
<p>5 种基础数据结构 ：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。<br>
3 种特殊数据结构 ：HyperLogLogs（基数统计）、Bitmap （位存储）、Geospatial (地理位置)。<br>
<code>String类型</code><br>
String 是最基本的 key-value 结构，key 是唯一标识，value 是具体的值，value其实不仅是字符串， 也可以是数字（整数或浮点数），value 最多可以容纳的数据长度是 512M。</p>
<p><code>Hash</code><br>
Hash 是一个键值对（key-value）集合，其中 value 的形式如： <code>value=[{field1，value1}，...{fieldN，valueN}]</code>。Hash 特别适合用于存储对象。Hash 类型的底层数据结构是由压缩列表或哈希表实现的。</p>
<p><code>List</code><br>
List 列表是简单的字符串列表，按照插入顺序排序，可以从头部或尾部向 List 列表添加元素。<br>
列表的最大长度为 2^32 - 1，也即每个列表支持超过 40 亿个元素。List 类型的底层数据结构是由双端链表或压缩列表实现的。<br>
<img src="https://q456qq520.github.io/post-images/1676600145675.png" alt="" loading="lazy"></p>
<p>如果列表的元素个数小于 512 个（默认值，可由 list-max-ziplist-entries 配置），列表每个元素的值都小于 64 字节（默认值，可由 list-max-ziplist-value 配置），Redis 会使用压缩列表作为 List 类型的底层数据结构；<br>
如果列表的元素不满足上面的条件，Redis 会使用双端链表作为 List 类型的底层数据结构；</p>
<p><code>set</code><br>
Set 类型是一个无序并唯一的键值集合，它的存储顺序不会按照插入的先后顺序进行存储。<br>
一个集合最多可以存储 2^32-1 个元素。概念和数学中个的集合基本类似，可以交集，并集，差集等等，所以 Set 类型除了支持集合内的增删改查，同时还支持多个集合取交集、并集、差集。<br>
Set 类型的底层数据结构是由哈希表或整数集合实现的。</p>
<p><code>zset</code><br>
Zset 类型（有序集合类型）相比于 Set 类型多了一个排序属性 score（分值），对于有序集合 ZSet 来说，每个存储元素相当于有两个值组成的，一个是有序结合的元素值，一个是排序值。<br>
有序集合保留了集合不能有重复成员的特性（分值可以重复），但不同的是，有序集合中的元素可以排序。<br>
<img src="https://q456qq520.github.io/post-images/1676600392146.png" alt="" loading="lazy"></p>
<p>Zset 类型的底层数据结构是由压缩列表或跳表实现的。</p>
<p>如果有序集合的元素个数小于 128 个，并且每个元素的值小于 64 字节时，Redis 会使用压缩列表作为 Zset 类型的底层数据结构；<br>
如果有序集合的元素不满足上面的条件，Redis 会使用跳表作为 Zset 类型的底层数据结构；</p>
<p><code>HyperLogLog</code><br>
HyperLogLog 是用来做基数统计的算法，即对集合去重元素的计数</p>
<p>在输入元素的数量不超过2^64个，计算基数所需的内存最多12KB，该结构使用一种近似值算法，标准误差0.81%。</p>
<p><code>位图</code><br>
位图，即大量bit组成的一个数据结构(每个bit只能是0和1)。Redis 的位图（bitmap）是由多个二进制位组成的数组，数组中的每个二进制位都有与之对应的偏移量（从 0 开始），通过这些偏移量可以对位图中指定的一个或多个二进制位进行操作。<br>
<img src="https://q456qq520.github.io/post-images/1676601290789.png" alt="" loading="lazy"></p>
<p>BitMap 的基本原理就是用一个 bit 来标记某个元素对应的 Value，而 Key 即是该元素。由于采用一 个bit 来存储一个数据，因此可以大大的节省空间。</p>
<p><code>布隆过滤器</code><br>
布隆过滤器：一种数据结构，是由一串很长的二进制向量组成，可以将其看成一个二进制数组。既然是二进制，那么里面存放的不是0，就是1，但是初始默认值都是0。</p>
<p>当一个元素加入布隆过滤器中的时候，会进行如下操作：</p>
<ol>
<li>使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。</li>
<li>根据得到的哈希值，在位数组中把对应下标的值置为 1。</li>
</ol>
<p>当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行如下操作：</p>
<ol>
<li>对给定元素再次进行相同的哈希计算；</li>
<li>得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，<br>
如果存在一个值不为 1，说明该元素不在布隆过滤器中。</li>
</ol>
<h3 id="39redis内部编码sdsintlinkedlistziplistquicklistinsetskiplistdict">39.[redis]内部编码：sds，int，linkedList，ziplist，quickList，inset，skiplist，dict</h3>
<p>在Redis中有一个「核心的对象」叫做redisObject ，是用来表示所有的key和value的，用redisObject结构体来表示String、Hash、List、Set、ZSet五种数据类型。在redisObject中「type表示属于哪种数据类型，encoding表示该数据的存储方式」，也就是底层的实现的该数据类型的数据结构。<br>
<img src="https://q456qq520.github.io/post-images/1676599283431.png" alt="" loading="lazy"><br>
<code>SDS</code><br>
String 类型的底层的数据结构实现主要是 int 和 SDS（简单动态字符串）。字符串对象的内部编码有三种int、raw、embst。</p>
<ol>
<li>如果一个字符串对象保存的是整数值，并且这个整数值可以用 long 类型来表示，那么字符串对象会将整数值保存在字符串对象结构的 ptr 属性里面（将 void* 转换成 long），并将字符串对象的编码设置为 int。</li>
<li>如果字符串对象保存的是一个字符串，并且这个字符串的长度小于等于 32 字节（redis 2.+ 版本），那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串，并将对象的编码设置为 embstr， embstr 编码是专门用于保存短字符串的一种优化编码方式：</li>
<li>如果字符串对象保存的是一个字符串，并且这个字符串的长度大于 32 字节（redis 2.+ 版本），那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串，并将对象的编码设置为 raw：</li>
</ol>
<p>SDS称为「简单动态字符串」，对于SDS中的定义在Redis的源码中有的三个属性int len、int free、char buf[]。len保存了字符串的长度，free表示buf数组中未使用的字节数量，buf数组则是保存字符串的每一个字符元素。<br>
因此当你在Redsi中存储一个字符串Hello时，根据Redis的源代码的描述可以画出SDS的形式的redisObject结构图如下图所示：<br>
<img src="https://q456qq520.github.io/post-images/1676603471646.png" alt="" loading="lazy"></p>
<ol>
<li>SDS提供「空间预分配」和「惰性空间释放」两种策略。在为字符串分配空间时，分配的空间比实际要多，这样就能「减少连续的执行字符串增长带来内存重新分配的次数」。<br>
当字符串被缩短的时候，SDS也不会立即回收不适用的空间，而是通过free属性将不使用的空间记录下来，等后面使用的时候再释放。</li>
<li>SDS是二进制安全的，除了可以储存字符串以外还可以储存二进制文件（如图片、音频，视频等文件的二进制数据）</li>
<li>SDS会先根据len属性判断空间是否满足要求，若是空间不够，就会进行相应的空间扩展，所以不会出现缓冲区溢出的情况。</li>
<li>Redis中获取字符串长度只要读取len的值就可，时间复杂度变为O(1)</li>
</ol>
<p><code>int</code><br>
Redis中规定假如存储的是「整数型值」，比如set num 123这样的类型，就会使用 int的存储方式进行存储，在redisObject的ptr属性中就会保存该值。</p>
<p><code>linkedlist</code><br>
linkedlist即经典的双链表，双端链表是 Redis 的列表键的底层实现之一。Redis在实现链表的时候，定义其为双端无环链表。<br>
list 结构为链表提供了表头指针 head, 表尾指针 tail, 以及链表长度的计数器 len 来方便的对链表进行一个双端的遍历，或者查看链表长度。<br>
<img src="https://q456qq520.github.io/post-images/1676604379662.png" alt="" loading="lazy"><br>
<code>ziplist</code><br>
压缩列表（ziplist）是一组连续内存块组成的顺序的数据结构，压缩列表能够节省空间，压缩列表中使用多个节点来存储数据。<br>
压缩列表是列表键和哈希键底层实现的原理之一，压缩列表并不是以某种压缩算法进行压缩存储数据，而是它表示一组连续的内存空间的使用，节省空间，压缩列表的内存结构图如下：<br>
<img src="https://q456qq520.github.io/post-images/1676603715501.png" alt="" loading="lazy"><br>
压缩列表中每一个节点表示的含义如下所示：</p>
<p>zlbytes：4个字节的大小，记录压缩列表占用内存的字节数。zltail：4个字节大小，记录表尾节点距离起始地址的偏移量，用于快速定位到尾节点的地址。zllen：2个字节的大小，记录压缩列表中的节点数。entry：表示列表中的每一个节点。zlend：表示压缩列表的特殊结束符号'0xFF'。</p>
<p>再压缩列表中每一个entry节点又有三部分组成，包括previous_entry_ength、encoding、content。<br>
previous_entry_ength表示前一个节点entry的长度，可用于计算前一个节点的其实地址，因为他们的地址是连续的。encoding：这里保存的是content的内容类型和长度。content：content保存的是每一个节点的内容。</p>
<p><code>quickList</code><br>
QuickList是一个节点为 ZipList 的双端链表，节点采用 ZipList ，解决了传统链表的内存占用问题，控制了 ZipList 大小，解决连续内存空间申请效率问题，中间节点可以压缩，进一步节省了内存<br>
<img src="https://q456qq520.github.io/post-images/1676604517170.png" alt="" loading="lazy"><br>
<code>inset</code><br>
intset 是 set 集合的一种实现方式，基于整数数组来实现，并且具备长度可变、有序等特征，底层采用二分查找方式来查询。<br>
<code>skiplist</code><br>
skiplist也叫做「跳跃表」，跳跃表是一种有序的数据结构，它通过每一个节点维持多个指向其它节点的指针，从而达到快速访问的目的。<br>
skiplist由如下几个特点：</p>
<ol>
<li>有很多层组成，由上到下节点数逐渐密集，最上层的节点最稀疏，跨度也最大。</li>
<li>每一层都是一个有序链表，只扫包含两个节点，头节点和尾节点。</li>
<li>每一层的每一个每一个节点都含有指向同一层下一个节点和下一层同一个位置节点的指针。</li>
<li>如果一个节点在某一层出现，那么该以下的所有链表同一个位置都会出现该节点。<br>
<img src="https://q456qq520.github.io/post-images/1676604124705.png" alt="" loading="lazy"><br>
在跳跃表的结构中有head和tail表示指向头节点和尾节点的指针，能后快速的实现定位。level表示层数，len表示跳跃表的长度，BW表示后退指针，在从尾向前遍历的时候使用。BW下面还有两个值分别表示分值（score）和成员对象（各个节点保存的成员对象）。<br>
跳跃表的实现中，除了最底层的一层保存的是原始链表的完整数据，上层的节点数会越来越少，并且跨度会越来越大。跳跃表的上面层就相当于索引层，都是为了找到最后的数据而服务的，数据量越大，条表所体现的查询的效率就越高，和平衡树的查询效率相差无几。</li>
</ol>
<p><code>dict</code><br>
键与值的映射关系正是通过 Dict 来实现的。是 set 和 hash 的实现方式之一。Dict 由三部分组成，分别是：哈希表（DictHashTable）、哈希节点（DictEntry）、字典（Dict）</p>
<p>当我们向 Dict 添加键值对时，Redis 首先根据 key 计算出 hash 值（h），然后利用 h &amp; sizemask 来计算元素应该存储到数组中的哪个索引位置。</p>
<h3 id="40redis持久化方式aof-rdb-混合">40.[redis]持久化方式：AOF、RDB、混合</h3>
<p><code>RDB</code><br>
RDB是一种快照存储持久化方式，具体就是将Redis某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为dump.rdb，而在Redis服务器启动时，会重新加载dump.rdb文件的数据到内存当中恢复数据。<br>
当客户端向服务器发送save命令请求进行持久化时，服务器会阻塞save命令之后的其他客户端的请求，直到数据同步完成。与save命令不同，bgsave命令是一个异步操作。当客户端发服务发出bgsave命令时，Redis服务器主进程会forks一个子进程来数据同步问题，在将数据保存到rdb文件之后，子进程会退出。</p>
<p><code>AOF</code><br>
AOF持久化方式会记录客户端对服务器的每一次写操作命令，并将这些写操作以Redis协议追加保存到以后缀为aof文件末尾，在Redis服务器重启时，会加载并运行aof文件的命令，以达到恢复数据的目的。</p>
<p>三种写入策略：</p>
<ol>
<li>always，客户端的每一个写操作都保存到aof文件当，这种策略很安全，但是每个写请注都有IO操作，所以也很慢。</li>
<li>everysec，appendfsync的默认写入策略，每秒写入一次aof文件，因此，最多可能会丢失1s的数据。</li>
<li>no，Redis服务器不负责写入aof，而是交由操作系统来处理什么时候写入aof文件。更快，但也是最不安全的选择，不推荐使用。</li>
</ol>
<p><code>混合</code><br>
混合持久化方式，Redis 4.0 之后新增的方式，混合持久化是结合了 RDB 和 AOF 的优点，开启了混合持久化模式后，AOF在重写的时候，不再是单纯的将AOF缓冲区的命令写入AOF文件中，而是将重写这一刻之前的内存做RDB的快照处理，并将将RDB的快照内容和增量的AOF修改内存数据的命令放在一起，都写入AOF，新的文件一开始不叫appendonly.aof，等到重写完新的AOF文件才会进行改名，覆盖原有的AOF文件，完成新旧AOF文件的交替。恢复的时候可以先加载AOF文件中RDB的部分，再根据命令还原剩余部分。这样对于数据恢复的效率和安全性都能够得到保障。</p>
<blockquote>
<p>aof-use-rdb-preamble yes</p>
</blockquote>
<h3 id="41redis持久化方式aof-rdb-优缺点原理">41.[redis]持久化方式：AOF、RDB 优缺点，原理</h3>
<p><code>RDB 方式的优点</code></p>
<ol>
<li>RDB 是一个非常紧凑的文件,它保存了某个时间点的数据集,非常适用于数据集的备份</li>
<li>RDB 是一个紧凑的单一文件,很方便传送到另一个远端数据中心，非常适用于灾难恢复。</li>
<li>RDB 在保存 RDB 文件时父进程唯一需要做的就是 fork 出一个子进程,接下来的工作全部由子进程来做，父进程不需要再做其他 IO 操作，这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益，所以 RDB 持久化方式可以最大化 Redis 的性能。</li>
<li>与AOF相比,在恢复大的数据集的时候，RDB 方式会更快一些。<br>
<code>RDB 方式的缺点</code></li>
<li>如果你希望在 Redis 意外停止工作（例如电源中断）的情况下丢失的数据最少的话，那么 RDB 不适合你.虽然你可以配置不同的save时间点(例如每隔 5 分钟并且对数据集有 100 个写的操作),是 Redis 要完整的保存整个数据集是一个比较繁重的工作,你通常会每隔5分钟或者更久做一次完整的保存,万一在 Redis 意外宕机,你可能会丢失几分钟的数据。</li>
<li>RDB 需要经常 fork 子进程来保存数据集到硬盘上,当数据集比较大的时候, fork 的过程是非常耗时的,可能会导致 Redis 在一些毫秒级内不能响应客户端的请求。<br>
<code>AOF 方式的优点</code></li>
<li>AOF文件是一个只进行追加的日志文件,所以不需要写入seek,即使由于某些原因(磁盘空间已满，写的过程中宕机等等)未执行完整的写入命令,你也也可使用redis-check-aof工具修复这些问题。</li>
<li>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。</li>
<li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。</li>
<li>你可以使用不同的 fsync 策略：无 fsync、每秒 fsync 、每次写的时候 fsync .使用默认的每秒 fsync 策略, Redis 的性能依然很好( fsync 是由后台线程进行处理的,主线程会尽力处理客户端请求),一旦出现故障，你最多丢失1秒的数据。</li>
</ol>
<p><code>AOF 方式的缺点</code></p>
<ol>
<li>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。</li>
<li>根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。<br>
<img src="https://q456qq520.github.io/post-images/1676605399216.png" alt="" loading="lazy"></li>
</ol>
<h3 id="42redis过期策略定期删除惰性删除从库的过期策略">42.[redis]过期策略：定期删除，惰性删除，从库的过期策略</h3>
<p>常见的删除策略：</p>
<ol>
<li>定时删除<br>
在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即执行对键的删除操作。<br>
定时删除策略可以保证过期键尽可能快地被删除，并释放过期键占用的内存。</li>
</ol>
<p>因此，定时删除策略的优缺点如下所示：<br>
优点：对内存非常友好<br>
缺点：对CPU时间非常不友好，如果服务器创建大量的定时器，服务器处理命令请求的性能就会降低<br>
Redis不支持定时策略。</p>
<ol start="2">
<li>惰性删除<br>
放任过期键不管，每次从键空间中获取键时，检查该键是否过期，如果过期，就删除该键，如果没有过期，就返回该键。惰性删除策略只会在获取键时才对键进行过期检查，不会在删除其它无关的过期键花费过多的CPU时间。<br>
惰性删除策略的优缺点如下所示：<br>
优点：对CPU时间非常友好<br>
缺点：对内存非常不友好</li>
</ol>
<p>举个例子，如果数据库有很多的过期键，而这些过期键又恰好一直没有被访问到，那这些过期键就会一直占用着宝贵的内存资源，造成资源浪费。</p>
<p>过期键的惰性删除策略由<code>expireIfNeeded</code>函数实现，所有读写数据库的Redis命令在执行之前都会调用expireIfNeeded函数对输入键进行检查：</p>
<ul>
<li>如果输入键已经过期，那么将输入键从数据库中删除</li>
<li>如果输入键未过期，那么不做任何处理</li>
</ul>
<ol start="3">
<li>定期删除<br>
每隔一段时间，程序对数据库进行一次检查，删除里面的过期键，至于要删除哪些数据库的哪些过期键，则由算法决定。<br>
定期删除策略每隔一段时间执行一次删除过期键操作，并通过限制删除操作执行的时长和频率来减少删除操作对CPU时间的影响，同时，通过定期删除过期键，也有效地减少了因为过期键而带来的内存浪费。</li>
</ol>
<p>过期键的定期删除策略由<code>activeExpireCycle</code>函数实现，每当Redis服务器的周期性操作<code>serverCron</code>函数执行时，activeExpireCycle函数就会被调用，它在规定的时间内，分多次遍历服务器中的各个数据库，从数据库的expires字典中随机检查一部分键的过期时间，并删除其中的过期键。</p>
<p><code>从库过期策略</code><br>
在主从复制模式下，从服务器的过期键删除动作由主服务器控制：</p>
<ol>
<li>主服务器在删除一个过期键后，会显式地向所有从服务器发送一个DEL命令，告知从服务器删除这个过期键。</li>
<li>从服务器在执行客户端发送的读命令时，即使发现该键已过期也不会删除该键，照常返回该键的值。</li>
<li>从服务器只有接收到主服务器发送的DEL命令后，才会删除过期键。</li>
</ol>
<p><code>RDB对过期键的处理</code><br>
在执行SAVE命令或者BGSAVE命令创建一个新的RDB文件时，程序会对数据库中的键进行检查，已过期的键不会被保存到新创建的RDB文件中。如果服务器以主服务器模式运行，在载入RDB文件时，程序会对文件中保存的键进行检查，未过期的键会被载入到数据库中，过期键会被忽略。如果服务器以从服务器模式运行，在载入RDB文件时，文件中保存的所有键，不论是否过期，都会被载入到数据库中。<br>
<code>AOF对过期键的处理</code><br>
如果数据库中的某个键已经过期，并且服务器开启了AOF持久化功能，当过期键被惰性删除或者定期删除后，程序会向AOF文件追加一条DEL命令，显式记录该键已被删除。<br>
举个例子，如果客户端执行命令GET message访问已经过期的message键，那么服务器将执行以下3个动作：</p>
<ul>
<li>从数据库中删除message键</li>
<li>追加一条DEL message命令到AOF文件</li>
<li>向执行GET message命令的客户端返回空回复<br>
在执行AOF文件重写时，程序会对数据库中的键进行检查，已过期的键不会被保存到重写后的AOF文件中。</li>
</ul>
<h3 id="43redis内存淘汰策略拒绝有过期时间无过期时间随机-快过期的">43.[redis]内存淘汰策略：拒绝，有过期时间/无过期时间；随机、快过期的</h3>
<ol>
<li>noeviction: 当内存不足以容纳新写入数据时，新写入操作会报错。默认策略。</li>
<li>allkeys-lru：当内存不足以容纳新写入数据时，在键空间（server.db[i].dict）中，移除最近最少使用的 key（这个是最常用的）。</li>
<li>allkeys-lfu：在所有的数据中淘汰使用使用频率最低的数据。</li>
<li>allkeys-random：当内存不足以容纳新写入数据时，在键空间（server.db[i].dict）中，随机移除某个 key。</li>
<li>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间（server.db[i].expires）中，移除最近最少使用的 key。</li>
<li>volatile-lfu：在设置过期时间的数据中淘汰使用频率最低的数据。</li>
<li>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间（server.db[i].expires）中，随机移除某个 key。</li>
<li>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间（server.db[i].expires）中，有更早过期时间的 key 优先移除。</li>
</ol>
<h3 id="44redis部署模式-主从哨兵集群模式">44.[redis]部署模式。主从，哨兵，集群模式</h3>
<p><code>主从模式</code><br>
redis 多机器部署时，这些机器节点会被分成两类，一类是主节点（master 节点），一类是从节点（slave 节点）。一般主节点可以进行读、写操作，而从节点只能进行读操作。同时由于主节点可以写，数据会发生变化，当主节点的数据发生变化时，会将变化的数据同步给从节点，这样从节点的数据就可以和主节点的数据保持一致了。一个主节点可以有多个从节点，但是一个从节点会只会有一个主节点，也就是所谓的一主多从结构。<br>
<img src="https://q456qq520.github.io/post-images/1676618817839.png" alt="" loading="lazy"><br>
优点：</p>
<ol>
<li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离;</li>
<li>为了分载 Master 的读操作压力，Slave 服务器可以为客户端提供只读操作的服务，写服务依然必须由 Master 来完成;</li>
<li>Slave 同样可以接受其他 Slaves 的连接和同步请求，这样可以有效地分载 Master 的同步压力;</li>
<li>Master 是以非阻塞的方式为 Slaves 提供服务。所以在 Master-Slave 同步期间，客户端仍然可以提交查询或修改请求;</li>
<li>Slave 同样是以阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis 则返回同步之前的数据。</li>
</ol>
<p>缺点：</p>
<ol>
<li>Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的 IP 才能恢复;</li>
<li>主机宕机，宕机前有部分数据未能及时同步到从机，切换 IP 后还会引入数据不一致的问题，降低了系统的可用性;</li>
<li>如果多个 Slave 断线了，需要重启的时候，尽量不要在同一时间段进行重启。因为只要 Slave 启动，就会发送 sync 请求和主机全量同步，当多个 Slave 重启的时候，可能会导致 Master IO 剧增从而宕机。</li>
<li>Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂;</li>
<li>redis 的主节点和从节点中的数据是一样的，降低的内存的可用性</li>
</ol>
<p><code>哨兵模式</code><br>
在主从模式下，redis 同时提供了哨兵命令redis-sentinel，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵进程向所有的 redis 机器发送命令，等待 Redis 服务器响应，从而监控运行的多个 Redis 实例。<br>
哨兵可以有多个，一般为了便于决策选举，使用奇数个哨兵。哨兵可以和 redis 机器部署在一起，也可以部署在其他的机器上。多个哨兵构成一个哨兵集群，哨兵直接也会相互通信，检查哨兵是否正常运行，同时发现 master 宕机哨兵之间会进行决策选举新的 master<br>
<img src="https://q456qq520.github.io/post-images/1676618828608.png" alt="" loading="lazy"><br>
哨兵模式的作用:</p>
<ol>
<li>通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器;</li>
<li>当哨兵监测到 master 宕机，会自动将 slave 切换到 master，然后通过发布订阅模式通过其他的从服务器，修改配置文件，让它们切换主机;</li>
<li>然而一个哨兵进程对 Redis 服务器进行监控，也可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</li>
</ol>
<p>优点</p>
<ol>
<li>哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。</li>
<li>主从可以自动切换，系统更健壮，可用性更高。</li>
</ol>
<p>缺点</p>
<ol>
<li>具有主从模式的缺点，每台机器上的数据是一样的，内存的可用性较低。</li>
<li>Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</li>
</ol>
<p><code>集群模式</code><br>
redis3.0 上加入了 Cluster 集群模式，实现了 Redis 的分布式存储，对数据进行分片，也就是说每台 Redis 节点上存储不同的内容，Redis 的集群模式本身没有使用一致性 hash 算法，而是使用 slots 插槽。<br>
<img src="https://q456qq520.github.io/post-images/1676618835508.png" alt="" loading="lazy"><br>
优点</p>
<ol>
<li>采用去中心化思想，数据按照 slot 存储分布在多个节点，节点间数据共享，可动态调整数据分布;</li>
<li>可扩展性：可线性扩展到 1000 多个节点，节点可动态添加或删除;</li>
<li>高可用性：部分节点不可用时，集群仍可用。通过增加 Slave 做 standby 数据副本，能够实现故障自动 failover，节点之间通过 gossip 协议交换状态信息，用投票机制完成 Slave 到 Master 的角色提升;</li>
<li>降低运维成本，提高系统的扩展性和可用性。</li>
</ol>
<p>缺点</p>
<ol>
<li>Redis Cluster 是无中心节点的集群架构，依靠 Goss 协议(谣言传播)协同自动化修复集群的状态<br>
但 GosSIp 有消息延时和消息冗余的问题，在集群节点数量过多的时候，节点之间需要不断进行 PING/PANG 通讯，不必须要的流量占用了大量的网络资源。</li>
<li>数据迁移问题<br>
Redis Cluster 可以进行节点的动态扩容缩容，这一过程，在目前实现中，还处于半自动状态，需要人工介入。在扩缩容的时候，需要进行数据迁移。<br>
而 Redis 为了保证迁移的一致性，迁移所有操作都是同步操作，执行迁移时，两端的 Redis 均会进入时长不等的阻塞状态，对于小 Key，该时间可以忽略不计，但如果一旦 Key 的内存使用过大，严重的时候会接触发集群内的故障转移，造成不必要的切换。</li>
</ol>
<h3 id="45redis部署模式-主从的同步策略增量同步全量同步">45.[redis]部署模式。主从的同步策略，增量同步\全量同步</h3>
<p>当Slave需要和Master进行数据同步时：</p>
<ol>
<li>
<pre><code>Salve会发送sync命令到Master
</code></pre>
</li>
<li>
<pre><code>Master启动一个后台进程，将Redis中的数据快照保存到文件中
</code></pre>
</li>
<li>
<pre><code>启动后台进程的同时，Master会将保存数据快照期间接收到的写命令缓存起来
</code></pre>
</li>
<li>
<pre><code>Master完成写文件操作后，将该文件发送给Salve
</code></pre>
</li>
<li>
<pre><code>Salve将文件保存到磁盘上，然后加载文件到内存恢复数据快照到Salve的Redis上
</code></pre>
</li>
<li>
<pre><code>当Salve完成数据快照的恢复后，Master将这期间收集的写命令发送给Salve端
</code></pre>
</li>
<li>
<pre><code>后续Master收集到的写命令都会通过之前建立的连接，增量发送给salve端
</code></pre>
</li>
</ol>
<p><mark>主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。</mark></p>
<h3 id="46redis部署模式-哨兵模式的优点是如何工作的">46.[redis]部署模式。哨兵模式的优点，是如何工作的？</h3>
<p>Redis 哨兵模式：<br>
优点：<br>
可以监控主节点的状态，如果主节点出现故障，哨兵会自动将从节点升级为主节点，从而保证了数据的可用性。<br>
可以在不停止 Redis 服务的情况下进行节点的替换或者维护。<br>
是一种简单、高效的高可用方案。<br>
缺点：<br>
当主节点出现故障时，涉及到数据重新同步和更新操作，这样会对系统性能造成一定影响。<br>
如果所有哨兵都失效，就无法实现高可用。</p>
<p><code>哨兵的原理</code><br>
1 从库发现<br>
哨兵在连接主库之后，会调用 INFO 命令获取主库的信息，再从中解析出连接主库的从库信息，再以此和其他从库建立连接进行监控。<br>
哨兵对所有节点都会每隔 10s 发送一次 INFO 命令，从各节点获取 Redis 集群实时的拓扑图信息。如果新节点加入，哨兵就会去监控新的节点。</p>
<p>2 发布/订阅机制<br>
哨兵们在连接同一个主库之后，是通过发布/订阅（pub/sub）模式来发现彼此的存在的。哨兵们会在每个 Redis 服务上创建并订阅一个名为 <code>__sentinel__:hello</code> 的频道，哨兵们就是通过它来相互发现，实现相互通信的。<br>
订阅后，每个哨兵每隔 2 秒都会向 hello 频道发布一条携带自身信息的 hello 信息，这样哨兵就能知道其他哨兵的状态、监控的主节点和是否有新的哨兵加入：</p>
<p>3 监控<br>
哨兵在对 Redis 节点建立 TCP 连接之后，会周期性地发送 <code>PING</code> 命令给节点（默认是 1s），以此判断节点是否正常。如果在<code>down-after-millisenconds</code> 时间内没有收到节点的响应，它就认为这个节点掉线了。</p>
<p>4 主观下线<br>
当哨兵发现与自己连接的其他节点断开连接，它就会将该节点标记为主观下线（+sdown），包括主节点、从节点或者其他哨兵都可以标记为 sdown 状态。当该节点重新连接之后，哨兵会取消对它的主观下线标记，操作是 <code>-sdown</code>。如果哨兵判断从节点或者其他哨兵节点主观下线，哨兵并不会执行其他操作。如果是主节点主观下线，哨兵就要采取措施，确定主节点是否真的宕机，并执行故障转移。</p>
<p>5 客观下线<br>
哨兵确认主节点是否真的宕机这一步成为客观下线确认，如果主节点真的宕机了，哨兵就会将主节点标记为客观下线（+odown）状态。<br>
要判断主节点是否客观下线，需要与其他哨兵达成共识，如果大多数哨兵认为主节点主观下线了，哨兵才能确认主节点客观下线。达成共识的方式就是发起一轮投票，如果票数超过哨兵节点数的一半，并且大于等于 <code>quorum</code> 设置的数量，就是投票成功。否则哨兵就不能说主节点客观下线了。</p>
<p>6 客观下线投票过程</p>
<ul>
<li>当哨兵发现主节点下线，标记主节点为 <code>sdown</code> 状态。</li>
<li>哨兵向其他哨兵发送 <code>SENTINEL is-master-down-by-addr</code> 命令，询问其他哨兵该主节点是否已下线。</li>
<li>其他哨兵在收到投票请求之后，会检查本地主缓存中主节点的状态并进行回复（1 表示下线，0 表示正常）。</li>
<li>发起的询问的哨兵在接收到回复之后，会累加“下线”的得票数。</li>
<li>当下线的票数大于一半哨兵数量并且不小于 <code>quorum</code>时，就会将主节点标记为 <code>odown</code> 状态。并开始准备故障转移。</li>
<li>发起投票的哨兵有一个投票倒计时，倒计时结束如果票数仍然不够的话，则放弃本次客观线下投票。并尝试继续与主节点建立连接。</li>
</ul>
<p>7 故障转移<br>
哨兵在将主节点标记为 odown 状态之后，就会马上开始尝试故障转移了。<br>
故障转移主要由 <code>sentinelFailoverStateMachineZ(sentinelRedisInstance)</code>函数负责2。该函数由一个状态机组成，共有五个状态，标志着故障转移共分为五个大步骤：</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>WAIT_START</code></td>
<td>Leader 选举</td>
</tr>
<tr>
<td><code>SELECT_SLAVE</code></td>
<td>Master 选取</td>
</tr>
<tr>
<td><code>SEND_SLAVEOF_NOONE</code></td>
<td>Slave 身份去除</td>
</tr>
<tr>
<td><code>WAIT_PROMOTION</code></td>
<td>提升 Master</td>
</tr>
<tr>
<td><code>RECONF_SLAVES</code></td>
<td>配置从节点</td>
</tr>
</tbody>
</table>
<p>哨兵首先进入 WATI_START 状态进行准备，等待哨兵成为哨兵集群的 Leader 才有资格进行故障转移。如果在超时时间之内哨兵都没有成为 Leader，则哨兵会调用 sentinelAbortFailover() 函数并结束本次故障转移。当选 Leader 后哨兵会进入 SELECT_SLAVE 状态，选取新的主节点。当确定新的主节点后，哨兵会进入 SEND_SLAVEOF_NOONE 状态，撤销该节点的 Slave 状态。在发送指令之后，哨兵会进入 WAIT_PROMOTION 状态，等待该节点将自己提升为主节点。当节点提升为 Master 之后，哨兵会进入 RECONF_SLAVES 状态，更新所有从节点的配置，让他们去复制新的 Master。</p>
<p>当哨兵进行故障转移之后，哨兵会通知客户端主节点发生更换，让客户端去连接新的主节点。</p>
<p>哨兵同样是通过发布/订阅机制实现的客户端通知，每个连接哨兵的客户端，会去订阅哨兵的 <code>+switch-master</code> 频道，当 Leader 进行故障转移后，会向其他哨兵发送新主节点配置，然后所有哨兵都会在 <code>+switch-master</code> 频道发布主节点切换信息，此时客户端监听到变化，就会去连接新的主节点。客户端后台线程订阅 <code>+switch-master</code>频道，接收到消息之后解析并重新初始化全局主节点 <code>initMaster()</code>。</p>
<h3 id="47redis部署模式-集群模式的优点是如何分片的">47.[redis]部署模式。集群模式的优点，是如何分片的？</h3>
<p>Redis 集群模式：<br>
优点：<br>
可以提供高可用性，如果一个节点出现故障，集群自动转移到其他节点。<br>
可以大大提高 Redis 的读写性能，因为可以在不同的节点上进行数据分片。<br>
缺点：<br>
集群模式的配置相对比较复杂，不如哨兵模式简单。<br>
因为数据分片存在，所以查询数据时可能需要跨越多个节点，这样会造成一定的性能影响。</p>
<p><code>集群分片</code><br>
Redis Cluster 采用的是虚拟槽分区，一个集群共有<code>16384</code>个哈希槽，Redis Cluster会自动把这些槽平均分布在集群实例上。例如，如果集群中有 N 个实例，那么，每个实例上的槽个数为 16384/N个。每个key通过CRC16校验后对16384取模来决定放置哪个槽.集群的每个节点负责一部分hash slot。</p>
<p><code>扩容集群</code><br>
当一个 Redis 新节点运行并加入现有集群后，我们需要为其迁移槽和数据。首先要为新节点指定槽的迁移计划，确保迁移后每个节点负责相似数量的槽，从而保证这些节点的数据均匀。假设现在有集群M1，M2，M3，现在需要新增一个M4，步骤如下：</p>
<ol>
<li>首先启动一个 Redis 节点，记为 M4。</li>
<li>使用 cluster meet 命令，让新 Redis 节点加入到集群中。新节点刚开始都是主节点状态，由于没有负责的槽，所以不能接受任何读写操作，后续我们就给他迁移槽和填充数据。</li>
<li>对 M4 节点发送 cluster setslot { slot } importing { sourceNodeId} 命令，让目标节点准备导入槽的数据。</li>
<li>对源节点，也就是 M1，M2，M3 节点发送 cluster setslot { slot } migrating { targetNodeId} 命令，让源节点准备迁出槽的数据。</li>
<li>源节点执行 cluster getkeysinslot { slot } { count } 命令，获取 count 个属于槽 { slot } 的键，然后执行步骤六的操作进行迁移键值数据。</li>
<li>在源节点上执行 migrate { targetNodeIp} &quot; &quot; 0 { timeout } keys { key... } 命令，把获取的键通过 pipeline 机制批量迁移到目标节点，批量迁移版本的 migrate 命令在 Redis 3.0.6 以上版本提供。</li>
<li>重复执行步骤 5 和步骤 6 直到槽下所有的键值数据迁移到目标节点。</li>
<li>向集群内所有主节点发送 cluster setslot { slot } node { targetNodeId } 命令，通知槽分配给目标节点。为了保证槽节点映射变更及时传播，需要遍历发送给所有主节点更新被迁移的槽执行新节点。</li>
</ol>
<p><code>收缩集群</code><br>
收缩节点就是将 Redis 节点下线，整个流程需要如下操作流程。</p>
<ol>
<li>首先需要确认下线节点是否有负责的槽，如果是，需要把槽迁移到其他节点，保证节点下线后整个集群槽节点映射的完整性。原理与之前节点扩容的迁移槽过程一致。</li>
<li>当下线节点不再负责槽或者本身是从节点时，就可以通知集群内其他节点忘记下线节点，当所有的节点忘记改节点后可以正常关闭。</li>
</ol>
<p><code>客户端路由</code><br>
在集群模式下，Redis 节点接收任何键相关命令时首先计算键对应的槽，在根据槽找出所对应的节点，如果节点是自身，则处理键命令；否则回复 <code>MOVED</code> 重定向错误，通知客户端请求正确的节点。这个过程称为 MOVED 重定向。</p>
<ol>
<li>客户端根据本地 slot 缓存发送命令到源节点，如果存在键对应则直接执行并返回结果给客户端。</li>
<li>如果节点返回 MOVED 错误，更新本地的 slot 到 Redis 节点的映射关系，然后重新发起请求。</li>
<li>如果数据正在迁移中，节点会回复 ASK 重定向异常。格式如下: ( error ) ASK { slot } { targetIP } : {targetPort}</li>
<li>客户端从 ASK 重定向异常提取出目标节点信息，发送 asking 命令到目标节点打开客户端连接标识，再执行键命令。</li>
</ol>
<blockquote>
<p>默认情况下，当集群 16384 个槽任何一个没有指派到节点时整个集群不可用。执行任何键命令返回 CLUSTERDOWN Hash slot not served 命令。当持有槽的主节点下线时，从故障发现到自动完成转移期间整个集群是不可用状态，对于大多数业务无法忍受这情况，因此建议将参数 <code>cluster-require-full-coverage</code> 配置为 <code>no</code> ，当主节点故障时只影响它负责槽的相关命令执行，不会影响其他主节点的可用性。</p>
</blockquote>
<h3 id="48redishash是如何扩容的">48.[redis]hash是如何扩容的？</h3>
<p>Redis中使用哈希表作为底层实现的是叫做（dict）字典的数据结构，字典又称为符号表、关联数组或映射(map)。是一种保存键值对的抽象数据结构。</p>
<p>首先dict有四个部分组成，分别是dictType(类型),dictht（核心），rehashidx(渐进式hash的标志)，iterators（迭代器），这里面最重要的就是dictht和rehashidx。<br>
<img src="https://q456qq520.github.io/post-images/1676627209014.png" alt="" loading="lazy"></p>
<pre><code class="language-java">//字典结构体 
 typedef struct dict {
    dictType *type;//类型，包括一些自定义函数，这些函数使得key和value能够存储 
    void *privdata;//私有数据 
    dictht ht[2];//两张hash表 
    long rehashidx; //渐进式hash标记，如果为-1，说明没在进行hash
    unsigned long iterators; //正在迭代的迭代器数量
} dict;
</code></pre>
<p><code>扩容过程和渐进式Hash图解</code><br>
dictht[2]为什么会要2个数组存放，真正的数据只要一个数组就够了？<br>
随着数据量的增加，hash碰撞发生的就越频繁，每个数组后面的链表就越长，整个链表显得非常累赘。这无疑是要进行扩容，所以第一个数组存放真正的数据，第二个数组用于扩容用。</p>
<p>rehashidx其实是一个标志量，如果为-1说明当前没有扩容，如果不为-1则表示当前扩容到哪个下标位置，方便下次进行从该下标位置继续扩容。</p>
<p>扩容步骤如下：</p>
<ol>
<li>首先是未扩容前，rehashidx为-1，表示未扩容，第一个数组的dictEntry长度为4，一共有5个节点，所以used为5。<br>
<img src="https://q456qq520.github.io/post-images/1676627795645.png" alt="" loading="lazy"></li>
<li>当发生扩容了，rahashidx为第一个数组的第一个下标位置，即0。扩容之后的大小为大于used<em>2的2的n次方的最小值，即能包含这些节点</em>2的2的倍数的最小值。因为当前为5个数据节点，所以used*2=10，扩容后的数组大小为大于10的2的次方的最小值，为16。从第一个数组0下标位置开始，查找第一个元素，找到key为name，value为张三的节点，将其hash过，找到在第二个数组的下标为1的位置，将节点移过去，其实是指针的移动。<br>
<img src="https://q456qq520.github.io/post-images/1676627803033.png" alt="" loading="lazy"></li>
<li>key为name，value为张三的节点移动结束后，继续移动第一个数组dictht[0]的下标为0的后续节点，移动步骤和上面相同。<br>
<img src="https://q456qq520.github.io/post-images/1676627816371.png" alt="" loading="lazy"></li>
<li>继续移动第一个数组dictht[0]的下标为0的后续节点都移动完了，开始移动下标为1的节点，发现其没有数据，所以移动下标为2的节点，同时修改rehashidx为2，移动步骤和上面相同。<br>
<img src="https://q456qq520.github.io/post-images/1676627822899.png" alt="" loading="lazy"><br>
整个过程的重点在于rehashidx，其为第一个数组正在移动的下标位置，如果当前内存不够，或者操作系统繁忙，扩容的过程可以随时停止。</li>
</ol>
<p>停止之后如果对该对象进行操作，那是什么样子的呢？<br>
如果是新增，则直接新增后第二个数组，因为如果新增到第一个数组，以后还是要移过来，没必要浪费时间<br>
如果是删除，更新，查询，则先查找第一个数组，如果没找到，则再查询第二个数组。</p>
<h3 id="49redis性能有问题如何分析缓存一致性问题删除大key会很慢吗">49.[redis]性能有问题如何分析，缓存一致性问题，删除大key会很慢吗？</h3>
<p><code>缓存一致性问题</code><br>
把 Redis 作为缓存的时候，当数据发生改变我们需要双写来保证缓存与数据库的数据一致，重点是写操作，数据库和缓存都需要修改，而两者就会存在一个先后顺序，可能会导致数据不再一致。</p>
<p>我们需要考虑两个问题：</p>
<ul>
<li>先更新缓存还是更新数据库？</li>
<li>当数据发生变化时，选择修改缓存（update），还是删除缓存（delete）？</li>
</ul>
<p>将这两个问题排列组合，会出现四种方案：</p>
<ol>
<li>先更新缓存，再更新数据库；</li>
<li>先更新数据库，再更新缓存；</li>
<li>先删除缓存，再更新数据库；</li>
<li>先更新数据库，再删除缓存。</li>
</ol>
<p><strong>一致性解决方案</strong></p>
<ol>
<li>
<p>缓存延时双删<br>
先删除缓存、再写数据库。最后休眠 x 毫秒，再删除缓存。延迟时间的目的就是确保读请求结束，写请求可以删除读请求造成的缓存脏数据。</p>
</li>
<li>
<p>删除缓存重试机制</p>
</li>
</ol>
<blockquote>
<p>缓存删除失败怎么办？比如延迟双删的第二次删除失败，那岂不是无法删除脏数据。<br>
使用重试机制，保证删除缓存成功。</p>
</blockquote>
<ol start="3">
<li>读取 binlog 异步删除</li>
</ol>
<ul>
<li>更新数据库；</li>
<li>数据库会把操作信息记录在 binlog 日志中；</li>
<li>使用 canal 订阅 binlog 日志获取目标数据和 key；</li>
<li>缓存删除系统获取 canal 的数据，解析目标 key，尝试删除缓存。</li>
<li>如果删除失败则将消息发送到消息队列；</li>
<li>缓存删除系统重新从消息队列获取数据，再次执行删除操作。</li>
</ul>
<p><code>redis删除大key</code><br>
因为大key的删除会造成阻塞。阻塞期间，所有请求都可能造成超时，当超时越来越多，新的请求不断进来，这样会造成redis连接池耗尽，尽而引发线上各种依赖redis的业务出现异常。</p>
<p><strong>解决办法</strong></p>
<ol>
<li>低峰期删除</li>
<li>scan分批</li>
<li>异步删除
<ul>
<li>redis提供了del的替代方法unlink，当我们在unlink的时候，redis会先检查要删除元素的个数（比如集合），如果集合的元素的小于等于64个的时候，就会直接执行同步删除，因为这不算一个大key，不会浪费很多的开销，但是当超过64个的时候，redis会认为是大key的概率比较大，这时候redis会在字典里，先把key删除，真正的value会交给异步线程来操作，这样的话就不会对主线程造成任何影响。</li>
</ul>
</li>
</ol>
<p><a href="https://help.aliyun.com/document_detail/353223.html" title="发现并处理Redis的大Key和热Key">发现并处理Redis的大Key和热Key</a></p>
<h2 id="mysql">mysql</h2>
<h3 id="1-mysql的逻辑架构图一个sql是如何执行的-分析器优化器执行器存储引擎">1. Mysql的逻辑架构图，一个sql是如何执行的。分析器，优化器，执行器，存储引擎</h3>
<ol>
<li>语法分析<br>
当客户端发送一个SQL语句给MySQL服务器时，MySQL服务器会首先对这个SQL语句进行语法分析，检查语句是否符合MySQL语法规范。如果语句存在语法错误，MySQL服务器将返回相应的错误信息给客户端。</li>
<li>语义分析<br>
如果SQL语句通过了语法分析，MySQL服务器会对语句进行语义分析，检查语句中使用的数据库对象是否存在、权限是否足够等。如果语句存在语义错误，MySQL服务器将返回相应的错误信息给客户端。</li>
<li>查询优化器<br>
MySQL服务器会使用查询优化器来分析SQL语句，选择最优的执行计划。查询优化器会考虑多种因素，例如索引使用情况、表连接顺序、子查询展开等，以尽可能地提高查询性能。</li>
<li>执行计划生成<br>
查询优化器会生成一个执行计划，告诉MySQL服务器如何执行SQL语句。执行计划通常包括以下几个步骤：<br>
a. 获取数据表<br>
MySQL服务器会获取SQL语句中所涉及到的数据表，以便之后的查询操作。<br>
b. 进行数据过滤<br>
如果SQL语句包含WHERE子句，MySQL服务器会根据WHERE条件对数据进行过滤，以减少查询的数据量。<br>
c. 进行数据排序<br>
如果SQL语句包含ORDER BY子句，MySQL服务器会对查询结果进行排序，以满足排序需求。<br>
d. 进行数据聚合<br>
如果SQL语句包含GROUP BY子句，MySQL服务器会对查询结果进行聚合操作，以统计数据。<br>
e. 进行数据连接<br>
如果SQL语句包含JOIN子句，MySQL服务器会对数据表进行连接操作，以满足查询需求。</li>
<li>执行SQL语句<br>
MySQL服务器会根据执行计划，执行SQL语句并返回结果给客户端。在执行SQL语句时，MySQL服务器会使用缓存、锁机制等技术来提高查询性能和保证数据的一致性。</li>
</ol>
<h3 id="2-innodb-和-myisam-对比-支持事务行锁外键">2. InnoDB 和 MyISAM 对比。支持事务，行锁，外键。</h3>
<ol>
<li>数据库事务<br>
InnoDB支持事务处理，而MyISAM不支持。事务是数据库中非常重要的特性，它可以保证数据的完整性和一致性，而且可以实现对数据的并发访问控制。</li>
<li>表锁与行锁<br>
InnoDB使用行级锁来保证数据的并发访问，而MyISAM使用表级锁。这意味着在使用InnoDB时，多个用户可以同时访问同一张表的不同行，而在使用MyISAM时，多个用户同时访问同一张表的不同行会导致性能下降。</li>
<li>索引方式<br>
InnoDB和MyISAM的索引方式也不同。InnoDB使用B+树索引，支持自适应哈希索引和全文索引，而MyISAM使用B树索引，只支持前缀索引和全文索引。因此，在需要进行大量全文搜索的应用中，MyISAM的性能可能更优。</li>
<li>外键约束<br>
InnoDB支持外键约束，而MyISAM不支持。外键约束可以保证数据的完整性，但也会影响性能。</li>
<li>空间占用<br>
InnoDB的空间占用较大，因为它需要存储多个版本的数据，以支持事务和MVCC（多版本并发控制）。而MyISAM的空间占用较小，因为它只存储一份数据。</li>
<li>崩溃恢复<br>
InnoDB具有更好的崩溃恢复能力，可以在恢复期间自动回滚未提交的事务。而MyISAM的崩溃恢复能力较差，可能会导致数据丢失或损坏。</li>
</ol>
<p>综上所述，InnoDB和MyISAM在性能、特性、空间占用、崩溃恢复等方面都有所差异。因此，在选择存储引擎时，需要根据应用程序的特性和需求来选择合适的存储引擎。例如，如果应用程序需要支持事务处理，那么InnoDB是更好的选择；如果应用程序需要进行大量全文搜索，那么MyISAM可能更适合。</p>
<h3 id="3-buffer-pool-作用是什么">3. Buffer Pool 作用是什么？</h3>
<p>Buffer Pool是MySQL中的一个缓存池，用于存储数据表和索引的数据页，其作用是加快数据库的访问速度，提高数据库的性能和响应速度。</p>
<p>当MySQL需要读取或写入数据时，它首先会从Buffer Pool中查找所需的数据页。如果数据页已经在Buffer Pool中，则可以直接从内存中获取数据，避免了磁盘I/O操作，大大提高了数据库的访问速度。如果数据页不在Buffer Pool中，则MySQL会从磁盘中读取数据，然后将其放入Buffer Pool中，以便下次访问时可以直接从内存中获取数据。</p>
<p>通过使用Buffer Pool，MySQL可以将常用的数据表和索引数据页存储在内存中，避免了频繁的磁盘I/O操作，从而大大提高了数据库的性能和响应速度。此外，Buffer Pool还可以用于管理内存使用情况，自动调整内存分配大小，以最大限度地利用可用内存，提高数据库的并发处理能力和性能表现。</p>
<h3 id="4-buffer-pool-如何管理free链表flush链表lru链表">4. Buffer Pool 如何管理？free链表，flush链表，lru链表</h3>
<p>Buffer Pool是MySQL中的一个缓存池，用于存储数据表和索引的数据页，其管理过程包括以下几个方面：</p>
<p>内存分配：Buffer Pool需要占用一定的内存空间来存储数据页。在MySQL启动时，可以通过参数配置来设置Buffer Pool的大小，或者使用默认值。MySQL使用操作系统的内存管理机制来分配和管理Buffer Pool的内存，根据需要动态调整内存大小。</p>
<p>数据页读取和写入：当MySQL需要读取或写入数据时，它会首先检查Buffer Pool中是否存在所需的数据页。如果数据页已经在Buffer Pool中，则可以直接从内存中读取或写入数据。如果数据页不在Buffer Pool中，则需要从磁盘中读取或写入数据，然后将其放入Buffer Pool中。</p>
<p>数据页替换：Buffer Pool的大小是有限的，如果所有的数据页都已经被占满，MySQL需要从Buffer Pool中删除一些数据页，以便为新的数据页腾出空间。MySQL使用一种称为LRU（Least Recently Used，最近最少使用）的算法来管理Buffer Pool中的数据页，即删除最久未使用的数据页。</p>
<p>统计信息：MySQL会定期收集和记录Buffer Pool的统计信息，如Buffer Pool的使用情况、缓存命中率、读取和写入操作的数量等。这些统计信息可以帮助MySQL优化Buffer Pool的性能和配置，以提高数据库的性能和响应速度。</p>
<p>通过对Buffer Pool进行有效的管理和优化，可以最大限度地提高MySQL的性能和响应速度，避免磁盘I/O操作，加快数据访问速度。</p>
<p>当我们最初启动MySQL服务器的时候，需要完成对Buffer Pool的初始化过程，就是先向操作系统申请Buffer Pool的内存空间，然后把它划分成若干对控制块和缓存页。但是此时并没有真实的磁盘页被缓存到Buffer Pool中（因为还没有用到），之后随着程序的运行，会不断的有磁盘上的页被缓存到Buffer Pool中。那么问题来了，从磁盘上读取一个页到Buffer Pool中的时候该放到哪个缓存页的位置呢？或者说怎么区分Buffer Pool中哪些缓存页是空闲的，哪些已经被使用了呢？我们最好在某个地方记录一下Buffer Pool中哪些缓存页是可用的，这个时候缓存页对应的控制块就派上大用场了，我们可以把所有空闲的缓存页对应的控制块作为一个节点放到一个链表中，这个链表也可以被称作free链表（或者说空闲链表）。</p>
<p>凡是修改过的缓存页对应的控制块都会作为一个节点加入到一个链表中，因为这个链表节点对应的缓存页都是需要被刷新到磁盘上的，所以也叫flush链表。</p>
<p>在MySQL的Buffer Pool中，所有的数据页都被组织成一个双向链表，称为LRU链表。每当一个数据页被访问时，它就会被移到链表头部。当需要腾出空间时，缓存管理器会从链表尾部开始，依次删除最老的、最近最少使用的数据页，直到腾出足够的空间为止。</p>
<h3 id="5-redo-log-作用是什么">5. redo log 作用是什么？</h3>
<p>在MySQL中，Redo Log（重做日志）是一种用于保证数据持久性的机制，它可以记录所有的数据修改操作，包括对数据的插入、修改和删除等操作。</p>
<p>Redo Log的作用在于当数据库出现异常宕机或者故障时，可以通过Redo Log中的信息将未持久化的数据重新恢复到宕机前的状态，从而保证数据库的数据一致性。当MySQL启动时，会首先将Redo Log中的数据恢复到内存中，然后再读取数据文件中的数据，这样就可以保证数据的完整性和一致性。</p>
<p>具体来说，当用户对数据库进行修改时，MySQL会将修改操作记录在Redo Log中，记录的信息包括修改的数据页号、修改的位置、修改前后的值等。在执行完修改操作后，MySQL会将Redo Log中的记录持久化到磁盘中，保证数据的可靠性。在MySQL将修改操作写入磁盘之前，即使数据库出现异常宕机，也可以通过Redo Log中的信息将数据恢复到修改前的状态。</p>
<p>需要注意的是，Redo Log只记录数据的修改操作，不记录查询操作。而且，Redo Log的记录方式是追加式的，即每次写入Redo Log时都会将新的记录追加到文件的末尾，而不会覆盖已有的记录。因此，Redo Log的大小会随着数据库的使用而不断增加，需要定期清理和维护，以避免对磁盘空间的过度占用。同时，为了保证数据的可靠性，Redo Log的写入操作也需要在磁盘I/O完成后才能返回给客户端，因此对数据库的写入性能会产生一定的影响。</p>
<h3 id="6-redo-log-啥时候刷盘定时刷盘-事务提交时刷盘-checkponin时-关闭服务时">6. redo log 啥时候刷盘，定时刷盘、事务提交时刷盘、checkponin时、关闭服务时</h3>
<h3 id="7-redo-log-日志的存储数据结构-多个文件轮流写入">7. 	redo log 日志的存储数据结构。多个文件轮流写入</h3>
<h3 id="8-redo-log-日志什么时候可以清楚或者覆盖checkpoint-作用是什么">8. 	redo log 日志什么时候可以清楚或者覆盖？checkpoint 作用是什么？</h3>
<h3 id="9-系统崩溃恢复后是如何从-redo-log-中恢复数据的">9. 系统崩溃恢复后，是如何从 redo log 中恢复数据的</h3>
<h3 id="10-undo-log-作用是什么事务回滚">10. undo log 作用是什么？事务回滚</h3>
<h3 id="11-隔离级别有哪些读未提交读已提交可重复读序列化">11. 隔离级别有哪些，读未提交，读已提交，可重复读，序列化</h3>
<h3 id="12-不可重复读和幻读是如何区分">12. 不可重复读和幻读是如何区分</h3>
<p>不可重复读和幻读是两种并发读取数据时可能出现的问题，它们的区别在于对数据的修改操作。</p>
<p>不可重复读指的是，在一个事务中多次读取同一份数据，但在此过程中，其他事务修改了该数据，导致多次读取的结果不同。这种情况下，每次读取的数据都是有效的，但由于其他事务的修改，数据的值发生了改变，因此多次读取得到的结果不同。不可重复读通常可以通过MVCC机制来解决，即在读取时只能读取早于该事务ID的版本。</p>
<p>幻读指的是，在一个事务中多次读取同一份数据，但在此过程中，其他事务插入或删除了该数据，导致多次读取的结果不同。这种情况下，每次读取的数据都是有效的，但由于其他事务的插入或删除，数据的数量发生了改变，因此多次读取得到的结果不同。幻读通常可以通过锁机制来解决，即在读取时对该数据行进行加锁，以保证数据的完整性。</p>
<p>因此，不可重复读和幻读的区别在于对数据的修改操作。<mark>不可重复读是由其他事务对数据进行修改导致的，而幻读是由其他事务对数据进行插入或删除导致的</mark>。在解决这两种问题时，可以采用不同的并发控制策略，如MVCC机制和锁机制等。</p>
<h3 id="13-mvcc-作用是什么可以在哪个隔离级别下工作">13. MVCC 作用是什么？可以在哪个隔离级别下工作？</h3>
<p>MVCC（Multi-Version Concurrency Control，多版本并发控制）是一种数据库并发控制机制，常用于支持事务和保证数据的一致性。它的主要作用是在数据库支持并发读写的同时，保证读写操作的正确性和数据的一致性。</p>
<p>在MVCC机制下，每个数据行都有一个版本号，表示该数据行的历史版本。当一个事务开始时，它会获取一个唯一的事务ID，并在整个事务过程中保持不变。在写入数据时，数据库会保存一个该数据的版本号，同时在每个事务中，读取操作只能读取到早于该事务ID的版本。这样，即使多个事务并发读写同一份数据，它们读取到的都是数据的旧版本，不会互相影响，保证了数据的一致性。</p>
<p>当多个事务同时访问同一个数据行时，MVCC机制采用了两种不同的策略：一是在写操作时对该数据行进行加锁，以保证数据的正确性和一致性；二是采用乐观并发控制策略，即不对数据行进行加锁，而是在写操作提交时进行冲突检测。如果发现冲突，则回滚该事务，重新执行操作。</p>
<p>总的来说，MVCC机制可以提高数据库的并发处理能力和数据的一致性，对于支持事务和并发读写的数据库系统来说，是非常重要的机制。</p>
<h3 id="14-当前读-快照读-是怎么区分的举个查询的例子102050三个进行中的事务当前事务id是30">14. 当前读、快照读。是怎么区分的？举个查询的例子，10，20，50三个进行中的事务，当前事务id是30</h3>
<h3 id="15-innodb-下索引存储的数据结构">15. innodb 下，索引存储的数据结构</h3>
<h3 id="16-innodb-下聚簇索引和非聚簇索引有什么区别">16. innodb 下，聚簇索引和非聚簇索引有什么区别？</h3>
<p>在InnoDB存储引擎下，聚簇索引和非聚簇索引是两种常见的索引类型，它们在索引的存储方式和查询效率上存在一些区别。</p>
<p>聚簇索引<br>
聚簇索引是指索引的顺序与数据存储的顺序相同，也就是说，聚簇索引的叶子节点存储了整个数据行的信息，包括所有的列。在InnoDB中，每张表只能有一个聚簇索引，它默认是以主键作为聚簇索引的。<br>
由于聚簇索引的叶子节点存储了整个数据行的信息，因此可以通过聚簇索引直接查询到需要的数据，无需再通过数据页来获取数据，从而提高了查询的效率。另外，由于数据行是按照聚簇索引的顺序存储的，因此可以利用聚簇索引实现基于范围的查询（例如 BETWEEN 和 ORDER BY）。</p>
<p>非聚簇索引<br>
非聚簇索引是指索引的顺序与数据存储的顺序不同，也就是说，非聚簇索引的叶子节点只存储了索引列和主键列，需要通过主键索引再查找数据行。在InnoDB中，每张表可以有多个非聚簇索引。<br>
由于非聚簇索引的叶子节点只存储了索引列和主键列，因此需要再通过主键索引来查找数据行，从而降低了查询效率。另外，由于数据行是按照主键索引的顺序存储的，因此不能利用非聚簇索引实现基于范围的查询，而只能实现基于索引列的查询。但是，非聚簇索引相比于聚簇索引可以更加节省存储空间，因为非聚簇索引只存储了索引列和主键列。</p>
<p>需要注意的是，InnoDB使用了MVCC（多版本并发控制）机制来实现数据的并发访问和事务隔离。由于聚簇索引存储了整个数据行的信息，因此对于同一行的多个版本，InnoDB会将它们存储在同一个数据页中，并通过额外的指针来指向不同的版本。而对于非聚簇索引，由于它只存储了索引列和主键列，因此在使用MVCC机制时，InnoDB需要将所有的版本都存储在不同的数据页中，从而增加了存储和查询的成本。</p>
<h3 id="7-innodb-下btree特点非叶子节点只保存key及指针叶子节点只保存data叶子节点有双向指针">7. innodb 下，B+TREE特点：非叶子节点只保存key及指针，叶子节点只保存data，叶子节点有双向指针</h3>
<p>InnoDB是MySQL的一种存储引擎，其默认使用B+Tree数据结构作为索引类型。B+Tree有以下特点：</p>
<p>多级索引：B+Tree是一种多级索引结构，它可以支持大量数据的高效查询和插入，而且查询性能基本不受数据规模的影响。</p>
<p>聚簇索引：InnoDB的B+Tree是聚簇索引，即将数据行存放在B+Tree的叶子节点上，这样可以避免多次磁盘IO操作，提高查询效率。</p>
<p>顺序访问：B+Tree支持有序访问，也就是说在B+Tree中相邻的节点都是相邻的数据块，这样就可以利用磁盘预读技术提高查询效率。</p>
<p>索引组织表：InnoDB中的表是索引组织表，也就是说每个表都必须有主键，主键将作为B+Tree的索引键。</p>
<p>自适应哈希索引：InnoDB支持自适应哈希索引，它可以根据查询频率自动将经常使用的B+Tree节点转化为哈希索引，提高查询效率。</p>
<p>综上所述，B+Tree是一种高效的索引结构，适合大规模数据的高效查询和插入，而且支持多种优化技术，如聚簇索引、有序访问和自适应哈希索引等。</p>
<h3 id="18-innodb-下btree有什么优势解决高度问题减少随机读-排序问题">18. innodb 下，B+TREE有什么优势？解决高度问题，减少随机读、排序问题</h3>
<p>在InnoDB存储引擎下，使用B+Tree索引结构有以下优势：</p>
<p>高效的范围查询：B+Tree索引支持范围查询，可以快速找到某个范围内的数据，适合处理复杂的查询条件。</p>
<p>聚簇索引提高查询效率：InnoDB中的B+Tree是聚簇索引，将数据行存放在B+Tree的叶子节点上，可以减少IO次数，提高查询效率。</p>
<p>顺序访问提高查询效率：B+Tree支持有序访问，也就是说在B+Tree中相邻的节点都是相邻的数据块，可以利用磁盘预读技术提高查询效率。</p>
<p>自适应哈希索引提高查询效率：InnoDB支持自适应哈希索引，可以根据查询频率自动将经常使用的B+Tree节点转化为哈希索引，提高查询效率。</p>
<p>支持高并发：B+Tree索引结构支持高并发访问，多个用户同时对数据库进行查询和修改操作时，B+Tree可以保证数据的一致性和可靠性。</p>
<p>综上所述，B+Tree索引结构在InnoDB存储引擎下具有高效的范围查询、聚簇索引、顺序访问、自适应哈希索引和高并发访问等优势，适合处理大量数据的高效查询和插入。</p>
<h3 id="19-覆盖索引是什么">19. 覆盖索引是什么？</h3>
<p>MySQL的覆盖索引（Covering Index）是指一个查询可以通过索引就能够满足查询的需要，而无需访问数据表。当查询需要访问的列都在索引中时，查询就可以使用覆盖索引，避免了访问数据表，从而提高了查询的性能。</p>
<p>覆盖索引的优点是可以减少磁盘IO，因为查询只需要读取索引而不需要读取数据表，可以节省磁盘IO的时间和资源。此外，覆盖索引可以避免排序和临时表的使用，因为所有需要的数据都已经在索引中。</p>
<p>覆盖索引的缺点是对索引的限制较大，需要查询的所有列都必须在索引中出现，否则无法使用覆盖索引。此外，覆盖索引对更新操作的影响也需要注意，因为索引中的数据会随着数据表的更新而变化，可能会影响索引的效率。</p>
<p>总之，覆盖索引可以提高查询的性能，减少磁盘IO，但需要满足一定的限制，如所有需要查询的列都必须在索引中出现，并且需要注意更新操作的影响。</p>
<h3 id="20-索引下推怎么理解">20. 索引下推怎么理解</h3>
<p>MySQL索引下推（Index Condition Pushdown）是一种查询优化技术，它可以在使用索引的同时，对查询条件进行筛选，从而减少访问数据表的次数，提高查询性能。</p>
<p>具体来说，索引下推是指将原本在数据表上执行的条件判断推到索引层面进行处理，这样可以减少访问数据表的次数，提高查询性能。在查询语句中使用索引时，MySQL会将索引上的条件筛选出来，然后将剩余的条件再在数据表上进行筛选。如果索引层面能够处理掉一些条件，就可以减少访问数据表的次数。</p>
<p>举个例子，假设有一个包含多个列的复合索引，查询语句中包含了多个筛选条件，其中一部分条件可以在索引层面处理掉，那么MySQL就可以使用索引下推来优化查询。具体操作过程如下：</p>
<ol>
<li>MySQL首先通过索引快速定位到数据行；</li>
<li>然后对索引中的条件进行判断，将能够处理的条件筛选出来；</li>
<li>最后将剩余的条件再在数据表上进行筛选。</li>
</ol>
<p>使用索引下推可以减少访问数据表的次数，提高查询性能。但需要注意，索引下推并不是适用于所有情况，需要根据实际情况进行判断和使用。同时，索引下推可能会导致索引的失效，需要注意优化查询语句的方式和条件的组合。</p>
<h3 id="21-innodb下行锁-gap锁next-key锁-是怎么区分的">21. innodb下，行锁、gap锁，next-key锁。是怎么区分的？</h3>
<h3 id="22-innodb下next-key锁可以解决什么问题可以解决幻读吗">22. 	innodb下，next-key锁可以解决什么问题？可以解决幻读吗？</h3>
<h3 id="23-自增主键有哪几种策略">23. 自增主键有哪几种策略？</h3>
<h3 id="24-并发场景下自增主键为什么会有间隙主键冲突-回滚-bulk-inserts">24. 并发场景下，自增主键为什么会有间隙？主键冲突、回滚、Bulk inserts</h3>
<h3 id="25-关联查询是怎么执行-nested-loop-join-a-left-join-b-where-abid-bid">25. 关联查询是怎么执行。Nested-Loop Join。a left join b where a.bid = b.id</h3>
<h3 id="26-执行计划里面的-type-有哪些system-const-eq_ref-ref-range-index-all">26. 执行计划里面的 type 有哪些？system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</h3>
<h3 id="27-执行计划里面的-extra-有哪些需要关注的值using-indexusing-index-conditionusing-filesort">27. 执行计划里面的 Extra 有哪些需要关注的值？Using index，using index condition，Using filesort</h3>
<h3 id="28-一条sql的执行成本怎么计算-cpu1行数据io一个块">28. 一条sql的执行成本怎么计算？ cpu(1行数据)，io(一个块)</h3>
<h3 id="29-主从同步逻辑一般什么情况下会导致主从延迟">29. 	主从同步逻辑，一般什么情况下会导致主从延迟？</h3>
<h3 id="30-binlog是如何工作的-有哪几种模式-rowstatementmixedlevel">30. binlog是如何工作的。有哪几种模式。row，statement，Mixedlevel</h3>
<h3 id="31-binlog的刷盘策略有哪些">31. binlog的刷盘策略有哪些。</h3>
<h3 id="32-innodb-下mysql的一行记录是如何存储的有哪些隐藏字段row_idtrx_idroll_pointer">32. innodb 下，mysql的一行记录是如何存储的？有哪些隐藏字段：row_id,trx_id,roll_pointer</h3>
<h3 id="33-工作经验sql调优经验">33. 工作经验，sql调优经验？</h3>
<h2 id="elasticsearch">ElasticSearch</h2>
<h3 id="1-elasticsearch-是什么它的主要特点是什么">1. Elasticsearch 是什么？它的主要特点是什么？</h3>
<p>Elasticsearch 是一个开源的分布式搜索和分析引擎。它使用 Lucene 作为底层引擎，可以处理大量的数据，并且支持实时搜索和分析。Elasticsearch 的主要特点包括：</p>
<p>分布式：数据可以分布在不同的节点上，并且可以自动进行数据分片和副本；<br>
实时性：可以实时索引和搜索数据；<br>
灵活性：支持多种数据类型、文本处理、地理位置等；<br>
易用性：提供了 RESTful API、客户端库等多种接口，易于使用和集成；<br>
可扩展性：可以通过添加节点和分片来水平扩展。</p>
<h3 id="2-elasticsearch-的数据模型是什么">2. Elasticsearch 的数据模型是什么？</h3>
<p>Elasticsearch 的数据模型是文档-索引-类型。文档是存储在 Elasticsearch 中的基本数据单元，它由多个字段组成。每个文档都属于一个索引（index），而每个索引可以包含多个类型（type），每个类型又包含多个文档。每个文档都有一个唯一的 ID，用于在索引中进行唯一标识。</p>
<h3 id="3-什么是分片和副本">3. 什么是分片和副本？</h3>
<p>分片（Shard）是 Elasticsearch 中数据的基本单位，用于将数据分散存储在不同的节点上，以便实现数据的水平扩展。每个索引都可以划分为多个分片，每个分片可以存储一部分数据。分片的数量和大小可以根据数据量和性能需求进行调整。</p>
<p>副本（Replica）是 Elasticsearch 中数据的备份，用于提高数据的可靠性和可用性。每个分片可以有多个副本，副本分布在不同的节点上，以实现数据的冗余备份。副本也可以提高搜索的性能，因为可以将搜索请求分发到不同的节点上进行并行处理。</p>
<h3 id="4-elasticsearch-的搜索过程是怎样的">4. Elasticsearch 的搜索过程是怎样的？</h3>
<p>Elasticsearch 的搜索过程可以分为以下几个步骤：</p>
<p>客户端发送搜索请求：客户端向 Elasticsearch 发送一个搜索请求，包含搜索条件、索引和类型等信息；<br>
Coordinating 节点的处理：Elasticsearch 会选择一个 Coordinating 节点来处理搜索请求，该节点负责协调搜索过程中的各个节点；<br>
Querying 节点的处理：Coordinating 节点向对应的 Querying 节点发送查询请求，Querying 节点根据请求生成倒排索引，并返回匹配结果；<br>
数据合并和排序：Coordinating 节点会将各个节点返回的结果进行合并和排序，生成最终的结果集；<br>
返回结果：最终的</p>
<h3 id="5-什么是聚合aggregation">5. 什么是聚合（Aggregation）？</h3>
<p>聚合是 Elasticsearch 中一种高级的数据分析方法，用于对数据进行分组、统计、计算等操作，以便得出更全面、更深入的数据分析结果。聚合操作可以在查询请求中定义，可以对一个或多个字段进行聚合操作，支持多种聚合方式，如统计、分组、排序、过滤、嵌套等。</p>
<h3 id="6-elasticsearch-的查询语句是什么样的">6. Elasticsearch 的查询语句是什么样的？</h3>
<p>Elasticsearch 的查询语句使用 JSON 格式，主要包含以下几个部分：</p>
<ul>
<li>Query：用于指定查询类型和查询条件，如匹配、范围、布尔、聚合等；</li>
<li>Filter：用于指定过滤条件，它可以提高搜索性能，因为它不会计算相关性得分；</li>
<li>Sort：用于指定排序规则，可以按照字段值、文档得分、距离等排序；</li>
<li>Aggregations：用于指定聚合操作，可以对搜索结果进行分组、统计、计算等操作；</li>
<li>Highlight：用于指定关键词高亮显示的样式和位置；</li>
<li>Source：用于指定搜索结果的字段列表，可以控制返回的字段数量和内容。</li>
</ul>
<h3 id="7-elasticsearch-的分布式架构是如何保证数据的一致性和可靠性">7. Elasticsearch 的分布式架构是如何保证数据的一致性和可靠性？</h3>
<p>Elasticsearch 的分布式架构采用了多种技术来保证数据的一致性和可靠性，包括：</p>
<ol>
<li>分片和副本：数据被分散存储在不同的节点上，每个分片可以有多个副本，以实现数据的冗余备份和高可用性；</li>
<li>网络通信协议：Elasticsearch 使用 TCP/IP 协议进行节点间的通信，通过多播和单播技术保证数据传输的可靠性和稳定性；</li>
<li>集群状态管理：Elasticsearch 通过集群状态管理机制来检测和处理节点故障、数据丢失等问题，可以自动进行节点重分配、副本重建等操作；</li>
<li>其他技术：Elasticsearch 还采用了分片路由、节点选举、分片分配策略等技术来保证数据的一致性和可靠性。</li>
</ol>
<h3 id="8-什么是-elasticsearch-中的映射mapping">8. 什么是 Elasticsearch 中的映射（Mapping）？</h3>
<p>映射是 Elasticsearch 中定义数据类型的方法，它类似于关系数据库中的表结构。映射用于定义索引中的字段类型、分词器、存储方式、属性等信息。在索引创建之前，需要定义映射信息，以便 Elasticsearch 正确地解析和处理索引中的文档数据。</p>
<h3 id="9-elasticsearch-中的分片是如何工作的">9. Elasticsearch 中的分片是如何工作的？</h3>
<p>Elasticsearch 中的分片是将索引分成多个部分，每个部分称为一个分片。每个分片可以分布在不同的节点上，可以同时处理搜索请求和索引请求。分片的数量可以在索引创建时指定，一般情况下，建议将索引分片数设置为节点数的倍数，以充分利用分布式架构的优势。分片的工作原理是将搜索请求和索引请求路由到对应的分片上，进行处理和返回结果。</p>
<h3 id="10">10.</h3>
<h3 id="11">11.</h3>
<h2 id="算法-工具">算法、工具</h2>
<h3 id="1-布隆过滤器能解决什么问题">1. 布隆过滤器能解决什么问题？</h3>
<p>布隆过滤器解决缓存穿透问题。</p>
<p>使用布隆过滤器逻辑如下：</p>
<ol>
<li>根据 key 查询缓存，如果存在对应的值，直接返回；如果不存在则继续执行</li>
<li>根据 key 查询缓存在布隆过滤器的值，如果存在值，则说明该 key 不存在对应的值，直接返回空，如果不存在值，继续向下执行</li>
<li>查询 DB 对应的值，如果存在，则更新到缓存，并返回该值，如果不存在值，则更新到布隆过滤器中，并返回空</li>
</ol>
<h3 id="2-布隆过滤器实现原理及引发的问题">2. 布隆过滤器实现原理及引发的问题</h3>
<p>布隆过滤器的原理是，当一个元素被加入集合时，通过 K 个散列函数将这个元素映射成一个位数组中的 K 个点（offset），把它们置为 1。检索时，我们只要看看这些点是不是都是 1 就（大约）知道集合中有没有它了：如果这些点有任何一个 0，则被检元素一定不在；如果都是 1，则被检元素很可能在。这就是布隆过滤器的基本思想。</p>
<p>简单来说就是准备一个长度为 m 的位数组并初始化所有元素为 0，用 k 个散列函数对元素进行 k 次散列运算跟 len (m) 取余得到 k 个位置并将 m 中对应位置设置为 1。</p>
<figure data-type="image" tabindex="8"><img src="https://q456qq520.github.io/post-images/1676178253605.png" alt="" loading="lazy"></figure>
<p>布隆过滤器优缺点<br>
优点：</p>
<ul>
<li>空间占用极小，因为本身不存储数据而是用比特位表示数据是否存在，某种程度有保密的效果。</li>
<li>插入与查询时间复杂度均为 O (k)，常数级别，k 表示散列函数执行次数。</li>
<li>散列函数之间可以相互独立，可以在硬件指令层加速计算。</li>
</ul>
<p>缺点：</p>
<ul>
<li>误差（假阳性率）。算法判断key在集合中时，有一定的概率key其实不在集合中。<br>
布隆过滤器可以 100% 判断元素不在集合中，但是当元素在集合中时可能存在误判，因为当元素非常多时散列函数产生的 k 位点可能会重复。</li>
<li>无法删除。</li>
</ul>
<h3 id="3-令牌桶算法-漏斗算法-固定窗口算法滑动窗口算法">3. 	令牌桶算法、漏斗算法、固定窗口算法，滑动窗口算法</h3>
<p><code>固定时间窗口</code><br>
所谓时间窗口限流，是指在一定的时间内，维护一个访问总量的数值，当其超过阈值时，拒绝后续所有的请求，直到进入下一个时间窗口。<br>
<img src="https://q456qq520.github.io/post-images/1676359072929.png" alt="" loading="lazy"><br>
但是，这种算法有一个很明显的临界问题：假设限流阀值为 5 个请求，单位时间窗口是 1s，如果我们在单位时间内的前 0.8-1s 和 1-1.2s，分别并发 5 个请求。虽然都没有超过阀值，但是如果算 0.8-1.2s，则并发数高达 10，已经超过单位时间 1s 不超过 5 阀值的定义了。</p>
<p><code>滑动时间窗口</code><br>
滑动窗口限流可以解决固定窗口临界值的问题。它将单位时间周期分为n个小周期，分别记录每个小周期内接口的访问次数，并且根据时间滑动删除过期的小周期，随着时间流失，最开始的窗口将会失效，但是也会生成新的窗口；<br>
<img src="https://q456qq520.github.io/post-images/1676359259527.png" alt="" loading="lazy"><br>
滑动窗口的格子周期划分的越多，那么滑动窗口的滚动就越平滑，限流的统计就会越精确，但是相对的，维护成本也就越高。</p>
<p>滑动时间窗口的创建过程，如下：<br>
1、根据当前时间，算出该时间的timeId，timeId就是在整个时间轴的位置<br>
2、据timeId算出当前时间窗口在采样窗口区间中的索引idx<br>
3、根据当前时间算出当前窗口应该对应的窗口开始时间time，以毫秒为单位<br>
4、循环判断直到获取到一个当前时间窗口<br>
5、根据索引idx，在采样窗口数组中取得一个时间窗口old</p>
<p>假设我们将1s划分为4个窗口，则每个窗口对应250ms。假设恶意用户还是在上一秒的最后一刻和下一秒的第一刻冲击服务，按照滑动窗口的原理，此时统计上一秒的最后750毫秒和下一秒的前250毫秒，这种方式能够判断出用户的访问依旧超过了1s的访问数量，因此依然会阻拦用户的访问。</p>
<p><code>令牌桶算法</code><br>
有一个虚拟的桶，桶里面放有一定数量的Token，请求访问资源之前，需要从桶里拿到令牌，拿不到令牌的请求会被拒绝掉，这就是令牌桶的思想。<br>
<img src="https://q456qq520.github.io/post-images/1676359525629.png" alt="" loading="lazy"></p>
<p>令牌桶算法的实现很轻量级，我们并不需要一个真正的桶，只需要维护以下几个数值，就能在请求到来时计算出是否有足够的Token分配给请求：</p>
<ul>
<li>上一次发出令牌的时间</li>
<li>令牌的生产速度</li>
<li>上次剩下的令牌数</li>
<li>桶的容量</li>
</ul>
<p><code>漏桶算法</code><br>
漏桶算法的算法原理是，设置一个漏桶，每次请求都将请求放入到漏桶当中，若漏桶已满则拒绝请求，漏桶按照一定速率将已放入漏桶的请求流出，流出的请求将被正常处理。</p>
<p>漏桶算法面对限流时，可以缓存一定的请求，不用直接粗暴拒绝（消息队列的限流本质上就是漏桶算法）。<br>
<img src="https://q456qq520.github.io/post-images/1676359604984.png" alt="" loading="lazy"></p>
<p>令牌桶与漏桶相比，本质的区别是没有一个队列来缓存请求，在更轻量级的同时也只能粗暴的直接舍弃请求。</p>
<h3 id="4-字典表普通hash取模一致性hash算法hash-slot算法hash槽">4. 字典表，普通hash取模，一致性hash算法，hash slot算法（hash槽）</h3>
<p><code>hash算法</code><br>
hash算法的话，主要是对一个key计算hash值，然后再对节点数量取模，映射到某个节点上。</p>
<p><code>一致性hash算法</code><br>
一致性hash的底层结构是一个环，环上有2的32次方个点，即0、1、2、4、8 、...、 2^32-1，环上的每一个点都有一个hash值，圆环上放着不同的节点机器。然后根据数据的Key值计算得到其Hash值（其分布也为[0, 2^32-1]），接着在Hash环上顺时针查找距离这个Key值的Hash值最近的服务器节点，完成Key到服务器的映射查找。</p>
<p>一致性hash的步骤：</p>
<ol>
<li>计算key的hash值</li>
<li>用上一步的值 % (2^32)，用于确保key能映射到环上的某一个点（避免映射到环外），即某个key在环上对应的点是：hash(服务器的IP地址) % 2^32</li>
<li>key落到圆环上以后，就会按照顺时针寻找距离自己最近的一个节点。<br>
<img src="https://q456qq520.github.io/post-images/1676448706071.png" alt="" loading="lazy"></li>
</ol>
<blockquote>
<p>假如一台节点机器宕机了，那么原本在那台机器上的数据会受到影响，按照顺时针的方式，之前的节点机器宕机了，就会走到下一台机器上去，而下一台机器上是没有数据的，导致部分流量瞬间涌入数据库，重新建立缓存数据。</p>
</blockquote>
<p>我们的一致性哈希算法是按照顺时针的方式来实现数据分布的，如果某个区间的哈希值比较多，就会导致大量的数据涌入一个节点，就会导致节点的热点问题，从而出现性能瓶颈。</p>
<p>为了解决这个问题，一致性哈希算法采用了“<strong>虚拟节点</strong>”。即在环上均匀生成多个 虚拟节点，后续 请求先找虚拟节点，然后再通过虚拟节点找到对应的真实节点。因此，只要保证虚拟节点是均匀分布的，就可以实现数据均匀分布在不同的节点上。</p>
<p><code>hash slot算法（hash槽）</code><br>
参考redis cluster的hash slot算法。</p>
<ol>
<li>redis cluster有固定的16384个hash slot，对每个key计算CRC16值，然后对16384取模，可以获取key对应的hash slot。</li>
<li>redis cluster中每个master都会持有部分slot，比如有3个master，那么可能每个master持有5000多个hash slot</li>
<li>hash slot使得node的增加和移除很简单，增加一个master，就将其他master的hash slot移动部分过去，减少一个master，就将它的hash slot移动到其他master上去（移动hash slot的成本是非常低的）</li>
</ol>
<h3 id="5-拉链法寻址法再hash线性探测公共溢出区">5. 拉链法，寻址法（再hash，线性探测，公共溢出区）</h3>
<p>根据同一散列函数计算出的散列值如果不同，那么输入值肯定也不同。但是，根据同一散列函数计算出的散列值如果相同，输入值不一定相同。两个不同的输入值，根据同一散列函数计算出的散列值相同的现象叫做碰撞。</p>
<p>常见的Hash函数有以下几个：</p>
<ol>
<li>直接定址法：直接以关键字k或者k加上某个常数（k+c）作为哈希地址。</li>
<li>数字分析法：提取关键字中取值比较均匀的数字作为哈希地址。</li>
<li>除留余数法：用关键字k除以某个不大于哈希表长度m的数p，将所得余数作为哈希表地址。</li>
<li>分段叠加法：按照哈希表地址位数将关键字分成位数相等的几部分，其中最后一部分可以比较短。然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。</li>
<li>平方取中法：如果关键字各个部分分布都不均匀的话，可以先求出它的平方值，然后按照需求取中间的几位作为哈希地址。</li>
<li>伪随机数法：采用一个伪随机数当作哈希函数。</li>
</ol>
<p>衡量一个哈希函数的好坏的重要指标就是发生碰撞的概率以及发生碰撞的解决方案。任何哈希函数基本都无法彻底避免碰撞，常见的解决碰撞的方法有以下几种：</p>
<ol>
<li>开放定址法：<br>
开放定址法就是一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。</li>
<li>链地址法<br>
将哈希表的每个单元作为链表的头结点，所有哈希地址为i的元素构成一个同义词链表。即发生冲突时就把该关键字链在以该单元为头结点的链表的尾部。</li>
<li>再哈希法<br>
当哈希地址发生冲突用其他的函数计算另一个哈希函数地址，直到冲突不再产生为止。</li>
<li>建立公共溢出区<br>
将哈希表分为基本表和溢出表两部分，发生冲突的元素都放入溢出表中。</li>
</ol>
<h3 id="6-paxos角色多每次都二阶段提交准备-提交实现难活锁问题">6. paxos，角色多，每次都二阶段提交（准备、提交），实现难，活锁问题</h3>
<p>在Paxos算法中有三种角色，分别具有三种不同的行为，但很多时候，一个进程可能同时充当着多种角色。<br>
Proposer：提案（Proposal）的提议者。<br>
Acceptor：提案的表决者，是否accept该方案，只有半数以上的Acceptor接受了某提案，那么该提案才会被接收。<br>
Learners：提案的学习者，当提案被选定时，其要执行提案内容。</p>
<p>一个提案的表决者(Acceptor)会存在多个，但是在一个集群中，提议者(Proposer)也可能存在多个，不同的提议者(Proposer)会提出不同的提案。<br>
一致性算法则可以保证如下几点：</p>
<ol>
<li>没有提案被提出则不会有提案被选定。</li>
<li>每个提议者在提出提案时都会首先获取到一个具有全局唯一性的、递增的提案编号N，即在整个集群中石唯一的编号N，然后修改该编号赋予其要提出的提案。</li>
<li>每个表决者在accept某提案之后，会将该提案的编号N记录在本地，这样每个表决者中保存的已经被accept的提案中会存在一个编号最大的提案，其编号假设为maxN，每个表决者仅会accept编号大于自己本地maxN的提案。</li>
<li>众多提案中港最终只能有一个提案被选定。</li>
<li>一旦一个提案被选定，则其他服务器会主动同步(Learn)该提案到本地。</li>
</ol>
<p><strong>算法过程描述</strong><br>
<code>prepare阶段</code></p>
<ol>
<li>提议者(Proposer)准备提交一个编号为N的提议，于是其首先向所有表决者(Acceptor)发送prepare(N)请求，用于试探集群是否支持该编号的提议。</li>
<li>每个表决者(Acceptor)都保存着自己曾经accept过的提议中的最大编号maxN，当一个表决者接收到其他主机发送过来的prepare(N)请求时，其会比较N与maxN的大小关系，有以下两种情况。<br>
若N小于maxN，则说明该提议已经过时，当前表决者采取不回应或者回应Error的方式来拒绝该prepare请求；<br>
若N大于maxN，则说明该提议是可以接受的，当前表决者会首先将该N记录下来，并将其曾经accept的编号最大的提案Proposal(myid, maxN, value)反馈给提议者，以向提议者展示自己支持的提案意愿，其中第一个参数myid表示表决者Acceptor的标识id，第二个参数表示其曾接受的提案的最大编号maxN，第三个参数表示该提案真正内容value，当然，若当前表决者还未曾accept过任何提议，则会将Proposal(myid, null, null)反馈给提议者。<br>
在prepare阶段N不可能等于maxN，这是由N的生成机制决定的，要获得N的值，其必定会在原来数值的基础上采用同步锁方式增一。<br>
<code>accept阶段</code></li>
<li>当提议者(Proposer)发出prepare(N)之后，若收到了超过半数的表决者(Acceptor)的反馈，那么该提议者会将其真正的提案Proposal(N, value)发送给所有的表决者。</li>
<li>当表决者(Acceptor)接收到提议者发送的Proposal(N, value)提案后，会再次拿出自己曾经accept过的提议中最大编号maxN和曾经记录下的prepare的最大编号，让N与它们进行比较，若N大于等于这两个编号，则当前表决者accept该提案，并反馈给提议者。若N小于这两个编号，则表决者采取不回应或者回应ERROR的方式来拒绝该提议。<br>
3.若提议者没有接收到超过半数的表决者的accept反馈，则重新进入prepare阶段，递增提案号N，重新提出prepare请求，若提议者接收到的反馈数量超过了半数，则其会向外广播两类信息。<br>
向曾accept其提案的表决者发送&quot;可执行数据同步信息&quot;，即让它们执行其接受到的提案。<br>
向未曾向其发送accept反馈的表决者发送“提案+可执行数据同步信号”，即让它们接收到该提案后马上执行。</li>
</ol>
<p><code>Paxos算法的活锁问题</code><br>
Paxos算法中每个进程均可提交提案，但是必须要获取到一个全局的唯一编号N，将该N值赋予提案，为了保证N的唯一性，对该N值操作就必须要放到同步锁（排他锁）中，N值就成了“竞争资源”，若一个进程为了提交提案，一直不停在申请资源N，但是每一次都没有分配给它，此时该进程就处于“活锁”状态。<br>
Fast Paxos算法对Paxos算法进行了改进：其只允许一个进程处理写请求，解决了活锁问题。</p>
<h3 id="7-raftzab只能主节点提交提案">7. raft，zab，只能主节点提交提案</h3>
<p>主节点的出现就是保证数据一致性，保证事务ID是顺序的</p>
<h3 id="8-lru可以解决什么问题如何实现">8. LRU可以解决什么问题？如何实现</h3>
<p>LRU 是 Least Recently Used 的缩写，这种算法认为最近使用的数据是热门数据，下一次很大概率将会再次被使用。而最近很少被使用的数据，很大概率下一次不再用到。当缓存容量的满时候，优先淘汰最近很少使用的数据。<br>
LRU 算法优势在于算法实现难度不大，对于对于热点数据， LRU 效率会很好。</p>
<p>LRU 算法劣势在于对于偶发的批量操作，比如说批量查询历史数据，就有可能使缓存中热门数据被这些历史数据替换，造成缓存污染，导致缓存命中率下降，减慢了正常数据查询。</p>
<p><code>实现思路: 双向链表 + 哈希表</code><br>
维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。</p>
<ol>
<li>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。</li>
<li>如果此数据没有在缓存链表中，又可以分为两种情况：<br>
如果此时缓存未满，则将此结点直接插入到链表的头部；<br>
如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li>
</ol>
<pre><code class="language-java">public class LRUCache {

    Entry head, tail;
    int capacity;
    int size;
    Map&lt;Integer, Entry&gt; cache;
    public LRUCache(int capacity) {
        this.capacity = capacity;
        // 初始化链表
        initLinkedList();
        size = 0;
        cache = new HashMap&lt;&gt;(capacity + 2);
    }

    /**
     * 如果节点不存在，返回 -1.如果存在，将节点移动到头结点，并返回节点的数据。
     *
     * @param key
     * @return
     */
    public int get(int key) {
        Entry node = cache.get(key);
        if (node == null) {
            return -1;
        }
        // 存在移动节点
        moveToHead(node);
        return node.value;
    }

    /**
     * 将节点加入到头结点，如果容量已满，将会删除尾结点
     *
     * @param key
     * @param value
     */
    public void put(int key, int value) {
        Entry node = cache.get(key);
        if (node != null) {
            node.value = value;
            moveToHead(node);
            return;
        }
        // 不存在。先加进去，再移除尾结点
        // 此时容量已满 删除尾结点
        if (size == capacity) {
            Entry lastNode = tail.pre;
            deleteNode(lastNode);
            cache.remove(lastNode.key);
            size--;
        }
        // 加入头结点

        Entry newNode = new Entry();
        newNode.key = key;
        newNode.value = value;
        addNode(newNode);
        cache.put(key, newNode);
        size++;

    }

    private void moveToHead(Entry node) {
        // 首先删除原来节点的关系
        deleteNode(node);
        addNode(node);
    }

    private void addNode(Entry node) {
        head.next.pre = node;
        node.next = head.next;

        node.pre = head;
        head.next = node;
    }

    private void deleteNode(Entry node) {
        node.pre.next = node.next;
        node.next.pre = node.pre;
    }

    public static class Entry {
        public Entry pre;
        public Entry next;
        public int key;
        public int value;

        public Entry(int key, int value) {
            this.key = key;
            this.value = value;
        }
        public Entry() {
        }
    }

    private void initLinkedList() {
        head = new Entry();
        tail = new Entry();

        head.next = tail;
        tail.pre = head;

    }
    public static void main(String[] args) {
        LRUCache cache = new LRUCache(2);
        cache.put(1, 1);
        cache.put(2, 2);
        System.out.println(cache.get(1));
        cache.put(3, 3);
        System.out.println(cache.get(2));

    }
}
</code></pre>
<h3 id="9-lru可以如何优化redis近似lrumysql分段lru">9. LRU可以如何优化？Redis近似LRU？Mysql分段LRU？</h3>
<p><code>Mysql分段LRU</code><br>
将链表拆分成两部分，分为热数据区，与冷数据区，如图所示。<br>
<img src="https://q456qq520.github.io/post-images/1676456311846.png" alt="" loading="lazy"></p>
<ol>
<li>访问数据如果位于热数据区，与之前 LRU 算法一样，移动到热数据区的头结点。</li>
<li>插入数据时，若缓存已满，淘汰尾结点的数据。然后将数据插入冷数据区的头结点。</li>
<li>处于冷数据区的数据每次被访问需要做如下判断：
<ul>
<li>若该数据已在缓存中超过指定时间，比如说 1 s，则移动到热数据区的头结点。</li>
<li>若该数据存在在时间小于指定的时间，则位置保持不变。</li>
</ul>
</li>
</ol>
<p>对于偶发的批量查询，数据仅仅只会落入冷数据区，然后很快就会被淘汰出去。热门数据区的数据将不会受到影响，这样就解决了 LRU 算法缓存命中率下降的问题。</p>
<p><code>Redis近似LRU</code><br>
由于 LRU 算法需要用链表管理所有的数据，会造成大量额外的空间消耗。<br>
除此之外，大量的节点被访问就会带来频繁的链表节点移动操作，从而降低了 Redis 性能。<br>
所以 Redis 对该算法做了简化，Redis LRU 算法并不是真正的 LRU，Redis 通过对少量的 key 采样，并淘汰采样的数据中最久没被访问过的 key。<br>
这就意味着 Redis 无法淘汰数据库最久访问的数据。</p>
<p>Redis LRU 算法有一个重要的点在于可以更改样本数量来调整算法的精度，使其近似接近真实的 LRU 算法，同时又避免了内存的消耗，因为每次只需要采样少量样本，而不是全部数据。</p>
<h3 id="10-雪花算法的使用场景特点">10. 雪花算法的使用场景，特点</h3>
<p>分布式环境下的唯一ID生成算法。<br>
特点：</p>
<ol>
<li>能满足高并发分布式系统环境下ID不重复</li>
<li>基于时间戳，可以保证基本有序递增（有些业务场景对这个又要求）</li>
<li>不依赖第三方的库或者中间件</li>
<li>生成效率极高</li>
</ol>
<h3 id="11-雪花算法的数据结构会有哪些问题">11. 雪花算法的数据结构，会有哪些问题？</h3>
<p>在同一个进程中，它首先是通过时间位保证不重复，如果时间相同则是通过序列位保证。 同时由于时间位是单调递增的，且各个服务器如果大体做了时间同步，那么生成的主键在分布式环境可以认为是总体有序的。</p>
<p>使用雪花算法生成的主键，二进制表示形式包含4部分，从高位到低位分表为：1bit符号位、41bit时间戳位、10bit工作进程位以及12bit序列号位。</p>
<ol>
<li>
<p>符号位(1bit)<br>
预留的符号位，恒为零。</p>
</li>
<li>
<p>时间戳位(41bit)<br>
41位的时间戳可以容纳的毫秒数是2的41次幂，一年所使用的毫秒数是：365 * 24 * 60 * 60 * 1000。通过计算可知：<code>Math.pow(2, 41) / (365 * 24 * 60 * 60 * 1000L)</code>;<br>
结果约等于69.73年。ShardingSphere的雪花算法的时间纪元从2016年11月1日零点开始，可以使用到2086年，相信能满足绝大部分系统的要求。</p>
</li>
<li>
<p>工作进程位(10bit)<br>
该标志在Java进程内是唯一的，如果是分布式应用部署应保证每个工作进程的id是不同的。该值默认为0，可通过属性设置。</p>
</li>
<li>
<p>序列号位(12bit)<br>
该序列是用来在同一个毫秒内生成不同的ID。如果在这个毫秒内生成的数量超过4096(2的12次幂)，那么生成器会等待到下个毫秒继续生成。</p>
</li>
</ol>
<p><code>雪花算法的问题</code></p>
<ul>
<li>时间回拨问题<br>
由于机器的时间是动态的调整的，有可能会出现时间跑到之前几毫秒，如果这个时候获取到了这种时间，则会出现数据重复</li>
<li>机器id的分配和回收问题<br>
目前机器id需要每台机器不一样，这样的方式分配需要有方案进行处理，同时也要考虑，如果机器宕机了，对应的workerId分配后的回收问题</li>
<li>机器id的上限问题<br>
机器id是固定的bit，那么也就是对应的机器个数是有上限的，在有些业务场景下，需要所有机器共享同一个业务空间，那么10bit表示的1024台机器是不够的。</li>
</ul>
<h2 id="八-设计">八 设计</h2>
<h3 id="1-cap理论">1. CAP理论</h3>
<p>Consistency，一致性，是指所有节点在同一时刻的数据是相同的，及更新执行结束并相应用户完成后，所有节点存储的数据都会保持相同。</p>
<p>Availability，可用性，指系统一直处于可用状态，对用户的请求可即时响应。</p>
<p>Partition Tolerance，分区容错性，指分布式系统遇到网络分区的情况下，仍然能够响应用户的请求。网络分区指因为网络故障导致网络不连通，不同节点分布在不同自网络中，各个子网络内网络正常。</p>
<p>CAP 理论，在分布式系统中 C、A、P 这三个特征不能同时满足，只能满足其中两个。</p>
<h3 id="2-二阶段提交是如何进行的会有什么问题锁力度较大">2. 二阶段提交是如何进行的？会有什么问题（锁力度较大）</h3>
<figure data-type="image" tabindex="9"><img src="https://q456qq520.github.io/post-images/1676513104619.png" alt="" loading="lazy"></figure>
<ol>
<li>
<p>资源被同步阻塞<br>
在执行过程中，所有参与节点都是事务独占状态，当参与者占有公共资源时，那么第三方节点访问公共资源会被阻塞。</p>
</li>
<li>
<p>协调者可能出现单点故障<br>
一旦协调者发生故障，参与者会一直阻塞下去。</p>
</li>
<li>
<p>在 Commit 阶段出现数据不一致<br>
在第二阶段中，假设协调者发出了事务 Commit 的通知，但是由于网络问题该通知仅被一部分参与者所收到并执行 Commit，其余的参与者没有收到通知，一直处于阻塞状态，那么，这段时间就产生了数据的不一致性。</p>
</li>
</ol>
<h3 id="3-xatccatsaga">3. xa，tcc，at，saga</h3>
<p>四种分布式事务模式，分别在不同的时间被提出，每种模式都有它的适用场景：</p>
<ol>
<li>
<p>AT 模式是无侵入的分布式事务解决方案，适用于不希望对业务进行改造的场景，几乎0学习成本。</p>
</li>
<li>
<p>TCC 模式是高性能分布式事务解决方案，适用于核心系统等对性能有很高要求的场景。</p>
</li>
<li>
<p>Saga 模式是长事务解决方案，适用于业务流程长且需要保证事务最终一致性的业务系统，Saga 模式一4阶段就会提交本地事务，无锁，长流程情况下可以保证性能，多用于渠道层、集成层业务系统。事务参与者可能是其它公司的服务或者是遗留系统的服务，无法进行改造和提供 TCC 要求的接口，也可以使用 Saga 模式。</p>
</li>
<li>
<p>XA模式是分布式强一致性的解决方案，但性能低而使用较少。<br>
XA将分布式事务分为两个阶段，一个是准备阶段，一个是执行阶段。<br>
准备阶段： 事务协调者会向事务参与者RM发送一个请求，这里的RM其实是由数据库实现的，所以可以认为RM就是数据库。让数据库去执行事务，但执行完不要提交，而是把结果告知事务协调者。<br>
执行阶段： 事务协调者根据结果，通知RM回滚或者提交事务。<br>
优点：<br>
这是一种强一致性的解决方案，因为每一个微服务都是基于各自的事务的，各自的事务是满足ACID的，而且等到大家都执行完了且都成功了才提交，所以全局事务是满足ACID的。<br>
实现比较简单，因为很多数据库都实现了这种模式，使用Seata的XA模式只需要简单的封装上TM。</p>
</li>
</ol>
<p>缺点：<br>
第一阶段不提交，等到第二阶段再提交，但是等的过程中要占用数据库锁，如果一个分布式事务中跨越了很多个分支事务，则可能造成很多资源的浪费，使得别的请求无法访问，降低了可用性；<br>
依赖于数据库，对于如果有的数据库没有实现这种模式，则无法使用这个模式来实现分布式事务。</p>
<h3 id="4-分布式环境下如何防止雪崩隔离-流控-降级-配置超时">4. 分布式环境下如何防止雪崩？隔离、流控、降级、配置超时</h3>
<p>雪崩问题：分布式系统都存在这样一个问题，由于网络的不稳定性，决定了任何一个服务的可用性都不是 100% 的。当网络不稳定的时候，作为服务的提供者，自身可能会被拖死，导致服务调用者阻塞，最终可能引发雪崩效应。</p>
<p>当在高并发的情况下，如果某一外部依赖的服务（第三方系统或者自研系统出现故障）超时阻塞，就有可能使得整个主线程池被占满，增加内存消耗，这是长请求拥塞反模式（一种单次请求时延变长而导致系统性能恶化甚至崩溃的恶化模式）。更进一步，如果线程池被占满，那么整个服务将不可用，就又可能会重复产生上述问题。因此整个系统就像雪崩一样，最终崩塌掉。</p>
<p><code>雪崩效应产生的几种场景</code></p>
<ol>
<li>流量激增：比如异常流量、用户重试导致系统负载升高；</li>
<li>缓存刷新：假设A为client端，B为Server端，假设A系统请求都流向B系统，请求超出了B系统的承载能力，就会造成B系统崩溃；</li>
<li>程序有Bug：代码循环调用的逻辑问题，资源未释放引起的内存泄漏等问题；</li>
<li>硬件故障：比如宕机，机房断电，光纤被挖断等。</li>
<li>线程同步等待：系统间经常采用同步服务调用模式，核心服务和非核心服务共用一个线程池和消息队列。如果一个核心业务线程调用非核心线程，这个非核心线程交由第三方系统完成，当第三方系统本身出现问题，导致核心线程阻塞，一直处于等待状态，而进程间的调用是有超时限制的，最终这条线程将断掉，也可能引发雪崩；</li>
</ol>
<p>针对上述雪崩情景，有很多应对方案，但没有一个万能的模式能够应对所有场景。</p>
<ol>
<li>针对流量激增，采用自动扩缩容以应对突发流量，或在负载均衡器上安装限流模块。</li>
<li>针对缓存刷新，参考Cache应用中的服务过载案例研究</li>
<li>针对硬件故障，多机房容灾，跨机房路由，异地多活等。</li>
<li>针对同步等待，使用Hystrix做故障隔离，熔断器机制等可以解决依赖服务不可用的问题。</li>
</ol>
<p><code>雪崩的整体解决方案</code></p>
<ol>
<li>熔断模式<br>
如果某个目标服务调用慢或者有大量超时，此时，熔断该服务的调用，对于后续调用请求，不在继 续调用目标服务，直接返回，快速释放资源。如果目标服务情况好转则恢复调用。</li>
</ol>
<p>设计：<br>
（1）熔断请求判断机制算法：使用无锁循环队列计数，每个熔断器默认维护10个bucket，每1秒一个bucket，每个blucket记录请求的成功、失败、超时、拒绝的状态，默认错误超过50%且10秒内超过 20个请求进行中断拦截。<br>
（2）熔断恢复：对于被熔断的请求，每隔5s允许部分请求通过，若请求都是健康的（RT&lt; 250ms） 则对请求健康恢复。<br>
（3）熔断报警：对于熔断的请求打日志，异常请求超过某些设定则报警。</p>
<ol start="2">
<li>隔离模式<br>
可以对不同类型的请求使用线程池来资源隔离，每种类型的请求互不影响，如果一种类型的请求 线程资源耗尽，则对后续的该类型请求直接返回，不再调用后续资源。</li>
</ol>
<p>隔离的方式一般使用两种<br>
（1）线程池隔离模式：使用一个线程池来存储当前的请求，线程池对请求作处理，设置任务返回处理 超时时间，堆积的请求堆积入线程池队列。这种方式需要为每个依赖的服务申请线程池，有一定的资源 消耗，好处是可以应对突发流量（流量洪峰来临时，处理不完可将数据存储到线程池队里慢慢处理）<br>
（2）信号量隔离模式：使用一个原子计数器（或信号量）来记录当前有多少个线程在运行，请求来先 判断计数器的数值，若超过设置的最大线程个数则丢弃改类型的新请求，若不超过则执行计数操作请求 来计数器+1，请求返回计数器-1。这种方式是严格的控制线程且立即返回模式，无法应对突发流量（流 量洪峰来临时，处理的线程超过数量，其他的请求会直接返回，不继续去请求依赖的服务）</p>
<ol start="3">
<li>
<p>限流模式<br>
主要是提前对各个类型的请求设置最高的QPS阈值，若高于设置的阈值则对该请求直接返回，不再调 用后续资源。这种模式不能解决服务依赖的问题，只能解决系统整体资源分配问题，因为没有被限流的请求依然有可能造成雪崩效应。</p>
</li>
<li>
<p>配置超时<br>
（1）超时分两种，一种是请求的等待超时，一种是请求运行超时。<br>
（2）等待超时：在任务入队列时设置任务入队列时间，并判断队头的任务入队列时间是否大于超时时 间，超过则丢弃任务。<br>
（3）运行超时：直接可使用线程池提供的get方法。</p>
</li>
</ol>
<h3 id="5-应用服务高可用有哪些措施缓存-冗余-读写分离-降级兜底-横向扩容">5. 应用服务高可用，有哪些措施？缓存、冗余、读写分离、降级兜底、横向扩容</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot启动流程]]></title>
        <id>https://q456qq520.github.io/post/springboot/</id>
        <link href="https://q456qq520.github.io/post/springboot/">
        </link>
        <updated>2023-02-09T02:35:00.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="1-springboot启动流程">1 Springboot启动流程</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="1-springboot启动流程">1 Springboot启动流程</h2>
<!-- more -->
<h3 id="11-springapplication创建">1.1 SpringApplication创建</h3>
<figure data-type="image" tabindex="1"><img src="https://q456qq520.github.io/post-images/1675939261552.png" alt="" loading="lazy"></figure>
<h4 id="111-入口">1.1.1 入口</h4>
<pre><code class="language-java">public SpringApplication(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources) {
    this.sources = new LinkedHashSet();
    this.bannerMode = Mode.CONSOLE;
    this.logStartupInfo = true;
    this.addCommandLineProperties = true;
    this.headless = true;
    this.registerShutdownHook = true;
    this.additionalProfiles = new HashSet();
    this.isCustomEnvironment = false;
    this.resourceLoader = resourceLoader;
    Assert.notNull(primarySources, &quot;PrimarySources must not be null&quot;);
    // 将 Main Class 设置为自己的元素
    this.primarySources = new LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));
    // 检查当先的 app 类型
    this.webApplicationType = WebApplicationType.deduceFromClasspath();
    // 先从 Spring.factories 文件中加载 ApplicationContextInitializer 类信息。
    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));
    // 先从 Spring.factories 文件中加载 ApplicationListener 类信息。
    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
    // 获取 main class 信息，并设置到本地属性中
    this.mainApplicationClass = deduceMainApplicationClass();
}
</code></pre>
<h4 id="112-检查应用类型">1.1.2 检查应用类型</h4>
<p>在将Main class 设置primarySources 后，调用了 WebApplicationType.deduceFromClasspath() 方法，该方法是为了检查当前的应用类型，并设置给 webApplicationType。</p>
<pre><code class="language-java">static WebApplicationType deduceFromClasspath() {
        if (ClassUtils.isPresent(&quot;org.springframework.web.reactive.DispatcherHandler&quot;, (ClassLoader)null) &amp;&amp; !ClassUtils.isPresent(&quot;org.springframework.web.servlet.DispatcherServlet&quot;, (ClassLoader)null) &amp;&amp; !ClassUtils.isPresent(&quot;org.glassfish.jersey.servlet.ServletContainer&quot;, (ClassLoader)null)) {
            return REACTIVE;
        } else {
            String[] var0 = SERVLET_INDICATOR_CLASSES;
            int var1 = var0.length;

            for(int var2 = 0; var2 &lt; var1; ++var2) {
                String className = var0[var2];
                if (!ClassUtils.isPresent(className, (ClassLoader)null)) {
                    return NONE;
                }
            }
        }
    }
</code></pre>
<p>这里主要是通过类加载器判断是否存在 <code>REACTIVE</code>相关的类信息，假如有就代表是一个 REACTIVE 的应用，假如不是就检查是否存在<code>Servelt</code>和 <code>ConfigurableWebApplicationContext</code> ，假如都没有，就代表应用为非 WEB 类应用，返回 <code>NONE</code>，默认返回<code>SERVLET</code>类型</p>
<h4 id="113-设置初始化器-initializer">1.1.3 设置初始化器 Initializer</h4>
<p>我们设置完成应用类型后，就寻找所有的 Initializer 实现类，并设置到SpringApplication 的 Initializers 中。</p>
<p>容器刷新之前调用此类的initialize方法。这个点允许被用户自己扩展。用户可以在整个spring容器还没被初始化之前做一些事情。可以想到的场景可能为，在最开始激活一些配置，或者利用这时候class还没被类加载器加载的时机，进行动态字节码注入等操作。</p>
<p>这里先说一下 getSpringFactoriesInstances 方法，我们知道在我们使用 SpringBoot 程序中，会经常在 META-INF/spring.factories 目录下看到一些EnableAutoConfiguration，来出发 config 类注入到容器中，我们知道一般一个 config 类要想被 SpringBoot 扫描到需要使用 @CompnentScan 来扫描具体的路径，对于 jar 包来说这无疑是非常不方便的，所以 SpringBoot 提供了另外一种方式来实现，就是使用 spring.factories。但是要实现，得先进行加载，过程如下：</p>
<pre><code class="language-java">private &lt;T&gt; Collection&lt;T&gt; getSpringFactoriesInstances(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, Object... args) {
    ClassLoader classLoader = getClassLoader();
    // Use names and ensure unique to protect against duplicates
    Set&lt;String&gt; names = new LinkedHashSet&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader));
    List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);
    AnnotationAwareOrderComparator.sort(instances);
    return instances;
}
</code></pre>
<p>我们先来看一下传入参数，这里需要注意的是 args，这个是初始化对应 type 的时候传入的构造参数，我们先看一下 SpringFactoriesLoader#loadFactoryNames 方法：</p>
<pre><code class="language-java">public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader) {
    String factoryClassName = factoryClass.getName();
    return (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());
}

private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) {
    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);
    if (result != null) {
        return result;
    } else {
        try {
            //加载配置文件
            Enumeration&lt;URL&gt; urls = classLoader != null ? classLoader.getResources(&quot;META-INF/spring.factories&quot;) : ClassLoader.getSystemResources(&quot;META-INF/spring.factories&quot;);
            LinkedMultiValueMap result = new LinkedMultiValueMap();

            while(urls.hasMoreElements()) {
                URL url = (URL)urls.nextElement();
                UrlResource resource = new UrlResource(url);
                Properties properties = PropertiesLoaderUtils.loadProperties(resource);
                Iterator var6 = properties.entrySet().iterator();

                while(var6.hasNext()) {
                    Entry&lt;?, ?&gt; entry = (Entry)var6.next();
                    List&lt;String&gt; factoryClassNames = Arrays.asList(StringUtils.commaDelimitedListToStringArray((String)entry.getValue()));
                    result.addAll((String)entry.getKey(), factoryClassNames);
                }
            }

            cache.put(classLoader, result);
            return result;
        } catch (IOException var9) {
            throw new IllegalArgumentException(&quot;Unable to load factories from location [META-INF/spring.factories]&quot;, var9);
        }
    }
}
</code></pre>
<p>首先是会先检查缓存，假如缓存中存在就直接返回，假如没有就调用 classLoader#getResources 方法，传入META-INF/spring.factories，即获取所有 jar 包下的对应文件，并封装成 UrlResource ，然后使用 PropertiesLoaderUtils 将这些信息读取成一个对一对的 properties，我们观察一下 spring.factories 都是按 properties 格式排版的，假如有多个就用逗号隔开，所以这里还需要将逗号的多个类分隔开来，并加到 result 中，由于 result 是一个 LinkedMultiValueMap 类型，支持多个值插入，最后放回缓存中。最终完成加载 META-INF/spring.factories 中的配置。</p>
<p>在获取到所有的 Initializer 后接下来是调用 createSpringFactoriesInstances 方法进行初始化。</p>
<pre><code class="language-java">private &lt;T&gt; Collection&lt;T&gt; getSpringFactoriesInstances(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, Object... args) {
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    Set&lt;String&gt; names = new LinkedHashSet(SpringFactoriesLoader.loadFactoryNames(type, classLoader));
    List&lt;T&gt; instances = this.createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);
    AnnotationAwareOrderComparator.sort(instances);
    return instances;
}
</code></pre>
<pre><code class="language-java">private &lt;T&gt; List&lt;T&gt; createSpringFactoriesInstances(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, ClassLoader classLoader, Object[] args, Set&lt;String&gt; names) {
    List&lt;T&gt; instances = new ArrayList(names.size());
    Iterator var7 = names.iterator();
  // 这里包括很多初始化类信息，包括 apollo , shardingShepre 都是在这里初始化。
    while(var7.hasNext()) {
        String name = (String)var7.next();

        try {
            Class&lt;?&gt; instanceClass = ClassUtils.forName(name, classLoader);
            Assert.isAssignable(type, instanceClass);
            Constructor&lt;?&gt; constructor = instanceClass.getDeclaredConstructor(parameterTypes);
            T instance = BeanUtils.instantiateClass(constructor, args);
            instances.add(instance);
        } catch (Throwable var12) {
            throw new IllegalArgumentException(&quot;Cannot instantiate &quot; + type + &quot; : &quot; + name, var12);
        }
    }
    return instances;
}
</code></pre>
<p>这里的 names 就是我们上面通过类加载器加载到的类名，到这里会先通过反射生成 class 对象，然后判断该类是否继承与 ApplicationContextInitializer ，最后通过反射的方式获取这个类的构造方法，并调用该构造方法，传入已经定义好的构造参数，对于 ApplicationContextInitializer 是无参的构造方法，然后初始化实例并返回，回到原来的方法，这里会先对所有的 ApplicationContextInitializer 进行排序，调用 <code>AnnotationAwareOrderComparator#sort(instances)</code>方法，这里就是根据 @Order 中的顺序进行排序。</p>
<h4 id="114-设置监听器">1.1.4 设置监听器</h4>
<p>接下来是设置 ApplicationListener，我们跟进去就会发现这里和上面获取 ApplicationContextInitializer 的方法如出一辙。这里不过多介绍。</p>
<h3 id="12-springapplication-run">1.2 SpringApplication run()</h3>
<p>在完成 SpringApplication 对象的初始化后，我们进入了他的 run 方法，这个方法几乎涵盖了 SpringBoot 生命周期的所有内容，主要分为九个步骤。</p>
<pre><code class="language-java">public ConfigurableApplicationContext run(String... args) {
    // 启动计时器计算初始化完成耗时
    StopWatch stopWatch = new StopWatch();
    stopWatch.start();
    ConfigurableApplicationContext context = null;
    configureHeadlessProperty();
    // 第一步：获取 SpringApplicationRunListener， 然后调用他的 staring 方法启动监听器。
    SpringApplicationRunListeners listeners = getRunListeners(args);
    listeners.starting();
    try {
        ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);
        // 第二步:根据 SpringApplicationRunListeners以及参数来准备环境
        ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);
        configureIgnoreBeanInfo(environment);
        // 准备打印 Banner
        Banner printedBanner = printBanner(environment);
        // 第三步：创建 Spring 容器
        context = createApplicationContext();
        // 第四步： Spring 容器的前置处理
        prepareContext(context, environment, listeners, applicationArguments, printedBanner);
        // 第五步：刷新 Spring 容器
        refreshContext(context);
        // 第六步： Spring 容器的后置处理器
        afterRefresh(context, applicationArguments);
        // 停止计时
        stopWatch.stop();
        if (this.logStartupInfo) {
            new StartupInfoLogger(this.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);
        }
        //第七步：通知所有 listener 结束启动
        listeners.started(context);
        //第八步：调用所有 runner 的 run 方法
        callRunners(context, applicationArguments);
    }
    catch (Throwable ex) {
        handleRunFailure(context, ex, listeners);
        throw new IllegalStateException(ex);
    }
    //第九步：通知所有 listener running 事件
    try {
        listeners.running(context);
    }
    catch (Throwable ex) {
        handleRunFailure(context, ex, null);
        throw new IllegalStateException(ex);
    }
    return context;
}
</code></pre>
<h4 id="121-获取-springapplicationrunlistener">1.2.1 获取 SpringApplicationRunListener</h4>
<pre><code class="language-java">private SpringApplicationRunListeners getRunListeners(String[] args) {
    Class&lt;?&gt;[] types = new Class[]{SpringApplication.class, String[].class};
    return new SpringApplicationRunListeners(logger, this.getSpringFactoriesInstances(SpringApplicationRunListener.class, types, this, args));
}
</code></pre>
<p>这里和上面获取 initializer 和 listener 的方式基本一致，都是通过 getSpringFactoriesInstances, 最终只找到一个类就是：org.springframework.boot.context.event.EventPublishingRunListener ，然后调用其构造方法并传入产生 args , 和 SpringApplication 本身:</p>
<pre><code class="language-java">public class EventPublishingRunListener implements SpringApplicationRunListener, Ordered {

   private final SpringApplication application;

   private final String[] args;

   private final SimpleApplicationEventMulticaster initialMulticaster;

   public EventPublishingRunListener(SpringApplication application, String[] args) {
       this.application = application;
       this.args = args;
       this.initialMulticaster = new SimpleApplicationEventMulticaster();
       for (ApplicationListener&lt;?&gt; listener : application.getListeners()) {
           this.initialMulticaster.addApplicationListener(listener);
       }
   }
}
</code></pre>
<p>我们先看一下构造函数，首先将我们获取到的ApplicationListener 集合添加到<code>initialMulticaster</code>中， 最后都是通过操作<code>SimpleApplicationEventMulticaster</code> 来进行广播，我，他继承于 <code>AbstractApplicationEventMulticaster</code>。</p>
<h4 id="122-环境准备">1.2.2 环境准备</h4>
<pre><code class="language-java">private ConfigurableEnvironment prepareEnvironment(SpringApplicationRunListeners listeners,
        ApplicationArguments applicationArguments) {
    // 根据类型创建对应的 environment
    ConfigurableEnvironment environment = getOrCreateEnvironment();
    // 配置 environment 信息
    configureEnvironment(environment, applicationArguments.getSourceArgs());
    ConfigurationPropertySources.attach(environment);
    // 发送 prepareEnviroment 事件
    listeners.environmentPrepared(environment);
    bindToSpringApplication(environment);
    if (!this.isCustomEnvironment) {
        environment = new EnvironmentConverter(getClassLoader()).convertEnvironmentIfNecessary(environment,
                deduceEnvironmentClass());
    }
    ConfigurationPropertySources.attach(environment);
    return environment;
}
</code></pre>
<p>首先是调用 <code>getOrCreateEnvironment</code>方法来创建<code>environment</code>，我们跟进去可以发现这里是根据我们上面设置的环境的类型来进行选择的。</p>
<pre><code class="language-java">private ConfigurableEnvironment getOrCreateEnvironment() {
    if (this.environment != null) {
        return this.environment;
    } else {
        switch(this.webApplicationType) {
        case SERVLET:
            return new StandardServletEnvironment();
        case REACTIVE:
            return new StandardReactiveWebEnvironment();
        default:
            return new StandardEnvironment();
        }
    }
}
</code></pre>
<p>在创建完成 Environment 后，接下来就到了调用 configureEnvironment 方法：</p>
<pre><code class="language-java">protected void configureEnvironment(ConfigurableEnvironment environment, String[] args) {
    if (this.addConversionService) {
        ConversionService conversionService = ApplicationConversionService.getSharedInstance();
        environment.setConversionService((ConfigurableConversionService) conversionService);
    }
    // 配置PropertySources
    configurePropertySources(environment, args);
    // 配置Profiles
    configureProfiles(environment, args);
}
</code></pre>
<p>我们先看一下 <code>configurePropertySources</code> 方法，这里主要分两部分，首先是查询当前是否存在 <code>defaultProperties</code> ，假如不为空就会添加到 <code>environment</code>的<code>propertySources</code>中，接着是处理命令行参数，将命令行参数作为一个<code>CompositePropertySource</code>或者<code>SimpleCommandLinePropertySource</code>添加到 <code>environment</code>的<code>propertySources</code>里面，</p>
<pre><code class="language-java">protected void configurePropertySources(ConfigurableEnvironment environment, String[] args) {
    MutablePropertySources sources = environment.getPropertySources();
    if (this.defaultProperties != null &amp;&amp; !this.defaultProperties.isEmpty()) {
        sources.addLast(new MapPropertySource(&quot;defaultProperties&quot;, this.defaultProperties));
    }
    if (this.addCommandLineProperties &amp;&amp; args.length &gt; 0) {
        String name = &quot;commandLineArgs&quot;;
        if (sources.contains(name)) {
            PropertySource&lt;?&gt; source = sources.get(name);
            CompositePropertySource composite = new CompositePropertySource(name);
            composite.addPropertySource(new SimpleCommandLinePropertySource(&quot;springApplicationCommandLineArgs&quot;, args));
            composite.addPropertySource(source);
            sources.replace(name, composite);
        } else {
            sources.addFirst(new SimpleCommandLinePropertySource(args));
        }
    }
}
</code></pre>
<p>接着调用 <code>ConfigurationPropertySources#attach</code>方法,他会先去 environment 中查找 configurationProperties , 假如寻找到了，先检查 configurationProperties 和当前 environment 是否匹配，假如不相等，就先去除，最后添加 configurationProperties 并将其 sources 属性设置进去。</p>
<pre><code class="language-java">public static void attach(Environment environment) {
    Assert.isInstanceOf(ConfigurableEnvironment.class, environment);
    MutablePropertySources sources = ((ConfigurableEnvironment) environment).getPropertySources();
    PropertySource&lt;?&gt; attached = sources.get(ATTACHED_PROPERTY_SOURCE_NAME);
    if (attached != null &amp;&amp; attached.getSource() != sources) {
        sources.remove(ATTACHED_PROPERTY_SOURCE_NAME);
        attached = null;
    }
    if (attached == null) {
        sources.addFirst(new ConfigurationPropertySourcesPropertySource(ATTACHED_PROPERTY_SOURCE_NAME,
                new SpringConfigurationPropertySources(sources)));
    }
}
</code></pre>
<p>下一步是通知观察者，发送<code>ApplicationEnvironmentPreparedEvent</code>事件，调用的是 <code>SpringApplicationRunListeners#environmentPrepared</code>方法。会唤醒<code>ConfigFileApplicationListener</code>监听器执行相应逻辑。最主要的加载方法load中，首先会获取到配置文件的搜索路径。如果设置了<code>spring.config.location</code>则会去指定目录下搜索，否则就去默认的搜索目录下<code>classpath:/,classpath:/config/,file:./,file:./config/</code>。</p>
<p>拿到所有待搜索目录后，遍历每个目录获取需要加载的配置文件。如果指定了spring.config.name，则加载指定名称的配置文件。否则使用默认的application作为配置文件的前缀名。然后，会利用<code>PropertiesPropertySourceLoader</code>和<code>YamlPropertySourceLoader</code>加载后缀名为<code>properties</code>、<code>xml</code>、<code>yml</code>或者<code>yaml</code>的文件。</p>
<p>拿到文件目录和文件名后，就可以去对应的路径下加载配置文件了。核心的过程是利用输入流读取配置文件，并根据读到的分隔符进行判断来切分配置文件的key和value。并将内容以key-value键值对的形式封装成一个<code>OriginTrackedMapPropertySource</code>，最后再将一个个配置文件封装成<code>Document</code>。最后遍历这些<code>Documents</code>，调用consumer.accept(profile, document));供上层调用访问。</p>
<p>由于监听器的真正执行是通过调用<code>listener.onApplicationEvent(event)</code>方法来执行的，因此我们从该方法开始分析：</p>
<pre><code class="language-java">public void onApplicationEvent(ApplicationEvent event) {
    if (event instanceof ApplicationEnvironmentPreparedEvent) {
        this.onApplicationEnvironmentPreparedEvent((ApplicationEnvironmentPreparedEvent)event);
    }

    if (event instanceof ApplicationPreparedEvent) {
        this.onApplicationPreparedEvent(event);
    }

}

private void onApplicationEnvironmentPreparedEvent(ApplicationEnvironmentPreparedEvent event) {
    List&lt;EnvironmentPostProcessor&gt; postProcessors = this.loadPostProcessors();
    postProcessors.add(this);
    AnnotationAwareOrderComparator.sort(postProcessors);
    Iterator var3 = postProcessors.iterator();

    while(var3.hasNext()) {
        EnvironmentPostProcessor postProcessor = (EnvironmentPostProcessor)var3.next();
        postProcessor.postProcessEnvironment(event.getEnvironment(), event.getSpringApplication());
    }

}
</code></pre>
<p>这里loadPostProcessors方法就是从spring.factories中加载EnvironmentPostProcessor接口对应的实现类，并把当前对象也添加进去(因为ConfigFileApplicationListener也实现了EnvironmentPostProcessor接口，所以可以添加)。因此在下方遍历时，会访问该类下的postProcessEnvironment方法，从该方法中进入：</p>
<pre><code class="language-java">public void load() {
    this.profiles = new LinkedList();
    this.processedProfiles = new LinkedList();
    this.activatedProfiles = false;
    this.loaded = new LinkedHashMap();
    this.initializeProfiles();

    while(!this.profiles.isEmpty()) {
        ConfigFileApplicationListener.Profile profile = (ConfigFileApplicationListener.Profile)this.profiles.poll();
        if (profile != null &amp;&amp; !profile.isDefaultProfile()) {
            this.addProfileToEnvironment(profile.getName());
        }

        this.load(profile, this::getPositiveProfileFilter, this.addToLoaded(MutablePropertySources::addLast, false));
        this.processedProfiles.add(profile);
    }

    this.resetEnvironmentProfiles(this.processedProfiles);
    this.load((ConfigFileApplicationListener.Profile)null, this::getNegativeProfileFilter, this.addToLoaded(MutablePropertySources::addFirst, true));
    this.addLoadedPropertySources();
}
</code></pre>
<p>其中 apply 方法主要是加载 defaultProperties ，假如已经存在，就进行替换，而替换的目标 PropertySource 就是 load这里最后的一个 consumer 函数加载出来的，这里列一下主要做的事情：<br>
1、加载系统中设置的所有的 Profile 。<br>
2、遍历所有的 Profile，假如是默认的 Profile， 就将这个 Profile 加到 environment 中。<br>
3、调用load 方法，加载配置，我们深入看一下这个方法：</p>
<pre><code class="language-java">private void load(ConfigFileApplicationListener.Profile profile, ConfigFileApplicationListener.DocumentFilterFactory filterFactory, ConfigFileApplicationListener.DocumentConsumer consumer) {
        this.getSearchLocations().forEach((location) -&gt; {
            boolean isFolder = location.endsWith(&quot;/&quot;);
            Set&lt;String&gt; names = isFolder ? this.getSearchNames() : ConfigFileApplicationListener.NO_SEARCH_NAMES;
            names.forEach((name) -&gt; {
                this.load(location, name, profile, filterFactory, consumer);
            });
        });
    }
</code></pre>
<p>首先调用了getSearchLocations方法</p>
<pre><code class="language-java">private Set&lt;String&gt; getSearchLocations() {
    if (this.environment.containsProperty(&quot;spring.config.location&quot;)) {
        return this.getSearchLocations(&quot;spring.config.location&quot;);
    } else {
        Set&lt;String&gt; locations = this.getSearchLocations(&quot;spring.config.additional-location&quot;);
        locations.addAll(this.asResolvedSet(ConfigFileApplicationListener.this.searchLocations, &quot;classpath:/,classpath:/config/,file:./,file:./config/&quot;));
        return locations;
    }
}
</code></pre>
<p>该方法用于获取配置文件的路径，如果利用spring.config.location指定了配置文件路径，则根据该路径进行加载。否则则根据默认路径加载，而默认路径就是我们最初提到的那四个路径。接下来，再深入asResolvedSet方法内部分析一下:</p>
<pre><code class="language-java">private Set&lt;String&gt; asResolvedSet(String value, String fallback) {
        List&lt;String&gt; list = Arrays.asList(StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(value != null ? this.environment.resolvePlaceholders(value) : fallback)));
        Collections.reverse(list);
        return new LinkedHashSet(list);
    }
</code></pre>
<p>这里的value表示ConfigFileApplicationListener初始化时设置的搜索路径，而fallback就是<code>DEFAULT_SEARCH_LOCATIONS</code>默认搜索路径<code>。StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray()）</code>方法就是以逗号作为分隔符对&quot;<code>classpath:/,classpath:/config/,file:./,file:./config/</code>&quot;进行切割，并返回一个字符数组。而这里的<code>Collections.reverse(list)</code>;之后，就是体现优先级的时候了，先被扫描到的配置文件会优先生效。</p>
<p>这里我们拿到搜索路径之后，load方法里对每个搜索路径进行遍历，首先调用了getSearchNames()方法</p>
<pre><code class="language-java">private Set&lt;String&gt; getSearchNames() {
    if (this.environment.containsProperty(&quot;spring.config.name&quot;)) {
        String property = this.environment.getProperty(&quot;spring.config.name&quot;);
        return this.asResolvedSet(property, (String)null);
    } else {
        return this.asResolvedSet(ConfigFileApplicationListener.this.names, &quot;application&quot;);
    }
}
</code></pre>
<p>该方法中如果我们通过spring.config.name设置了要检索的配置文件前缀，会按设置进行加载，否则加载默认的配置文件前缀即application。<br>
拿到所有需要加载的配置文件前缀后，则遍历每个需要加载的配置文件，进行搜索加载，加载过程如下：</p>
<pre><code class="language-java">private void load(String location, String name, ConfigFileApplicationListener.Profile profile, ConfigFileApplicationListener.DocumentFilterFactory filterFactory, ConfigFileApplicationListener.DocumentConsumer consumer) {
     //下面的if分支默认是不走的，除非我们设置spring.config.name为空或者null
    //或者是spring.config.location指定了配置文件的完整路径，也就是入参location的值
    if (!StringUtils.hasText(name)) {
        Iterator var6 = this.propertySourceLoaders.iterator();

        while(var6.hasNext()) {
            PropertySourceLoader loader = (PropertySourceLoader)var6.next();
            //检查配置文件名的后缀是否符合要求，
            //文件名后缀要求是properties、xml、yml或者yaml
            if (this.canLoadFileExtension(loader, location)) {
                this.load(loader, location, profile, filterFactory.getDocumentFilter(profile), consumer);
                return;
            }
        }
    }

    Set&lt;String&gt; processed = new HashSet();
    Iterator var14 = this.propertySourceLoaders.iterator();
    //propertySourceLoaders属性是在Load类的构造方法中设置的，可以加载文件后缀为properties、xml、yml或者yaml的文件
    while(var14.hasNext()) {
        PropertySourceLoader loaderx = (PropertySourceLoader)var14.next();
        String[] var9 = loaderx.getFileExtensions();
        int var10 = var9.length;

        for(int var11 = 0; var11 &lt; var10; ++var11) {
            String fileExtension = var9[var11];
            if (processed.add(fileExtension)) {
                this.loadForFileExtension(loaderx, location + name, &quot;.&quot; + fileExtension, profile, filterFactory, consumer);
            }
        }
    }

}
</code></pre>
<p><code>this.propertySourceLoaders</code>既包含了上面提到的两个<code>PropertiesPropertySourceLoader</code>和<code>YamlPropertySourceLoader</code>，PropertiesPropertySourceLoader可以加载文件扩展名为properties和xml的文件，YamlPropertySourceLoader可以加载文件扩展名为yml和yaml的文件。获取到搜索路径、文件名和扩展名后，就可以到对应的路径下去检索配置文件并加载了。</p>
<pre><code class="language-java">private void loadForFileExtension(PropertySourceLoader loader, String prefix, String fileExtension, ConfigFileApplicationListener.Profile profile, ConfigFileApplicationListener.DocumentFilterFactory filterFactory, ConfigFileApplicationListener.DocumentConsumer consumer) {
    ConfigFileApplicationListener.DocumentFilter defaultFilter = filterFactory.getDocumentFilter((ConfigFileApplicationListener.Profile)null);
    ConfigFileApplicationListener.DocumentFilter profileFilter = filterFactory.getDocumentFilter(profile);
    if (profile != null) {
         //在文件名上加上profile值，之后调用load方法加载配置文件，入参带有过滤器，可以防止重复加载
        String profileSpecificFile = prefix + &quot;-&quot; + profile + fileExtension;
        this.load(loader, profileSpecificFile, profile, defaultFilter, consumer);
        this.load(loader, profileSpecificFile, profile, profileFilter, consumer);
        Iterator var10 = this.processedProfiles.iterator();

        while(var10.hasNext()) {
            ConfigFileApplicationListener.Profile processedProfile = (ConfigFileApplicationListener.Profile)var10.next();
            if (processedProfile != null) {
                String previouslyLoaded = prefix + &quot;-&quot; + processedProfile + fileExtension;
                this.load(loader, previouslyLoaded, profile, profileFilter, consumer);
            }
        }
    }
    //加载不带profile的配置文件
    this.load(loader, prefix + fileExtension, profile, profileFilter, consumer);
}
</code></pre>
<pre><code class="language-java">// 加载配置文件
private void load(PropertySourceLoader loader, String location, Profile profile, DocumentFilter filter,
                DocumentConsumer consumer) {
    try {
               //调用Resource类到指定路径加载配置文件
               // location比如file:./config/application.properties
        Resource resource = this.resourceLoader.getResource(location);
        if (resource == null || !resource.exists()) {
            if (this.logger.isTraceEnabled()) {
                StringBuilder description = getDescription(&quot;Skipped missing config &quot;, location, resource,
                        profile);
                this.logger.trace(description);
            }
            return;
        }
        if (!StringUtils.hasText(StringUtils.getFilenameExtension(resource.getFilename()))) {
            if (this.logger.isTraceEnabled()) {
                StringBuilder description = getDescription(&quot;Skipped empty config extension &quot;, location,
                        resource, profile);
                this.logger.trace(description);
            }
            return;
        }
        String name = &quot;applicationConfig: [&quot; + location + &quot;]&quot;;
               //读取配置文件内容，将其封装到Document类中，解析文件内容主要是找到
        //配置spring.profiles.active和spring.profiles.include的值
        List&lt;Document&gt; documents = loadDocuments(loader, name, resource);
               //如果文件没有配置数据，则跳过
        if (CollectionUtils.isEmpty(documents)) {
            if (this.logger.isTraceEnabled()) {
                StringBuilder description = getDescription(&quot;Skipped unloaded config &quot;, location, resource,
                        profile);
                this.logger.trace(description);
            }
            return;
        }
        List&lt;Document&gt; loaded = new ArrayList&lt;&gt;();
               //遍历配置文件，处理里面配置的profile
        for (Document document : documents) {
            if (filter.match(document)) {
                       //将配置文件中配置的spring.profiles.active和
                   //spring.profiles.include的值写入集合profiles中，
                   //上层调用方法会读取profiles集合中的值，并读取对应的配置文件
                   //addActiveProfiles方法只在第一次调用时会起作用，里面有判断
                addActiveProfiles(document.getActiveProfiles());
                addIncludedProfiles(document.getIncludeProfiles());
                loaded.add(document);
            }
        }
        Collections.reverse(loaded);
        if (!loaded.isEmpty()) {
            loaded.forEach((document) -&gt; consumer.accept(profile, document));
            if (this.logger.isDebugEnabled()) {
                StringBuilder description = getDescription(&quot;Loaded config file &quot;, location, resource, profile);
                this.logger.debug(description);
            }
        }
    }
    catch (Exception ex) {
        throw new IllegalStateException(&quot;Failed to load property source from location '&quot; + location + &quot;'&quot;, ex);
    }
}
</code></pre>
<p>该方法首先调用<code>this.resourceLoader.getResource(location)</code>;用来判断<code>location路径</code>下的文件是否存在，如果存在，会调用loadDocuments方法对配置文件进行加载：</p>
<pre><code class="language-java">private List&lt;ConfigFileApplicationListener.Document&gt; loadDocuments(PropertySourceLoader loader, String name, Resource resource) throws IOException {
    ConfigFileApplicationListener.DocumentsCacheKey cacheKey = new ConfigFileApplicationListener.DocumentsCacheKey(loader, resource);
    List&lt;ConfigFileApplicationListener.Document&gt; documents = (List)this.loadDocumentsCache.get(cacheKey);
    if (documents == null) {
        List&lt;PropertySource&lt;?&gt;&gt; loaded = loader.load(name, resource);
        documents = this.asDocuments(loaded);
        this.loadDocumentsCache.put(cacheKey, documents);
    }

    return documents;
}
</code></pre>
<p>再内部根据不同的<code>PropertySourceLoader</code>调用相应的load方法和<code>loadProperties(resource)</code>方法</p>
<pre><code class="language-java">public List&lt;PropertySource&lt;?&gt;&gt; load(String name, Resource resource) throws IOException {
    Map&lt;String, ?&gt; properties = this.loadProperties(resource);
    return properties.isEmpty() ? Collections.emptyList() : Collections.singletonList(new OriginTrackedMapPropertySource(name, properties));
}

private Map&lt;String, ?&gt; loadProperties(Resource resource) throws IOException {
    String filename = resource.getFilename();
    return (Map)(filename != null &amp;&amp; filename.endsWith(&quot;.xml&quot;) ? PropertiesLoaderUtils.loadProperties(resource) : (new OriginTrackedPropertiesLoader(resource)).load());
}
</code></pre>
<p>由于我们目前的配置文件只有application.properties，也就是文件结尾不是以xml作为扩展名。因此loadProperties方法会进入到<code>new OriginTrackedPropertiesLoader</code>。因此再进入到<code>new OriginTrackedPropertiesLoader(resource).load()</code>;。</p>
<pre><code class="language-java">public Map&lt;String, OriginTrackedValue&gt; load(boolean expandLists) throws IOException {
    OriginTrackedPropertiesLoader.CharacterReader reader = new OriginTrackedPropertiesLoader.CharacterReader(this.resource);
    Throwable var3 = null;

    try {
        Map&lt;String, OriginTrackedValue&gt; result = new LinkedHashMap();
        StringBuilder buffer = new StringBuilder();

        while(reader.read()) {
            String key = this.loadKey(buffer, reader).trim();
            if (expandLists &amp;&amp; key.endsWith(&quot;[]&quot;)) {
                key = key.substring(0, key.length() - 2);
                int var19 = 0;

                while(true) {
                    OriginTrackedValue value = this.loadValue(buffer, reader, true);
                    this.put(result, key + &quot;[&quot; + var19++ + &quot;]&quot;, value);
                    if (!reader.isEndOfLine()) {
                        reader.read();
                    }

                    if (reader.isEndOfLine()) {
                        break;
                    }
                }
            } else {
                OriginTrackedValue value = this.loadValue(buffer, reader, false);
                this.put(result, key, value);
            }
        }

        LinkedHashMap var18 = result;
        return var18;
    } catch (Throwable var16) {
        var3 = var16;
        throw var16;
    } 
}
</code></pre>
<pre><code class="language-java">CharacterReader(Resource resource) throws IOException {
            this.reader = new LineNumberReader(new InputStreamReader(resource.getInputStream(), StandardCharsets.ISO_8859_1));
        }
</code></pre>
<pre><code class="language-java">private String loadKey(StringBuilder buffer, OriginTrackedPropertiesLoader.CharacterReader reader) throws IOException {
    buffer.setLength(0);
    boolean previousWhitespace = false;

    while(!reader.isEndOfLine()) {
        // 判断读取到的字节是否为'=' 或者为 ':'，如果是则直接返回读取都的buffer内容
        if (reader.isPropertyDelimiter()) {
            reader.read();
            return buffer.toString();
        }

        if (!reader.isWhiteSpace() &amp;&amp; previousWhitespace) {
            return buffer.toString();
        }

        previousWhitespace = reader.isWhiteSpace();
        buffer.append(reader.getCharacter());
        reader.read();
    }

    return buffer.toString();
}

private OriginTrackedValue loadValue(StringBuilder buffer, OriginTrackedPropertiesLoader.CharacterReader reader, boolean splitLists) throws IOException {
    buffer.setLength(0);

    while(reader.isWhiteSpace() &amp;&amp; !reader.isEndOfLine()) {
        reader.read();
    }

    Location location = reader.getLocation();

    while(!reader.isEndOfLine() &amp;&amp; (!splitLists || !reader.isListDelimiter())) {
        buffer.append(reader.getCharacter());
        reader.read();
    }

    Origin origin = new TextResourceOrigin(this.resource, location);
    return OriginTrackedValue.of(buffer.toString(), origin);
}
</code></pre>
<p>在这个方法里，首先<code>CharacterReader</code>方法将我们的resource也就是配置文件转为了<code>输入流</code>，然后利用<code>reader.read()</code>进行读取，在loadKey方法中我们看到，这里判断读取到的是否为<code>'='</code>或者为<code>':'</code>，也就是我们在配置文件中以'='或者':'分割的key-value。因此看到这里，我们可以直观的感受到这里应该是读取配置文件，并切分key和value的地方。<br>
最终，对配置文件读取完成后，会将其以key-value的形式封装到一个<code>Map集合</code>中进行返回，然后封装到<code>OriginTrackedMapPropertySource</code>中作为一个<code>MapPropertySource</code>对象。再层层往上回退发现会最终封装成一个<code>asDocuments(loaded)</code>;Document对象。最后回到最上层的load方法中，loadDocuments(loader, name, resource);方法即返回我们加载好的配置文件Document对象集合。并对集合中的每一个配置文件document对象进行遍历，调用loaded.forEach((document) -&gt; consumer.accept(profile, document));</p>
<h4 id="123-创建-applicationcontext">1.2.3 创建 ApplicationContext</h4>
<p>首先是检查 Application的类型，然后获取对应的<code>ApplicationContext</code>类，我们这里是获取到了 <code>org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext</code>接着调用 <code>BeanUtils.instantiateClass(contextClass)</code>; 方法进行对象的初始化。</p>
<pre><code class="language-java">protected ConfigurableApplicationContext createApplicationContext() {
    Class&lt;?&gt; contextClass = this.applicationContextClass;
    if (contextClass == null) {
        try {
            switch(this.webApplicationType) {
            case SERVLET:
                contextClass = Class.forName(&quot;org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext&quot;);
                break;
            case REACTIVE:
                contextClass = Class.forName(&quot;org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext&quot;);
                break;
            default:
                contextClass = Class.forName(&quot;org.springframework.context.annotation.AnnotationConfigApplicationContext&quot;);
            }
        } catch (ClassNotFoundException var3) {
            throw new IllegalStateException(&quot;Unable create a default ApplicationContext, please specify an ApplicationContextClass&quot;, var3);
        }
    }

    return (ConfigurableApplicationContext)BeanUtils.instantiateClass(contextClass);
}
</code></pre>
<p>终其实是调用了 <code>AnnotationConfigServletWebServerApplicationContext</code>的默认构造方法。我们看一下这个方法做了什么事情。这里只是简单的设置了一个 <code>reader</code>和一个 <code>scanner</code>，作用于 bean 的扫描工作。</p>
<p>接下来是获取 ExceptionReporter，获取 ExceptionReporter 的方式主要还是和之前 Listener 的方式一致,通过 getSpringFactoriesInstances 来获取所有的 SpringBootExceptionReporter。</p>
<h4 id="124-准备容器">1.2.4 准备容器</h4>
<pre><code class="language-java">private void prepareContext(ConfigurableApplicationContext context, ConfigurableEnvironment environment,
        SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner) {
    // 为 ApplicationContext 设置 environment
    context.setEnvironment(environment);
    // 执行容器后置处理器
    postProcessApplicationContext(context);
    // 执行容器中的ApplicationContextInitializer
    applyInitializers(context);
        // 发送 ContextPrepareEvent，通知各个监听器。
    listeners.contextPrepared(context);
    if (this.logStartupInfo) {
        // 打印启动新包括 pid 和 用户等。
        logStartupInfo(context.getParent() == null);
        // 打印 Profile 信息
        logStartupProfileInfo(context);
    }
    // Add boot specific singleton beans
    ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();
    // 将启动参数作为 bean 注入到容器中
    beanFactory.registerSingleton(&quot;springApplicationArguments&quot;, applicationArguments);
    if (printedBanner != null) {
        // 将banner 注入到容器中
        beanFactory.registerSingleton(&quot;springBootBanner&quot;, printedBanner);
    }
    if (beanFactory instanceof DefaultListableBeanFactory) {
        // 设置不允许定义同名的BeanDefinition，重复注册时抛出异常
        ((DefaultListableBeanFactory) beanFactory)
                .setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);
    }
    if (this.lazyInitialization) {
        // 如果是懒加载，则添加懒加载后置处理器。
        context.addBeanFactoryPostProcessor(new LazyInitializationBeanFactoryPostProcessor());
    }
    // 获取启动类的参数
    Set&lt;Object&gt; sources = getAllSources();
    Assert.notEmpty(sources, &quot;Sources must not be empty&quot;);
    // 加载启动类，并将其注入到容器中
    load(context, sources.toArray(new Object[0]));
    // 发布 ApplicationPreparedEvent 事件
    listeners.contextLoaded(context);
}
</code></pre>
<p><strong>postProcessApplicationContext</strong><br>
其主要实现如下：<br>
1、首先是指定<code>beanNameGenerator</code>,默认情况下不会进入这里，在没有自定义 beanNameGenerator的情况下，<code>AnnotatedBeanDefinitionReader</code>和<code>ClassPathBeanDefinitionScanner</code>的默认实现是AnnotationBeanNameGenerator，即看是否有 value 定义值，假如没有就将首字母变成小写做为bean的名称。<br>
2、查看是否存在<code>resourceLoader</code>有的话就添加到 beanFactory 中。</p>
<pre><code class="language-java">protected void postProcessApplicationContext(ConfigurableApplicationContext context) {
    if (this.beanNameGenerator != null) {
        context.getBeanFactory().registerSingleton(&quot;org.springframework.context.annotation.internalConfigurationBeanNameGenerator&quot;, this.beanNameGenerator);
    }

    if (this.resourceLoader != null) {
        if (context instanceof GenericApplicationContext) {
            ((GenericApplicationContext)context).setResourceLoader(this.resourceLoader);
        }

        if (context instanceof DefaultResourceLoader) {
            ((DefaultResourceLoader)context).setClassLoader(this.resourceLoader.getClassLoader());
        }
    }
}
</code></pre>
<p><strong>执行 initializer</strong><br>
我们上面提到在初始化 SpringApplication 的时候会加载所有的 ApplicationContextInitializer，到这里就使用到了这些 initializer ，调用每个initializer 的 initialize 方法，并将 Context 作为参数传递进去。</p>
<pre><code class="language-java">protected void applyInitializers(ConfigurableApplicationContext context) {
    Iterator var2 = this.getInitializers().iterator();

    while(var2.hasNext()) {
        ApplicationContextInitializer initializer = (ApplicationContextInitializer)var2.next();
        Class&lt;?&gt; requiredType = GenericTypeResolver.resolveTypeArgument(initializer.getClass(), ApplicationContextInitializer.class);
        Assert.isInstanceOf(requiredType, context, &quot;Unable to call initializer.&quot;);
        initializer.initialize(context);
    }
}
</code></pre>
<p>1、DelegatingApplicationContextInitializer: 从environment中获取context.initializer.classes属性，默认为 null，可以使用多个使用逗号隔开，然后将调用这些类的 initialize 方法。<br>
2、SharedMetadataReaderFactoryContextInitializer 主要是在 beanFactory 中添加一个CachingMetadataReaderFactoryPostProcessor 会在 refreshContext 中被执行。<br>
3、ContextIdApplicationContextInitializer 将 Spring.application.name 作为 ContextId 设置到容器中。<br>
4、ConfigurationWarningsApplicationContextInitializer 向beanFacotory 中注册一个 ConfigurationWarningsPostProcessor 作用是添加一下检查。默认有一个ComponentScanPackageCheck，作用是检查@ComponentScan扫描的包路径是否合法.<br>
5、ServerPortInfoApplicationContextInitializer 向 ApplicationContext 中注册一个 ApplicationListener 用于监听WebServerInitializedEvent事件，向Environment中添加端口号local.sever.port。<br>
ConditionEvaluationReportLoggingListener 向容器中注册一个 ConditionEvaluationReportListener 主要用于打印日志。</p>
<p><strong>执行 ApplicationPrepareContext 通知</strong></p>
<p><strong>load 加载</strong></p>
<pre><code class="language-java">protected void load(ApplicationContext context, Object[] sources) {
    // 打印日志
    if (logger.isDebugEnabled()) {
        logger.debug(&quot;Loading source &quot; + StringUtils.arrayToCommaDelimitedString(sources));
    }
    // 初始化 BeanDefinitionLoader
    BeanDefinitionLoader loader = createBeanDefinitionLoader(getBeanDefinitionRegistry(context), sources);
    // 假如 BeanDefinition 不为空，就将其设置到 loader 中。
    if (this.beanNameGenerator != null) {
        loader.setBeanNameGenerator(this.beanNameGenerator);
    }
    // 如果 resourceLoader  不为空，就将 resourceLoader 设置到 loader 中
    if (this.resourceLoader != null) {
        loader.setResourceLoader(this.resourceLoader);
    }
    // 如果 environment  不为空，就将 environment 设置到 loader 中
    if (this.environment != null) {
        loader.setEnvironment(this.environment);
    }
    // 调用 loader 的 load 方法
    loader.load();
}
</code></pre>
<p>我们先来看一下 createBeanDefinitionLoader 方法：</p>
<pre><code class="language-java">BeanDefinitionLoader(BeanDefinitionRegistry registry, Object... sources) {
    Assert.notNull(registry, &quot;Registry must not be null&quot;);
    Assert.notEmpty(sources, &quot;Sources must not be empty&quot;);
    this.sources = sources;
    this.annotatedReader = new AnnotatedBeanDefinitionReader(registry);
    this.xmlReader = new XmlBeanDefinitionReader(registry);
    if (this.isGroovyPresent()) {
        this.groovyReader = new GroovyBeanDefinitionReader(registry);
    }

    this.scanner = new ClassPathBeanDefinitionScanner(registry);
    this.scanner.addExcludeFilter(new BeanDefinitionLoader.ClassExcludeFilter(sources));
}
</code></pre>
<p>主要做了两件事情：<br>
1、设置 Reader ，包括 AnnotatedBeanDefinitionReader 和 XmlBeanDefinitionReader 假如是Groovy 环境就生成 GroovyBeanDefinitionReader 。<br>
2、设置 Scanner ，主要是 ClassPathBeanDefinitionScanner ,然后检查 Application 中是否存在 ExcludeFilter ，有的话加入到 scanner 中。</p>
<p>接着看load方法：</p>
<pre><code class="language-java">public int load() {
    int count = 0;
    Object[] var2 = this.sources;
    int var3 = var2.length;

    for(int var4 = 0; var4 &lt; var3; ++var4) {
        Object source = var2[var4];
        count += this.load(source);
    }

    return count;
}
</code></pre>
<p>这里的主要逻辑是遍历所有的 sources，这里的其实就是我们的 Main 类。最终调用了 load(Class&lt;?&gt; source) 方法，最终调用了 annotatedReader#register(source)方法。</p>
<h4 id="125-刷新容器">1.2.5 刷新容器</h4>
<pre><code class="language-java">private void refreshContext(ConfigurableApplicationContext context) {
    this.refresh(context);
    if (this.registerShutdownHook) {
        try {
            context.registerShutdownHook();
        } catch (AccessControlException var3) {
        }
    }
}
</code></pre>
<p>主要做两件事情：<br>
1、假如需要注册关闭钩子的话，向 Context 注册关闭钩子。<br>
2、调用 refresh 方法，刷新容器。<br>
我们直接来看一下 refresh 方法，其最终调用了 AbstractApplicationContext 的 refresh 方法。其主要内容如下：</p>
<pre><code class="language-java"> public void refresh() throws BeansException, IllegalStateException {
        synchronized(this.startupShutdownMonitor) {
            //1、准备刷新容器。
            this.prepareRefresh();
            ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory();
            this.prepareBeanFactory(beanFactory);

            try {
                this.postProcessBeanFactory(beanFactory);
                this.invokeBeanFactoryPostProcessors(beanFactory);
                this.registerBeanPostProcessors(beanFactory);
                this.initMessageSource();
                this.initApplicationEventMulticaster();
                this.onRefresh();
                this.registerListeners();
                this.finishBeanFactoryInitialization(beanFactory);
                this.finishRefresh();
            } catch (BeansException var9) {
                if (this.logger.isWarnEnabled()) {
                    this.logger.warn(&quot;Exception encountered during context initialization - cancelling refresh attempt: &quot; + var9);
                }

                this.destroyBeans();
                this.cancelRefresh(var9);
                throw var9;
            } finally {
                this.resetCommonCaches();
            }
        }
    }
</code></pre>
<p>这个方法主要有如下步骤：<br>
1、准备刷新容器。<br>
2、初始化 BeanFactory。<br>
3、对 BeanFactory 进行各种功能的填充，如对 @Autowrite 和 @Qualify 的支持就是这步加入的。<br>
4、调用 postProcessBeanFactory 的扩展点。<br>
5、激活各种 beanFactory 处理器。<br>
6、注册拦截 bean 创建的 bean处理器，这里仅仅是创建而已，最后 getBean 的时候才会真正的调用。<br>
7、初始化 Context 的 MessageSource，为一些国际化的内容。<br>
8、初始化 ApplicationEventMulticaster 并放到 bean 工厂中。<br>
9、扩展点，为其他的 Context 子类来初始化其 bean。<br>
10、在所有的 bean 中找到 listener bean，并将其注册到广播器中。<br>
11、初始化剩下的单例 （no-lazy-init）<br>
12、完成刷新过程，并发出 ContextRefreshEvent 通知。<br>
13、清除缓存。</p>
<h5 id="1251-准备刷新容器">1.2.5.1 准备刷新容器</h5>
<pre><code class="language-java">protected void prepareRefresh() {
    this.startupDate = System.currentTimeMillis();
    this.closed.set(false);
    this.active.set(true);
    if (this.logger.isInfoEnabled()) {
        this.logger.info(&quot;Refreshing &quot; + this);
    }

    this.initPropertySources();
    this.getEnvironment().validateRequiredProperties();
    this.earlyApplicationEvents = new LinkedHashSet();
}
</code></pre>
<p>上面代码比较简单，主要做了如下事情：<br>
1、设置容器启动时间。<br>
2、设置启动状态。<br>
3、调用 initPropertySources 方法，调用到的是 GenericWebApplicationContext 的 initPropertySources 方法，最终调用如下方法：<br>
4、将当前的 ApplicationListeners 放置到 earlyApplicationListeners 中。</p>
<pre><code class="language-java">public static void initServletPropertySources(MutablePropertySources sources, @Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {
    Assert.notNull(sources, &quot;'propertySources' must not be null&quot;);
    String name = &quot;servletContextInitParams&quot;;
    if (servletContext != null &amp;&amp; sources.contains(name) &amp;&amp; sources.get(name) instanceof StubPropertySource) {
        sources.replace(name, new ServletContextPropertySource(name, servletContext));
    }

    name = &quot;servletConfigInitParams&quot;;
    if (servletConfig != null &amp;&amp; sources.contains(name) &amp;&amp; sources.get(name) instanceof StubPropertySource) {
        sources.replace(name, new ServletConfigPropertySource(name, servletConfig));
    }

    //1、如果 `servletContext` 不为空，且是 StubPropertySource 的子类，那么将其转为 `ServletContextPropertySource`.
    //2、如果 `servletConfig` 不为空，且是 StubPropertySource 的子类，那么将其转为 `ServletContextPropertySource`.
    //但是这里的  `servletContext`  和  `servletConfig`  都为空，所以不会进入。
}
</code></pre>
<h5 id="1252-初始化-beanfactory">1.2.5.2 初始化 BeanFactory</h5>
<pre><code class="language-java">protected ConfigurableListableBeanFactory obtainFreshBeanFactory() {
    this.refreshBeanFactory();
    ConfigurableListableBeanFactory beanFactory = this.getBeanFactory();
    if (this.logger.isDebugEnabled()) {
        this.logger.debug(&quot;Bean factory for &quot; + this.getDisplayName() + &quot;: &quot; + beanFactory);
    }

    return beanFactory;
}
</code></pre>
<p>主要做两件事情， <code>refreshBeanFactory</code>，<code>初始化BeanFactory</code>，最终调用了 <code>GenericApplicationContext#refreshBeanFactory</code>，如下：</p>
<pre><code class="language-java">protected final void refreshBeanFactory() throws IllegalStateException {
    if (!this.refreshed.compareAndSet(false, true)) {
        throw new IllegalStateException(&quot;GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once&quot;);
    } else {
        this.beanFactory.setSerializationId(this.getId());
    }
}
</code></pre>
<p>1、设置 refresh 的状态为 <code>TRUE</code>。<br>
2、为 beanFactory 设置<code>setSerializationId</code> ，这个里是 <code>application</code>，其主要由三段式组成 <code>ApplicationName:profile:port</code>。</p>
<p>接下来分析一下 getBeanFactory 方法：</p>
<pre><code class="language-java">public final ConfigurableListableBeanFactory getBeanFactory() {
    return this.beanFactory;
}
</code></pre>
<p>最终还是调用了返回当前 context 的beanFactory，返回一个<code>DefaultListableBeanFactory</code>。</p>
<h5 id="1253-preparebeanfactory">1.2.5.3 prepareBeanFactory</h5>
<pre><code class="language-java">protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) {
    beanFactory.setBeanClassLoader(this.getClassLoader());
    beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));
    beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, this.getEnvironment()));
    beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));
    beanFactory.ignoreDependencyInterface(EnvironmentAware.class);
    beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);
    beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);
    beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);
    beanFactory.ignoreDependencyInterface(MessageSourceAware.class);
    beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);
    beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);
    beanFactory.registerResolvableDependency(ResourceLoader.class, this);
    beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);
    beanFactory.registerResolvableDependency(ApplicationContext.class, this);
    beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));
    if (beanFactory.containsBean(&quot;loadTimeWeaver&quot;)) {
        beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));
        beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));
    }

    if (!beanFactory.containsLocalBean(&quot;environment&quot;)) {
        beanFactory.registerSingleton(&quot;environment&quot;, this.getEnvironment());
    }

    if (!beanFactory.containsLocalBean(&quot;systemProperties&quot;)) {
        beanFactory.registerSingleton(&quot;systemProperties&quot;, this.getEnvironment().getSystemProperties());
    }

    if (!beanFactory.containsLocalBean(&quot;systemEnvironment&quot;)) {
        beanFactory.registerSingleton(&quot;systemEnvironment&quot;, this.getEnvironment().getSystemEnvironment());
    }
}
</code></pre>
<p>1、为 beanFactory 设置类加载器，为当前 context 的类加载器。<br>
2、设置 beanFactory 的 BeanExpressionResolver 为 StandardBeanExpressionResolver。<br>
3、beanFactory增加一个默认的 PropertyEditor,主要用于对 bean 的属性设置进行管理。<br>
4、为 beanFactory 增加一个 BeanPostProcessor 为 ApplicationContextAwareProcessor。<br>
5、将 EnvironmentAware、EmbeddedValueResolverAware、ResourceLoaderAware、ApplicationEventPublisherAware、MessageSourceAware、ApplicationContextAware、添加到忽略自动装配的接口中。,当spring将ApplicationContextAwareProcessor注册后,那么在invokeAwareInterfaces中直接,调用的Aware类已经不是普通的bean了,如ResourceLoaderAware,那么需要在spring做bean的依赖注入时忽略它们。<br>
6、将当前 Context 注册为解析如下依赖的注入对象，包括 BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext。比如说我们调用 @Autowrite 注入 ApplicationContext 就是注入当前的 Context。<br>
7、注册 BeanPostProcessor ， ApplicationListenerDetector 。<br>
8、添加默认的系统环境bean。</p>
<h5 id="1254-postprocessbeanfactory">1.2.5.4 postProcessBeanFactory</h5>
<p>该方法最终调用了子类的 <code>AnnotationConfigServletWebApplicationContext#postProcessBeanFactory</code> ,</p>
<pre><code class="language-java">protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {
    super.postProcessBeanFactory(beanFactory);
    if (this.basePackages != null &amp;&amp; this.basePackages.length &gt; 0) {
        this.scanner.scan(this.basePackages);
    }

    if (!this.annotatedClasses.isEmpty()) {
        this.reader.register(ClassUtils.toClassArray(this.annotatedClasses));
    }
}
</code></pre>
<p>主要做了三件事情：<br>
1、为 BeanFactory 设置了一个为ServletContextAwareProcessor 类型的 BeanPostProcessor，并设置了忽略接口ServletContextAware.<br>
2、假如basePackage 大于 0 的话，就调用 scanner 的 scan 方法。<br>
3、如果 annotatedClasses 大于 0 的话，就调用 AnnotatedBeanDefinitionReader 的 register 方法。</p>
<h5 id="1255-激活各种-bean-处理器">1.2.5.5 激活各种 bean 处理器</h5>
<pre><code class="language-java">protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) {
    PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, this.getBeanFactoryPostProcessors());
    if (beanFactory.getTempClassLoader() == null &amp;&amp; beanFactory.containsBean(&quot;loadTimeWeaver&quot;)) {
        beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));
        beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));
    }
}
</code></pre>
<p>1、调用PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors.<br>
2、如果beanFactory.getTempClassLoader() 等于null并且 beanFactory含有loadTimeWeaver的定义的话,就向beanFactory添加一个LoadTimeWeaverAwareProcessor,然后设置TempClassLoader 为 ContextTypeMatchClassLoader.</p>
<p>其中最重要的就是调用 invokeBeanDefinitionRegistryPostProcessors 方法中，调用了 <code>ConfigurationClassPostProcessor</code>,主要负责加载大部分的 <code>BeanDefinition</code>注册到 registry 中。具体流程如下：</p>
<pre><code class="language-java">public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {
    int registryId = System.identityHashCode(registry);
    if (this.registriesPostProcessed.contains(registryId)) {
        throw new IllegalStateException(&quot;postProcessBeanDefinitionRegistry already called on this post-processor against &quot; + registry);
    } else if (this.factoriesPostProcessed.contains(registryId)) {
        throw new IllegalStateException(&quot;postProcessBeanFactory already called on this post-processor against &quot; + registry);
    } else {
        this.registriesPostProcessed.add(registryId);
        this.processConfigBeanDefinitions(registry);
    }
}
</code></pre>
<p>主要做了两件事情：<br>
1、生成当前 registry 的 id，然后到 <code>registriesPostProcessed</code>和 <code>registriesPostProcessed</code>中查找，是否存在，主要作用是去重。<br>
2、假如没有重复调用 <code>processConfigBeanDefinitions</code>去加载。</p>
<p>我们进入<code>processConfigBeanDefinitions</code>中：</p>
<pre><code class="language-java">public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {
    List&lt;BeanDefinitionHolder&gt; configCandidates = new ArrayList&lt;&gt;();
// 获取已经注册的 bean 名称，这里一般是我们的启动 Application 类。
    String[] candidateNames = registry.getBeanDefinitionNames();

    for (String beanName : candidateNames) {
        BeanDefinition beanDef = registry.getBeanDefinition(beanName);
// 假如 beanDefinition 中的 ConfigurationClass 属性为 full 或者 lite 那代表已经解析过了，跳过。
        if (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != null) {
            if (logger.isDebugEnabled()) {
                logger.debug(&quot;Bean definition has already been processed as a configuration class: &quot; + beanDef);
            }
        }
// 判断当前类是否是 config 类，假如是就加入到 configCandidates 中。
        else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {
            configCandidates.add(new BeanDefinitionHolder(beanDef, beanName));
        }
    }
// 假如 configCandidates 为空就返回
    if (configCandidates.isEmpty()) {
        return;
    }
// 对 configCandidates 使用 @Order 注解进行排序
    configCandidates.sort((bd1, bd2) -&gt; {
        int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());
        int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());
        return Integer.compare(i1, i2);
    });

    // Detect any custom bean name generation strategy supplied through the enclosing application context
    SingletonBeanRegistry sbr = null;
    if (registry instanceof SingletonBeanRegistry) {
        sbr = (SingletonBeanRegistry) registry;
        if (!this.localBeanNameGeneratorSet) {
            BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(
                    AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR);
            if (generator != null) {
// 设置 beanNameGenerator
                this.componentScanBeanNameGenerator = generator;
                this.importBeanNameGenerator = generator;
            }
        }
    }
    if (this.environment == null) {
        this.environment = new StandardEnvironment();
    }
//实例化 ConfigurationClassParser 为后续解析准备。
    ConfigurationClassParser parser = new ConfigurationClassParser(
            this.metadataReaderFactory, this.problemReporter, this.environment,
            this.resourceLoader, this.componentScanBeanNameGenerator, registry);
// 初始话 candidates 和 alreadyParsed 两个集合
    Set&lt;BeanDefinitionHolder&gt; candidates = new LinkedHashSet&lt;&gt;(configCandidates);
    Set&lt;ConfigurationClass&gt; alreadyParsed = new HashSet&lt;&gt;(configCandidates.size());
    do {
// 进行解析
        parser.parse(candidates);
        parser.validate();
// 获取解析到的 ConfigurationClass
        Set&lt;ConfigurationClass&gt; configClasses = new LinkedHashSet&lt;&gt;(parser.getConfigurationClasses());
        configClasses.removeAll(alreadyParsed);
        // Read the model and create bean definitions based on its content
        if (this.reader == null) {
            this.reader = new ConfigurationClassBeanDefinitionReader(
                    registry, this.sourceExtractor, this.resourceLoader, this.environment,
                    this.importBeanNameGenerator, parser.getImportRegistry());
        }
// 加载 ConfigurationClass 的 beanDefinition
        this.reader.loadBeanDefinitions(configClasses);
// 添加到 ConfigurationClass 中。
        alreadyParsed.addAll(configClasses);
        candidates.clear();
        if (registry.getBeanDefinitionCount() &gt; candidateNames.length) {
            String[] newCandidateNames = registry.getBeanDefinitionNames();
            Set&lt;String&gt; oldCandidateNames = new HashSet&lt;&gt;(Arrays.asList(candidateNames));
            Set&lt;String&gt; alreadyParsedClasses = new HashSet&lt;&gt;();
            for (ConfigurationClass configurationClass : alreadyParsed) {
                alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());
            }
            for (String candidateName : newCandidateNames) {
                if (!oldCandidateNames.contains(candidateName)) {
                    BeanDefinition bd = registry.getBeanDefinition(candidateName);
                    if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &amp;&amp;
                            !alreadyParsedClasses.contains(bd.getBeanClassName())) {
                        candidates.add(new BeanDefinitionHolder(bd, candidateName));
                    }
                }
            }
            candidateNames = newCandidateNames;
        }
    }
    while (!candidates.isEmpty());
    // Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes
    if (sbr != null &amp;&amp; !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {
        sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());
    }

    if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {
        // Clear cache in externally provided MetadataReaderFactory; this is a no-op
        // for a shared cache since it'll be cleared by the ApplicationContext.
        ((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache();
    }
}
</code></pre>
<p>主要做了如下7件事情：<br>
1、获取已经注册的bean名称进行遍历：<br>
2、对configCandidates 进行 排序,按照@Order 配置的值进行排序。<br>
3、如果BeanDefinitionRegistry 是SingletonBeanRegistry 子类的话,将registry强转为SingletonBeanRegistry。<br>
4、实例化ConfigurationClassParser 为了解析各个配置类.实例化2个set,candidates 用于将之前加入的configCandidates 进行去重,alreadyParsed 用于判断是否处理过。<br>
5、进行解析。<br>
6、如果SingletonBeanRegistry 不包含org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry,则注册一个,bean 为 ImportRegistry. 一般都会进行注册的。<br>
7、清除缓存。</p>
<p>我们先来看一下判断该 bean 是否为<code>configClass</code>的方法。</p>
<pre><code class="language-java">public static boolean checkConfigurationClassCandidate(
        BeanDefinition beanDef, MetadataReaderFactory metadataReaderFactory) {
// 获取类名，假如不存在则返回。
    String className = beanDef.getBeanClassName();
    if (className == null || beanDef.getFactoryMethodName() != null) {
        return false;
    }
// 获取 AnnotationMetadata
    AnnotationMetadata metadata;
    if (beanDef instanceof AnnotatedBeanDefinition &amp;&amp;
            className.equals(((AnnotatedBeanDefinition) beanDef).getMetadata().getClassName())) {
// 检查是否可以是 AnnotatedBeanDefinition ，是就直接从 BeanDefinition 中获取
        metadata = ((AnnotatedBeanDefinition) beanDef).getMetadata();
    }
    else if (beanDef instanceof AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) beanDef).hasBeanClass()) {
// 如果BeanDefinition 是 AnnotatedBeanDefinition的实例,并且beanDef 有 beanClass 属性存在没有则实例化StandardAnnotationMetadata
        Class&lt;?&gt; beanClass = ((AbstractBeanDefinition) beanDef).getBeanClass();
        if (BeanFactoryPostProcessor.class.isAssignableFrom(beanClass) ||
                BeanPostProcessor.class.isAssignableFrom(beanClass) ||
                AopInfrastructureBean.class.isAssignableFrom(beanClass) ||
                EventListenerFactory.class.isAssignableFrom(beanClass)) {
            return false;
        }
        metadata = AnnotationMetadata.introspect(beanClass);
    }
    else {
        try {
// 否则 通过MetadataReaderFactory 中的MetadataReader 进行读取
            MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(className);
            metadata = metadataReader.getAnnotationMetadata();
        }
        catch (IOException ex) {
            if (logger.isDebugEnabled()) {
                logger.debug(&quot;Could not find class file for introspecting configuration annotations: &quot; +
                        className, ex);
            }
            return false;
        }
    }
// 如果存在Configuration 注解,则为BeanDefinition 设置configurationClass属性为full
    Map&lt;String, Object&gt; config = metadata.getAnnotationAttributes(Configuration.class.getName());
    if (config != null &amp;&amp; !Boolean.FALSE.equals(config.get(&quot;proxyBeanMethods&quot;))) {
        beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL);
    }
// 如果AnnotationMetadata 中有Component,ComponentScan,Import,ImportResource 注解中的任意一个,或者存在 被@bean 注解的方法,则返回true
    else if (config != null || isConfigurationCandidate(metadata)) {
        beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE);
    }
    else {
        return false;
    }
    Integer order = getOrder(metadata);
    if (order != null) {
        beanDef.setAttribute(ORDER_ATTRIBUTE, order);
    }
    return true;
}
</code></pre>
<p>接着来看<code>ConfigurationClassParser</code>的<code>parser()</code>:</p>
<pre><code class="language-java">public void parse(Set&lt;BeanDefinitionHolder&gt; configCandidates) {
    for (BeanDefinitionHolder holder : configCandidates) {
        BeanDefinition bd = holder.getBeanDefinition();
        try {
            if (bd instanceof AnnotatedBeanDefinition) {
                parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());
            }
            else if (bd instanceof AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) {
                parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());
            }
            else {
                parse(bd.getBeanClassName(), holder.getBeanName());
            }
        }
        catch (BeanDefinitionStoreException ex) {
            throw ex;
        }
        catch (Throwable ex) {
            throw new BeanDefinitionStoreException(
                    &quot;Failed to parse configuration class [&quot; + bd.getBeanClassName() + &quot;]&quot;, ex);
        }
    }
    this.deferredImportSelectorHandler.process();
}
</code></pre>
<p>其主要做了两件事情：<br>
1、遍历configCandidates ,进行处理.根据BeanDefinition 的类型 做不同的处理,一般都会调用ConfigurationClassParser#parse 进行解析。<br>
2、处理ImportSelect。<br>
我们先来看一下第一步：</p>
<pre><code class="language-java">protected void processConfigurationClass(ConfigurationClass configClass, Predicate&lt;String&gt; filter) throws IOException {
    if (this.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.PARSE_CONFIGURATION)) {
        return;
    }
    ConfigurationClass existingClass = this.configurationClasses.get(configClass);
    if (existingClass != null) {
        if (configClass.isImported()) {
            if (existingClass.isImported()) {
                existingClass.mergeImportedBy(configClass);
            }
            // Otherwise ignore new imported config class; existing non-imported class overrides it.
            return;
        }
        else {
            // Explicit bean definition found, probably replacing an import.
            // Let's remove the old one and go with the new one.
            this.configurationClasses.remove(configClass);
            this.knownSuperclasses.values().removeIf(configClass::equals);
        }
    }

    // Recursively process the configuration class and its superclass hierarchy.
    SourceClass sourceClass = asSourceClass(configClass, filter);
    do {
        sourceClass = doProcessConfigurationClass(configClass, sourceClass, filter);
    }
    while (sourceClass != null);

    this.configurationClasses.put(configClass, configClass);
}
</code></pre>
<p>主要做如下4件事情：<br>
1、调用 shouldSkip 方法来判断该 configClass 是否需要 跳过。<br>
2、处理Imported 的情况。<br>
3、递归调用进行解析。<br>
4、添加到configurationClasses中。<br>
我们先来看一下真正解析的步骤 <code>doProcessConfigurationClass</code> 方法：</p>
<pre><code class="language-java">protected final SourceClass doProcessConfigurationClass(
        ConfigurationClass configClass, SourceClass sourceClass, Predicate&lt;String&gt; filter)
        throws IOException {

    if (configClass.getMetadata().isAnnotated(Component.class.getName())) {
        // Recursively process any member (nested) classes first
        processMemberClasses(configClass, sourceClass, filter);
    }

    // Process any @PropertySource annotations
    for (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(
            sourceClass.getMetadata(), PropertySources.class,
            org.springframework.context.annotation.PropertySource.class)) {
        if (this.environment instanceof ConfigurableEnvironment) {
            processPropertySource(propertySource);
        }
        else {
            logger.info(&quot;Ignoring @PropertySource annotation on [&quot; + sourceClass.getMetadata().getClassName() +
                    &quot;]. Reason: Environment must implement ConfigurableEnvironment&quot;);
        }
    }

    // Process any @ComponentScan annotations
    Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(
            sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);
    if (!componentScans.isEmpty() &amp;&amp;
            !this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {
        for (AnnotationAttributes componentScan : componentScans) {
            // The config class is annotated with @ComponentScan -&gt; perform the scan immediately
            Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =
                    this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());
            // Check the set of scanned definitions for any further config classes and parse recursively if needed
            for (BeanDefinitionHolder holder : scannedBeanDefinitions) {
                BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();
                if (bdCand == null) {
                    bdCand = holder.getBeanDefinition();
                }
                if (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, this.metadataReaderFactory)) {
                    parse(bdCand.getBeanClassName(), holder.getBeanName());
                }
            }
        }
    }
    // Process any @Import annotations
    processImports(configClass, sourceClass, getImports(sourceClass), filter, true);
    // Process any @ImportResource annotations
    AnnotationAttributes importResource =
            AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);
    if (importResource != null) {
        String[] resources = importResource.getStringArray(&quot;locations&quot;);
        Class&lt;? extends BeanDefinitionReader&gt; readerClass = importResource.getClass(&quot;reader&quot;);
        for (String resource : resources) {
            String resolvedResource = this.environment.resolveRequiredPlaceholders(resource);
            configClass.addImportedResource(resolvedResource, readerClass);
        }
    }
    // Process individual @Bean methods
    Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);
    for (MethodMetadata methodMetadata : beanMethods) {
        configClass.addBeanMethod(new BeanMethod(methodMetadata, configClass));
    }

    // Process default methods on interfaces
    processInterfaces(configClass, sourceClass);

    // Process superclass, if any
    if (sourceClass.getMetadata().hasSuperClass()) {
        String superclass = sourceClass.getMetadata().getSuperClassName();
        if (superclass != null &amp;&amp; !superclass.startsWith(&quot;java&quot;) &amp;&amp;
                !this.knownSuperclasses.containsKey(superclass)) {
            this.knownSuperclasses.put(superclass, configClass);
            // Superclass found, return its annotation metadata and recurse
            return sourceClass.getSuperClass();
        }
    }
    // No superclass -&gt; processing is complete
    return null;
}
</code></pre>
<p>主要做了如下8件事情：<br>
1、如果该类使用 @Component 注解，调用 processMemberClasses 方法，其主要作用是将类放到 importStack 中，并且判断是否有循环依赖度问题。<br>
2、处理@PropertySource.通过遍历该类中的@PropertySource的注解,如果该类中的environment是ConfigurableEnvironment 子类的话,则调用processPropertySource进行处理。<br>
3、处理@ComponentScan,通过遍历该类上的@ComponentScan 注解，并使用 conditionEvaluator.shouldSkip 进行判断是否需要跳过。没有就通过ComponentScanAnnotationParser#parse方法进行扫描：<br>
4、处理@Import 注解<br>
5、处理 @ImportResource 注解，先重 config 类中查找是否存在该注解，假如存在，就获取其 location 属性，然后遍历 location 位置中的 bean，加入到 configClass 中的 ImportedResource。<br>
6、处理 @Bean 的方法，遍历 @Bean 的方法，并放到 configClass 的 BeanMethod 中。<br>
7、遍历 configClass 的所有接口的 @Bean 的方法，并放到 configClass 的 BeanMethod 中。<br>
8、如果存在父类的话，就将父类放到 knownSuperclasses 中，并返回，返回就类似于递归调用。否则返回 null。</p>
<p>我们回到ConfigurationClassPostProcessor的processConfigBeanDefinitions方法中，接下来是调用 ConfigurationClassBeanDefinitionReader#loadBeanDefinitions 方法。</p>
<pre><code class="language-java">public void loadBeanDefinitions(Set&lt;ConfigurationClass&gt; configurationModel) {
    TrackedConditionEvaluator trackedConditionEvaluator = new TrackedConditionEvaluator();
    for (ConfigurationClass configClass : configurationModel) {
        loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator);
    }
}
</code></pre>
<p>主要做两件事情：<br>
1、实例化 TrackedConditionEvaluator；<br>
2、遍历configurationModel ，使用loadBeanDefinitionsForConfigurationClass 方法加载 BeanDefinition。</p>
<pre><code class="language-java">private void loadBeanDefinitionsForConfigurationClass(
        ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) {

    if (trackedConditionEvaluator.shouldSkip(configClass)) {
        String beanName = configClass.getBeanName();
        if (StringUtils.hasLength(beanName) &amp;&amp; this.registry.containsBeanDefinition(beanName)) {
            this.registry.removeBeanDefinition(beanName);
        }
        this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName());
        return;
    }

    if (configClass.isImported()) {
        registerBeanDefinitionForImportedConfigurationClass(configClass);
    }
    for (BeanMethod beanMethod : configClass.getBeanMethods()) {
        loadBeanDefinitionsForBeanMethod(beanMethod);
    }

    loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());
    loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());
}
</code></pre>
<p>主要做了如下几件事情：<br>
1、调用 trackedConditionEvaluator 来判断条件注解，是否需要跳过这个 config 类。如果需要，就将这个类从容器中移除，并且从 importRegistry 中移除。<br>
2、如果当前类中存在@Import 注解，调用 registerBeanDefinitionForImportedConfigurationClass 方法进行注册<br>
3、遍历BeanMethods,依次对其调用loadBeanDefinitionsForBeanMethod进行注册。<br>
4、处理 @ImportResource 注解,具体如下：</p>
<pre><code class="language-java">private void loadBeanDefinitionsFromImportedResources(
        Map&lt;String, Class&lt;? extends BeanDefinitionReader&gt;&gt; importedResources) {
    Map&lt;Class&lt;?&gt;, BeanDefinitionReader&gt; readerInstanceCache = new HashMap&lt;&gt;();
// 遍历所有的 importedResources
    importedResources.forEach((resource, readerClass) -&gt; {
// 如果是 BeanDefinitionReader，就查看是否是 groovy 类，假如不是就使用 XmlBeanDefinitionReader 类
        if (BeanDefinitionReader.class == readerClass) {
            if (StringUtils.endsWithIgnoreCase(resource, &quot;.groovy&quot;)) {
                readerClass = GroovyBeanDefinitionReader.class;
            }
            else {
                readerClass = XmlBeanDefinitionReader.class;
            }
        }
// 尝试重 readerInstanceCache 读取 BeanDefinitionReader 假如没有就实例化。
        BeanDefinitionReader reader = readerInstanceCache.get(readerClass);
        if (reader == null) {
            try {
                reader = readerClass.getConstructor(BeanDefinitionRegistry.class).newInstance(this.registry);
                if (reader instanceof AbstractBeanDefinitionReader) {
                    AbstractBeanDefinitionReader abdr = ((AbstractBeanDefinitionReader) reader);
                    abdr.setResourceLoader(this.resourceLoader);
                    abdr.setEnvironment(this.environment);
                }
                readerInstanceCache.put(readerClass, reader);
            }
            catch (Throwable ex) {
                throw new IllegalStateException(
                        &quot;Could not instantiate BeanDefinitionReader class [&quot; + readerClass.getName() + &quot;]&quot;);
            }
        }
// 加载 bean
        reader.loadBeanDefinitions(resource);
    });
}
</code></pre>
<p>主要做了四件事情：<br>
1、遍历所有的 importedResources 。<br>
2、选择 BeanDefinitionReader，假如是 groovy 类，就使用 GroovyBeanDefinitionReader 不是就使用 XmlBeanDefinitionReader<br>
3、尝试从readerInstanceCache中获取对应的BeanDefinitionReader,如果不存在,则实例化一个,然后放入到readerInstanceCache缓存中。<br>
4、调用 BeanDefinitionReader#loadBeanDefinitions 进行加载 bean。<br>
5、注册@Import注解中的ImportBeanDefinitionRegistrar接口的registerBeanDefinitions。</p>
<p>接下来，我们继续看容器刷新流程</p>
<h5 id="1256-registerbeanpostprocessors-方法">1.2.5.6 registerBeanPostProcessors 方法</h5>
<p>这个方法最终调用了 PostProcessorRegistrationDelegate#registerBeanPostProcessors，如下：</p>
<pre><code class="language-java">public static void registerBeanPostProcessors(
        ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) {

    String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);

    // Register BeanPostProcessorChecker that logs an info message when
    // a bean is created during BeanPostProcessor instantiation, i.e. when
    // a bean is not eligible for getting processed by all BeanPostProcessors.
    int beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length;
    beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));

    // Separate between BeanPostProcessors that implement PriorityOrdered,
    // Ordered, and the rest.
    List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = new ArrayList&lt;&gt;();
    List&lt;BeanPostProcessor&gt; internalPostProcessors = new ArrayList&lt;&gt;();
    List&lt;String&gt; orderedPostProcessorNames = new ArrayList&lt;&gt;();
    List&lt;String&gt; nonOrderedPostProcessorNames = new ArrayList&lt;&gt;();
    for (String ppName : postProcessorNames) {
        if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {
            BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);
            priorityOrderedPostProcessors.add(pp);
            if (pp instanceof MergedBeanDefinitionPostProcessor) {
                internalPostProcessors.add(pp);
            }
        }
        else if (beanFactory.isTypeMatch(ppName, Ordered.class)) {
            orderedPostProcessorNames.add(ppName);
        }
        else {
            nonOrderedPostProcessorNames.add(ppName);
        }
    }

    // First, register the BeanPostProcessors that implement PriorityOrdered.
    sortPostProcessors(priorityOrderedPostProcessors, beanFactory);
    registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);

    // Next, register the BeanPostProcessors that implement Ordered.
    List&lt;BeanPostProcessor&gt; orderedPostProcessors = new ArrayList&lt;&gt;(orderedPostProcessorNames.size());
    for (String ppName : orderedPostProcessorNames) {
        BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);
        orderedPostProcessors.add(pp);
        if (pp instanceof MergedBeanDefinitionPostProcessor) {
            internalPostProcessors.add(pp);
        }
    }
    sortPostProcessors(orderedPostProcessors, beanFactory);
    registerBeanPostProcessors(beanFactory, orderedPostProcessors);

    // Now, register all regular BeanPostProcessors.
    List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = new ArrayList&lt;&gt;(nonOrderedPostProcessorNames.size());
    for (String ppName : nonOrderedPostProcessorNames) {
        BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);
        nonOrderedPostProcessors.add(pp);
        if (pp instanceof MergedBeanDefinitionPostProcessor) {
            internalPostProcessors.add(pp);
        }
    }
    registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);

    // Finally, re-register all internal BeanPostProcessors.
    sortPostProcessors(internalPostProcessors, beanFactory);
    registerBeanPostProcessors(beanFactory, internalPostProcessors);

    // Re-register post-processor for detecting inner beans as ApplicationListeners,
    // moving it to the end of the processor chain (for picking up proxies etc).
    beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));
}
</code></pre>
<p>1、先从 beanFactory 中获取 BeanPostProcessor 类型的 bean。<br>
2、添加一个BeanPostProcessor ， BeanPostProcessorChecker ，主要用于日志打印。<br>
3、遍历所有的 postProcessorNames ：<br>
（1）将所有实现了 PriorityOrdered 接口的 bean 放到 priorityOrderedPostProcessors 中。<br>
（2）如果bean 即实现了 PriorityOrdered 接口，也实现了 MergedBeanDefinitionPostProcessor 接口的话，将其放到 internalPostProcessors 中。<br>
（3）假如 bean 实现了 Ordered 接口放到 orderedPostProcessorNames 中。<br>
（4）假如都没有，就放到 nonOrderedPostProcessorNames 中。<br>
4、注册 priorityOrderedPostProcessors 的 BPP<br>
5、注册 orderedPostProcessors 的 BPP<br>
6、注册所有 nonOrderedPostProcessors 的 BPP<br>
7、 注册所有MergedBeanDefinitionPostProcessor类型的BeanPostProcessor,并非是重复注册.如下:<br>
8、在最后新增一个BPP 是 ApplicationListenerDetector。</p>
<h5 id="1257-initmessagesource-方法">1.2.5.7 initMessageSource 方法</h5>
<p>1、从 beanFactory 中读取 messageSource ，看是否存在，假如存在，获取之，然后判断是是HierarchicalMessageSource 类型假如是，就将其 ParentMessageSource 设置为 nternalParentMessageSource。<br>
2、如果不存在，就实例化 DelegatingMessageSource 作为 getInternalParentMessageSource 调用的结果。</p>
<h5 id="1258-初始化-applicationeventmulticaster">1.2.5.8 初始化 ApplicationEventMulticaster</h5>
<p>这里的逻辑主要是 如果存在用户自定义的广播器，那么就将其设置为默认广播器。假如不存在就初始化 SimpleApplicationEventMulticaster 作为默认的广播器。</p>
<h5 id="1259-onrefresh">1.2.5.9 Onrefresh</h5>
<p>这个接口是留给子类的扩展点 ServletWebServerApplicationContext 的代码如下：</p>
<pre><code class="language-java">@Override
protected void onRefresh() {
    super.onRefresh();
    try {
        createWebServer();
    }
    catch (Throwable ex) {
        throw new ApplicationContextException(&quot;Unable to start web server&quot;, ex);
    }
}
</code></pre>
<p>1 、先调用父类的 onRefresh 方法<br>
2、调用完父类的 Onfresh 后，创建一个嵌入的Servlet容器.</p>
<pre><code class="language-java">public static ThemeSource initThemeSource(ApplicationContext context) {
    if (context.containsLocalBean(THEME_SOURCE_BEAN_NAME)) {
        ThemeSource themeSource = context.getBean(THEME_SOURCE_BEAN_NAME, ThemeSource.class);
        // Make ThemeSource aware of parent ThemeSource.
        if (context.getParent() instanceof ThemeSource &amp;&amp; themeSource instanceof HierarchicalThemeSource) {
            HierarchicalThemeSource hts = (HierarchicalThemeSource) themeSource;
            if (hts.getParentThemeSource() == null) {
                // Only set parent context as parent ThemeSource if no parent ThemeSource
                // registered already.
                hts.setParentThemeSource((ThemeSource) context.getParent());
            }
        }
        if (logger.isDebugEnabled()) {
            logger.debug(&quot;Using ThemeSource [&quot; + themeSource + &quot;]&quot;);
        }
        return themeSource;
    }
    else {
        // Use default ThemeSource to be able to accept getTheme calls, either
        // delegating to parent context's default or to local ResourceBundleThemeSource.
        HierarchicalThemeSource themeSource = null;
        if (context.getParent() instanceof ThemeSource) {
            themeSource = new DelegatingThemeSource();
            themeSource.setParentThemeSource((ThemeSource) context.getParent());
        }
        else {
            themeSource = new ResourceBundleThemeSource();
        }
        if (logger.isDebugEnabled()) {
            logger.debug(&quot;Unable to locate ThemeSource with name '&quot; + THEME_SOURCE_BEAN_NAME +
                    &quot;': using default [&quot; + themeSource + &quot;]&quot;);
        }
        return themeSource;
    }
}
</code></pre>
<p>1、如果context中有themeSource的定义<br>
（1）从context 获取,id 为themeSource type为ThemeSource 的 bean<br>
（2）如果父容器实现了ThemeSource,并且ThemeSource 是HierarchicalThemeSource 的子类,并且HierarchicalThemeSource 的ParentThemeSource 没有进行设置.则将父容器赋值给HierarchicalThemeSource的ParentThemeSource<br>
2、如果context中没有themeSource的定义<br>
（1）如果父容器为ThemeSource的子类,则实例化DelegatingThemeSource,并将父容器赋值给DelegatingThemeSource的ParentThemeSource<br>
（2）否则实例化为DelegatingThemeSource</p>
<h5 id="12510-registerlisteners-注册监听器">1.2.5.10 registerListeners 注册监听器</h5>
<p>这个方法的主要作用是初始化所有的 listener</p>
<pre><code class="language-java">protected void registerListeners() {
    // Register statically specified listeners first.
    for (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) {
        getApplicationEventMulticaster().addApplicationListener(listener);
    }

    // Do not initialize FactoryBeans here: We need to leave all regular beans
    // uninitialized to let post-processors apply to them!
    String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);
    for (String listenerBeanName : listenerBeanNames) {
        getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
    }

    // Publish early application events now that we finally have a multicaster...
    Set&lt;ApplicationEvent&gt; earlyEventsToProcess = this.earlyApplicationEvents;
    this.earlyApplicationEvents = null;
    if (!CollectionUtils.isEmpty(earlyEventsToProcess)) {
        for (ApplicationEvent earlyEvent : earlyEventsToProcess) {
            getApplicationEventMulticaster().multicastEvent(earlyEvent);
        }
    }
}
</code></pre>
<p>1、硬编码方式注册的监听器添加到SimpleApplicationEventMulticaster中的defaultRetriever的applicationListeners<br>
2、将注册到配置文件中的 ApplicationListener 找出来，并添加到SimpleApplicationEventMulticaster中的defaultRetriever。<br>
3、 将之前发生的 earlyApplicationEvents 重复发送一遍。</p>
<h5 id="12511-finishbeanfactoryinitialization">1.2.5.11 finishBeanFactoryInitialization</h5>
<p>该方法主要作用是 初始化剩余的单例（non-lazy-init)）</p>
<pre><code class="language-java">protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
    // Initialize conversion service for this context.
    if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;
        beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {
        beanFactory.setConversionService(
                beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));
    }

    // Register a default embedded value resolver if no bean post-processor
    // (such as a PropertyPlaceholderConfigurer bean) registered any before:
    // at this point, primarily for resolution in annotation attribute values.
    if (!beanFactory.hasEmbeddedValueResolver()) {
        beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));
    }

    // Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.
    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
    for (String weaverAwareName : weaverAwareNames) {
        getBean(weaverAwareName);
    }

    // Stop using the temporary ClassLoader for type matching.
    beanFactory.setTempClassLoader(null);

    // Allow for caching all bean definition metadata, not expecting further changes.
    beanFactory.freezeConfiguration();

    // Instantiate all remaining (non-lazy-init) singletons.
    beanFactory.preInstantiateSingletons();
}
</code></pre>
<p>1、如果 beaFactory 中存在 CONVERSION_SERVICE_BEAN_NAME name 的 bean，并且类型为 ConversionService.class ，将其设置到 beanFactory 中。<br>
2、如果 beanFactory 中没有 EmbeddedValueResolver，添加一个。<br>
3、设置 type 为 LoadTimeWeaverAware 的bean。<br>
4、设置TempClassLoader 为null<br>
5、冻结所有 bean 的定义，也就是从这里开始，所有的 bean 后面都不允许被修改了。<br>
6、初始化剩下的单实例.</p>
<h5 id="12512-finishrefresh">1.2.5.12 finishRefresh</h5>
<pre><code class="language-java">protected void finishRefresh() {
    // Clear context-level resource caches (such as ASM metadata from scanning).
    clearResourceCaches();

    // Initialize lifecycle processor for this context.
    initLifecycleProcessor();

    // Propagate refresh to lifecycle processor first.
    getLifecycleProcessor().onRefresh();

    // Publish the final event.
    publishEvent(new ContextRefreshedEvent(this));

    // Participate in LiveBeansView MBean, if active.
    LiveBeansView.registerApplicationContext(this);
}
</code></pre>
<p>1、清理 resource caches。<br>
2、初始化LifecycleProcessor.<br>
3、调用 LifecycleProcessor 的 onrefresh 方法。<br>
4、发布ContextRefreshedEvent 事件.</p>
<h5 id="12513-resetcommoncaches">1.2.5.13 resetCommonCaches</h5>
<p>1、清除 ReflectionUtils 缓存。<br>
2、清除 AnnotationUtils 缓存。<br>
3、清除 ResolvableType 缓存。</p>
<h4 id="126-afterrefresh-spring-容器的后置处理器">1.2.6 afterRefresh Spring 容器的后置处理器</h4>
<h4 id="127-通知所有-listener-结束启动">1.2.7 通知所有 listener 结束启动</h4>
<p>这里最终调用了 EventPublishingRunListener#started 方法：</p>
<pre><code class="language-java">public void started(ConfigurableApplicationContext context) {
    context.publishEvent(new ApplicationStartedEvent(this.application, this.args, context));
    AvailabilityChangeEvent.publish(context, LivenessState.CORRECT);
}
</code></pre>
<p>1、首先是调用 context.publishEvent 来发布启动完成事件。<br>
2、调用 AvailabilityChangeEvent 发布 CORRECT 事件，代表启动成功。</p>
<h4 id="128-调用所有-runner-的-run-方法">1.2.8 调用所有 runner 的 run 方法</h4>
<pre><code class="language-java">private void callRunners(ApplicationContext context, ApplicationArguments args) {
    List&lt;Object&gt; runners = new ArrayList&lt;&gt;();
    runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());
    runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());
    AnnotationAwareOrderComparator.sort(runners);
    for (Object runner : new LinkedHashSet&lt;&gt;(runners)) {
        if (runner instanceof ApplicationRunner) {
            callRunner((ApplicationRunner) runner, args);
        }
        if (runner instanceof CommandLineRunner) {
            callRunner((CommandLineRunner) runner, args);
        }
    }
}
</code></pre>
<p>首先查找所有的 ApplicationRunner 和 CommandLineRunner ，然后遍历调用他们的 run 方法。</p>
<h4 id="129-通知所有-listener-running-事件">1.2.9 通知所有 listener running 事件。</h4>
<blockquote>
<p>⚠️大家可以参考这个图，因为没钱买，只能放链接了 <a href="https://www.processon.com/view/60605358f346fb6d9ef1bd9c?fromnew=1" title="springboot启动流程">springboot启动流程</a></p>
</blockquote>
<h2 id="2-springboot-扩展点">2 springboot 扩展点</h2>
<figure data-type="image" tabindex="2"><img src="https://q456qq520.github.io/post-images/1676171242267.png" alt="" loading="lazy"></figure>
<h3 id="21-applicationcontextinitializer">2.1 ApplicationContextInitializer</h3>
<blockquote>
<p>org.springframework.context.ApplicationContextInitializer<br>
这是整个spring容器在刷新之前初始化<code>ConfigurableApplicationContext</code>的回调接口，简单来说，就是在容器刷新之前调用此类的<code>initialize</code>方法。这个点允许被用户自己扩展。用户可以在整个spring容器还没被初始化之前做一些事情。</p>
</blockquote>
<p>可以想到的场景可能为，在最开始激活一些配置，或者利用这时候class还没被类加载器加载的时机，进行动态字节码注入等操作。</p>
<pre><code class="language-java">public class TestApplicationContextInitializer implements ApplicationContextInitializer {
    @Override
    public void initialize(ConfigurableApplicationContext applicationContext) {
        System.out.println(&quot;[ApplicationContextInitializer]&quot;);
    }
}
</code></pre>
<p>因为这时候spring容器还没被初始化，所以想要自己的扩展的生效，有以下三种方式：</p>
<ol>
<li>在启动类中用<code>springApplication.addInitializers(new TestApplicationContextInitializer())</code>语句加入</li>
<li>配置文件配置<br>
<code>context.initializer.classes=com.example.demo.TestApplicationContextInitializer</code></li>
<li>Spring SPI扩展，在<code>spring.factories</code>中加入<code>org.springframework.context.ApplicationContextInitializer=com.example.demo.TestApplicationContextInitializer</code></li>
</ol>
<h3 id="22-beandefinitionregistrypostprocessor">2.2 BeanDefinitionRegistryPostProcessor</h3>
<blockquote>
<p>org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor<br>
这个接口在读取项目中的<code>beanDefinition</code>之后执行，提供一个补充的扩展点</p>
</blockquote>
<p>使用场景：你可以在这里动态注册自己的beanDefinition，可以加载classpath之外的bean</p>
<pre><code class="language-java">public class TestBeanDefinitionRegistryPostProcessor implements BeanDefinitionRegistryPostProcessor {
    @Override
    public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {
        System.out.println(&quot;[BeanDefinitionRegistryPostProcessor] postProcessBeanDefinitionRegistry&quot;);
    }

    @Override
    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
        System.out.println(&quot;[BeanDefinitionRegistryPostProcessor] postProcessBeanFactory&quot;);
    }
}
</code></pre>
<h3 id="23-beanfactorypostprocessor">2.3 BeanFactoryPostProcessor</h3>
<blockquote>
<p>org.springframework.beans.factory.config.BeanFactoryPostProcessor<br>
这个接口是<code>beanFactory</code>的扩展接口，调用时机在spring在读取beanDefinition信息之后，实例化bean之前。</p>
</blockquote>
<p>在这个时机，用户可以通过实现这个扩展接口来自行处理一些东西，比如修改已经注册的beanDefinition的元信息。</p>
<pre><code class="language-java">public class TestBeanFactoryPostProcessor implements BeanFactoryPostProcessor {
@Override
public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
    System.out.println(&quot;[BeanFactoryPostProcessor]&quot;);
}
}
</code></pre>
<h3 id="24-instantiationawarebeanpostprocessor">2.4 InstantiationAwareBeanPostProcessor</h3>
<blockquote>
<p>org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor<br>
该接口继承了BeanPostProcess接口，区别如下：</p>
</blockquote>
<p><font color="red">BeanPostProcess接口只在bean的初始化阶段进行扩展（注入spring上下文前后），而InstantiationAwareBeanPostProcessor接口在此基础上增加了3个方法，把可扩展的范围增加了实例化阶段和属性注入阶段。</font></p>
<p>该类主要的扩展点有以下5个方法，主要在bean生命周期的两大阶段：<font color=red>实例化阶段</font>和<font color=red>初始化阶段</font>，下面一起进行说明，按调用顺序为：</p>
<ol>
<li>postProcessBeforeInstantiation：实例化bean之前，相当于new这个bean之前</li>
<li>postProcessAfterInstantiation：实例化bean之后，相当于new这个bean之后</li>
<li>postProcessPropertyValues：bean已经实例化完成，在属性注入时阶段触发，@Autowired,@Resource等注解原理基于此方法实现</li>
<li>postProcessBeforeInitialization：初始化bean之前，相当于把bean注入spring上下文之前</li>
<li>postProcessAfterInitialization：初始化bean之后，相当于把bean注入spring上下文之后</li>
</ol>
<p>使用场景：这个扩展点非常有用 ，无论是写中间件和业务中，都能利用这个特性。比如对实现了某一类接口的bean在各个生命期间进行收集，或者对某个类型的bean进行统一的设值等等。</p>
<pre><code class="language-java">public class TestInstantiationAwareBeanPostProcessor implements InstantiationAwareBeanPostProcessor {

@Override
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
    System.out.println(&quot;[TestInstantiationAwareBeanPostProcessor] before initialization &quot; + beanName);
    return bean;
}

@Override
public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
    System.out.println(&quot;[TestInstantiationAwareBeanPostProcessor] after initialization &quot; + beanName);
    return bean;
}

@Override
public Object postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName) throws BeansException {
    System.out.println(&quot;[TestInstantiationAwareBeanPostProcessor] before instantiation &quot; + beanName);
    return null;
}

@Override
public boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException {
    System.out.println(&quot;[TestInstantiationAwareBeanPostProcessor] after instantiation &quot; + beanName);
    return true;
}

@Override
public PropertyValues postProcessPropertyValues(PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName) throws BeansException {
    System.out.println(&quot;[TestInstantiationAwareBeanPostProcessor] postProcessPropertyValues &quot; + beanName);
    return pvs;
}
</code></pre>
<h3 id="25-smartinstantiationawarebeanpostprocessor">2.5 SmartInstantiationAwareBeanPostProcessor</h3>
<blockquote>
<p>org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor</p>
</blockquote>
<p>该扩展接口有3个触发点方法：</p>
<ol>
<li><code>predictBeanType</code>：该触发点发生在postProcessBeforeInstantiation之前(在图上并没有标明，因为一般不太需要扩展这个点)，这个方法用于预测Bean的类型，返回第一个预测成功的Class类型，如果不能预测返回null；当你调用BeanFactory.getType(name)时当通过bean的名字无法得到bean类型信息时就调用该回调方法来决定类型信息。</li>
<li><code>determineCandidateConstructors</code>：该触发点发生在postProcessBeforeInstantiation之后，用于确定该bean的构造函数之用，返回的是该bean的所有构造函数列表。用户可以扩展这个点，来自定义选择相应的构造器来实例化这个bean。</li>
<li><code>getEarlyBeanReference</code>：该触发点发生在postProcessAfterInstantiation之后，当有循环依赖的场景，当bean实例化好之后，为了防止有循环依赖，会提前暴露回调方法，用于bean实例化的后置处理。这个方法就是在提前暴露的回调方法中触发。</li>
</ol>
<pre><code class="language-java">public class TestSmartInstantiationAwareBeanPostProcessor implements SmartInstantiationAwareBeanPostProcessor {

    @Override
    public Class&lt;?&gt; predictBeanType(Class&lt;?&gt; beanClass, String beanName) throws BeansException {
        System.out.println(&quot;[TestSmartInstantiationAwareBeanPostProcessor] predictBeanType &quot; + beanName);
        return beanClass;
    }

    @Override
    public Constructor&lt;?&gt;[] determineCandidateConstructors(Class&lt;?&gt; beanClass, String beanName) throws BeansException {
        System.out.println(&quot;[TestSmartInstantiationAwareBeanPostProcessor] determineCandidateConstructors &quot; + beanName);
        return null;
    }

    @Override
    public Object getEarlyBeanReference(Object bean, String beanName) throws BeansException {
        System.out.println(&quot;[TestSmartInstantiationAwareBeanPostProcessor] getEarlyBeanReference &quot; + beanName);
        return bean;
    }
}
</code></pre>
<h3 id="26-beanfactoryaware">2.6 BeanFactoryAware</h3>
<blockquote>
<p>org.springframework.beans.factory.BeanFactoryAware<br>
这个类只有一个触发点，发生在bean的实例化之后，注入属性之前，也就是Setter之前。这个类的扩展点方法为setBeanFactory，可以拿到BeanFactory这个属性。</p>
</blockquote>
<p>使用场景为，你可以在bean实例化之后，但还未初始化之前，拿到 BeanFactory，在这个时候，可以对每个bean作特殊化的定制。也或者可以把BeanFactory拿到进行缓存，日后使用。</p>
<p>扩展方式为：</p>
<pre><code class="language-java">public class TestBeanFactoryAware implements BeanFactoryAware {
    @Override
    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
        System.out.println(&quot;[TestBeanFactoryAware] &quot; + beanFactory.getBean(TestBeanFactoryAware.class).getClass().getSimpleName());
    }
}
</code></pre>
<h3 id="27-applicationcontextawareprocessor">2.7 ApplicationContextAwareProcessor</h3>
<blockquote>
<p>org.springframework.context.support.ApplicationContextAwareProcessor<br>
该类本身并没有扩展点，但是该类内部却有6个扩展点可供实现 ，这些类触发的时机在bean实例化之后，初始化之前</p>
</blockquote>
<p>该类用于执行各种驱动接口，在bean实例化之后，属性填充之后，通过执行扩展接口，来获取对应容器的变量。</p>
<ol>
<li><code>EnvironmentAware</code>：用于获取EnviromentAware的一个扩展类，这个变量非常有用， 可以获得系统内的所有参数。当然个人认为这个Aware没必要去扩展，因为spring内部都可以通过注入的方式来直接获得。</li>
<li><code>EmbeddedValueResolverAware</code>：用于获取StringValueResolver的一个扩展类， StringValueResolver用于获取基于String类型的properties的变量，一般我们都用@Value的方式去获取，如果实现了这个Aware接口，把StringValueResolver缓存起来，通过这个类去获取String类型的变量，效果是一样的。</li>
<li><code>ResourceLoaderAware</code>：用于获取ResourceLoader的一个扩展类，ResourceLoader可以用于获取classpath内所有的资源对象，可以扩展此类来拿到ResourceLoader对象。</li>
<li><code>ApplicationEventPublisherAware</code>：用于获取ApplicationEventPublisher的一个扩展类，ApplicationEventPublisher可以用来发布事件，结合ApplicationListener来共同使用，下文在介绍ApplicationListener时会详细提到。这个对象也可以通过spring注入的方式来获得。</li>
<li><code>MessageSourceAware</code>：用于获取MessageSource的一个扩展类，MessageSource主要用来做国际化。</li>
<li><code>ApplicationContextAware</code>：用来获取ApplicationContext的一个扩展类，ApplicationContext应该是很多人非常熟悉的一个类了，就是spring上下文管理器，可以手动的获取任何在spring上下文注册的bean，我们经常扩展这个接口来缓存spring上下文，包装成静态方法。同时ApplicationContext也实现了BeanFactory，MessageSource，ApplicationEventPublisher等接口，也可以用来做相关接口的事情。</li>
</ol>
<h3 id="28-beannameaware">2.8 BeanNameAware</h3>
<blockquote>
<p>org.springframework.beans.factory.BeanNameAware<br>
可以看到，这个类也是Aware扩展的一种，触发点在bean的初始化之前，也就是<code>postProcessBeforeInitialization</code>之前，这个类的触发点方法只有一个：<code>setBeanName</code></p>
</blockquote>
<p>使用场景为：用户可以扩展这个点，在初始化bean之前拿到spring容器中注册的的beanName，来自行修改这个beanName的值。</p>
<p>扩展方式为：</p>
<pre><code class="language-java">public class NormalBeanA implements BeanNameAware{
    public NormalBeanA() {
        System.out.println(&quot;NormalBean constructor&quot;);
    }

    @Override
    public void setBeanName(String name) {
        System.out.println(&quot;[BeanNameAware] &quot; + name);
    }
}
</code></pre>
<h3 id="29-postconstruct">2.9 @PostConstruct</h3>
<blockquote>
<p>javax.annotation.PostConstruct<br>
这个并不算一个扩展点，其实就是一个标注。其作用是在bean的初始化阶段，如果对一个方法标注了@PostConstruct，会先调用这个方法。这里重点是要关注下这个标准的触发点，这个触发点是在<code>postProcessBeforeInitialization</code>之后，<code>InitializingBean.afterPropertiesSet</code>之前。</p>
</blockquote>
<p>使用场景：用户可以对某一方法进行标注，来进行初始化某一个属性</p>
<p>扩展方式为：</p>
<pre><code class="language-java">public class NormalBeanA {
    public NormalBeanA() {
        System.out.println(&quot;NormalBean constructor&quot;);
    }

    @PostConstruct
    public void init(){
        System.out.println(&quot;[PostConstruct] NormalBeanA&quot;);
    }
}
</code></pre>
<h3 id="210-initializingbean">2.10 InitializingBean</h3>
<blockquote>
<p>org.springframework.beans.factory.InitializingBean<br>
这个类，顾名思义，也是用来初始化bean的。InitializingBean接口为bean提供了初始化方法的方式，它只包括<code>afterPropertiesSet</code>方法，凡是继承该接口的类，在初始化bean的时候都会执行该方法。这个扩展点的触发时机在<code>postProcessAfterInitialization</code>之前。</p>
</blockquote>
<p>使用场景：用户实现此接口，来进行系统启动的时候一些业务指标的初始化工作。</p>
<p>扩展方式为：</p>
<pre><code class="language-java">public class NormalBeanA implements InitializingBean{
    @Override
    public void afterPropertiesSet() throws Exception {
        System.out.println(&quot;[InitializingBean] NormalBeanA&quot;);
    }
}
</code></pre>
<h3 id="211-factorybean">2.11 FactoryBean</h3>
<blockquote>
<p>org.springframework.beans.factory.FactoryBean<br>
一般情况下，Spring通过反射机制利用bean的class属性指定支线类去实例化bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在bean中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个<code>org.springframework.bean.factory.FactoryBean</code>的工厂类接口，用户可以通过实现该接口定制实例化Bean的逻辑。</p>
</blockquote>
<p>它们隐藏了实例化一些复杂bean的细节，给上层应用带来了便利。从Spring3.0开始，FactoryBean开始支持泛型，即接口声明改为<code>FactoryBean&lt;T&gt;</code>的形式</p>
<p>使用场景：用户可以扩展这个类，来为要实例化的bean作一个代理，比如为该对象的所有的方法作一个拦截，在调用前后输出一行log，模仿ProxyFactoryBean的功能。</p>
<pre><code class="language-java">public class TestFactoryBean implements FactoryBean&lt;TestFactoryBean.TestFactoryInnerBean&gt; {

    @Override
    public TestFactoryBean.TestFactoryInnerBean getObject() throws Exception {
        System.out.println(&quot;[FactoryBean] getObject&quot;);
        return new TestFactoryBean.TestFactoryInnerBean();
    }

    @Override
    public Class&lt;?&gt; getObjectType() {
        return TestFactoryBean.TestFactoryInnerBean.class;
    }

    @Override
    public boolean isSingleton() {
        return true;
    }

    public static class TestFactoryInnerBean{

    }
}
</code></pre>
<h3 id="212-smartinitializingsingleton">2.12 SmartInitializingSingleton</h3>
<blockquote>
<p>org.springframework.beans.factory.SmartInitializingSingleton<br>
这个接口中只有一个方法<code>afterSingletonsInstantiated</code>，其作用是是 在spring容器管理的所有单例对象（非懒加载对象）初始化完成之后调用的回调接口。其触发时机为<code>postProcessAfterInitialization</code>之后。</p>
</blockquote>
<p>使用场景：用户可以扩展此接口在对所有单例对象初始化完毕后，做一些后置的业务处理。</p>
<pre><code class="language-java">public class TestSmartInitializingSingleton implements SmartInitializingSingleton {
    @Override
    public void afterSingletonsInstantiated() {
        System.out.println(&quot;[TestSmartInitializingSingleton]&quot;);
    }
}
</code></pre>
<h3 id="213-commandlinerunner">2.13 CommandLineRunner</h3>
<blockquote>
<p>org.springframework.boot.CommandLineRunner<br>
这个接口也只有一个方法：<code>run(String... args)</code>，触发时机为整个项目启动完毕后，自动执行。如果有多个<code>CommandLineRunner</code>，可以利用<code>@Order</code>来进行排序。</p>
</blockquote>
<p>使用场景：用户扩展此接口，进行启动项目之后一些业务的预处理。</p>
<pre><code class="language-java">public class TestCommandLineRunner implements CommandLineRunner {

    @Override
    public void run(String... args) throws Exception {
        System.out.println(&quot;[TestCommandLineRunner]&quot;);
    }
}
</code></pre>
<h3 id="214-disposablebean">2.14 DisposableBean</h3>
<blockquote>
<p>org.springframework.beans.factory.DisposableBean<br>
这个扩展点也只有一个方法：<code>destroy()</code>，其触发时机为当此对象销毁时，会自动执行这个方法。比如说运行<code>applicationContext.registerShutdownHook</code>时，就会触发这个方法。</p>
</blockquote>
<pre><code class="language-java">public class NormalBeanA implements DisposableBean {
    @Override
    public void destroy() throws Exception {
        System.out.println(&quot;[DisposableBean] NormalBeanA&quot;);
    }
}
</code></pre>
<h3 id="215-applicationlistener">2.15 ApplicationListener</h3>
<blockquote>
<p>org.springframework.context.ApplicationListener<br>
准确的说，这个应该不算spring&amp;springboot当中的一个扩展点，ApplicationListener可以监听某个事件的<code>event</code>，触发时机可以穿插在业务方法执行过程中，用户可以自定义某个业务事件。但是spring内部也有一些内置事件，这种事件，可以穿插在启动调用中。我们也可以利用这个特性，来自己做一些内置事件的监听器来达到和前面一些触发点大致相同的事情。</p>
</blockquote>
<p>接下来罗列下spring主要的内置事件：</p>
<ol>
<li>
<p>ContextRefreshedEvent<br>
ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在 ConfigurableApplicationContext接口中使用 refresh() 方法来发生。此处的初始化是指：所有的Bean被成功装载，后处理Bean被检测并激活，所有Singleton Bean 被预实例化，ApplicationContext容器已就绪可用。</p>
</li>
<li>
<p>ContextStartedEvent<br>
当使用 ConfigurableApplicationContext （ApplicationContext子接口）接口中的 start() 方法启动 ApplicationContext 时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。</p>
</li>
<li>
<p>ContextStoppedEvent<br>
当使用 ConfigurableApplicationContext 接口中的 stop() 停止 ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作</p>
</li>
<li>
<p>ContextClosedEvent<br>
当使用 ConfigurableApplicationContext接口中的 close()方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启</p>
</li>
<li>
<p>RequestHandledEvent<br>
这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。只能应用于使用DispatcherServlet的Web应用。在使用Spring作为前端的MVC控制器时，当Spring处理用户请求结束后，系统会自动触发该事件</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Semaphore实现原理]]></title>
        <id>https://q456qq520.github.io/post/semaphore-shi-xian-yuan-li/</id>
        <link href="https://q456qq520.github.io/post/semaphore-shi-xian-yuan-li/">
        </link>
        <updated>2023-02-07T02:31:24.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="1-构造方法">1 构造方法</h2>
<p>从概念上讲，Semaphore维护一组许可，由一个可以递增或递减的计数器值表示，用来控制同时访问特定资源的线程数目。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="1-构造方法">1 构造方法</h2>
<p>从概念上讲，Semaphore维护一组许可，由一个可以递增或递减的计数器值表示，用来控制同时访问特定资源的线程数目。</p>
<!-- more -->
<p>Semaphore信号量来实现线程间通信，Semaphore支持公平锁和非公平锁，Semaphore底层是通过共享锁来实现的，其支持两种构造函数，如下所示：</p>
<pre><code class="language-java"> // 默认使用非公平锁实现
 public Semaphore(int permits) {
     sync = new NonfairSync(permits);
 }
 ​
 public Semaphore(int permits, boolean fair) {
     sync = fair ? new FairSync(permits) : new NonfairSync(permits);
 }
</code></pre>
<h2 id="2-semaphore方法">2 Semaphore方法</h2>
<pre><code class="language-java">//尝试获取一个信号量，如果信号量不为0，那么将信号量-1，返回
//如果信号量为0，WAITING直到信号量不为0
//可中断
public void acquire() throws InterruptedException

//尝试获取多个信号量，如果信号量足够，那么将信号量-permits，返回
//如果信号量不够，WAITING直到信号量不为0
//可中断 
public void acquire(int permits) throws InterruptedException
    
//同acquire()，但不可中断
public void acquireUninterruptibly()
    
//同acquire(int permits),但不可中断
public void acquireUninterruptibly(int permits)

//释放一个信号量
public void release()
    
//释放permits个信号量
public void release(int permits)

</code></pre>
<h2 id="3-semaphore内部类及继承关系">3 Semaphore内部类及继承关系</h2>
<p><img src="https://q456qq520.github.io/post-images/1675737631273.png" alt="" loading="lazy"><br>
Semaphore与ReentrantLock的内部类的结构相同，类内部总共存在Sync、NonfairSync、FairSync三个类，NonfairSync与FairSync类继承自Sync类，Sync类继承自AbstractQueuedSynchronizer抽象类。</p>
<h3 id="31-类的内部类-sync类">3.1 类的内部类 - Sync类</h3>
<pre><code class="language-java">// 内部类，继承自AQS
abstract static class Sync extends AbstractQueuedSynchronizer {
    // 版本号
    private static final long serialVersionUID = 1192457210091910933L;
    
    // 构造函数
    Sync(int permits) {
        // 设置状态数
        setState(permits);
    }
    
    // 获取许可
    final int getPermits() {
        return getState();
    }

    // 共享模式下非公平策略获取
    final int nonfairTryAcquireShared(int acquires) {
        for (;;) { // 无限循环
            // 获取许可数
            int available = getState();
            // 剩余的许可
            int remaining = available - acquires;
            if (remaining &lt; 0 ||
                compareAndSetState(available, remaining)) // 许可小于0或者比较并且设置状态成功
                return remaining;
        }
    }
    
    // 共享模式下进行释放
    protected final boolean tryReleaseShared(int releases) {
        for (;;) { // 无限循环
            // 获取许可
            int current = getState();
            // 可用的许可
            int next = current + releases;
            if (next &lt; current) // overflow
                throw new Error(&quot;Maximum permit count exceeded&quot;);
            if (compareAndSetState(current, next)) // 比较并进行设置成功
                return true;
        }
    }

    // 根据指定的缩减量减小可用许可的数目
    final void reducePermits(int reductions) {
        for (;;) { // 无限循环
            // 获取许可
            int current = getState();
            // 可用的许可
            int next = current - reductions;
            if (next &gt; current) // underflow
                throw new Error(&quot;Permit count underflow&quot;);
            if (compareAndSetState(current, next)) // 比较并进行设置成功
                return;
        }
    }

    // 获取并返回立即可用的所有许可
    final int drainPermits() {
        for (;;) { // 无限循环
            // 获取许可
            int current = getState();
            if (current == 0 || compareAndSetState(current, 0)) // 许可为0或者比较并设置成功
                return current;
        }
    }
}
</code></pre>
<h3 id="32-类的内部类-nonfairsync类">3.2 类的内部类 - NonfairSync类</h3>
<pre><code class="language-java">static final class NonfairSync extends Sync {
    // 版本号
    private static final long serialVersionUID = -2694183684443567898L;
    
    // 构造函数
    NonfairSync(int permits) {
        super(permits);
    }
    // 共享模式下获取
    protected int tryAcquireShared(int acquires) {
        return nonfairTryAcquireShared(acquires);
    }
}
</code></pre>
<p>从tryAcquireShared方法的源码可知，其会调用父类Sync的nonfairTryAcquireShared方法，表示按照非公平策略进行资源的获取。</p>
<h3 id="33-类的内部类-fairsync类">3.3 类的内部类 - FairSync类</h3>
<pre><code class="language-java">protected int tryAcquireShared(int acquires) {
    for (;;) { // 无限循环
        if (hasQueuedPredecessors()) // 同步队列中存在其他节点
            return -1;
        // 获取许可
        int available = getState();
        // 剩余的许可
        int remaining = available - acquires;
        if (remaining &lt; 0 ||
            compareAndSetState(available, remaining)) // 剩余的许可小于0或者比较设置成功
            return remaining;
    }
}
</code></pre>
<p>从tryAcquireShared方法的源码可知，它使用公平策略来获取资源，它会判断同步队列中是否存在其他的等待节点。</p>
<h3 id="34-类的属性">3.4 类的属性</h3>
<pre><code class="language-java">public class Semaphore implements java.io.Serializable {
    // 版本号
    private static final long serialVersionUID = -3222578661600680210L;
    // 属性
    private final Sync sync;
}
</code></pre>
<p>Semaphore自身只有两个属性，最重要的是sync属性，基于Semaphore对象的操作绝大多数都转移到了对sync的操作。</p>
<h2 id="4-semaphoreacquire流程分析以非公平锁为例">4 Semaphore.acquire流程分析(以非公平锁为例)</h2>
<figure data-type="image" tabindex="1"><img src="https://q456qq520.github.io/post-images/1675737423342.png" alt="" loading="lazy"></figure>
<p>从上图可以看出，针对阻塞线程的部分实现，和ReentrantLock基本一致，我们不做赘述，主要来看下前半部分的源码实现：</p>
<pre><code class="language-java"> // Semaphore.java
 public void acquire() throws InterruptedException {
     sync.acquireSharedInterruptibly(1);
 }
</code></pre>
<pre><code class="language-java"> // AbstractQueuedSynchronizer.java
 public final void acquireSharedInterruptibly(int arg)
         throws InterruptedException {
     // 如果线程是中断状态，抛出异常
     if (Thread.interrupted())
         throw new InterruptedException();
     // 尝试获取共享资源
     if (tryAcquireShared(arg) &lt; 0)
         doAcquireSharedInterruptibly(arg);
 }
</code></pre>
<p>从源码可以看出acquire主要依赖于tryAcquireShared和doAcquireSharedInterruptibly。</p>
<figure data-type="image" tabindex="2"><img src="https://q456qq520.github.io/post-images/1675740380818.png" alt="" loading="lazy"></figure>
<h3 id="41-tryacquireshared">4.1 tryAcquireShared</h3>
<pre><code class="language-java">static final class NonfairSync extends Sync {
    private static final long serialVersionUID = -2694183684443567898L;

    NonfairSync(int permits) {
        super(permits);
    }

    protected int tryAcquireShared(int acquires) {
        return nonfairTryAcquireShared(acquires);
    }
}
</code></pre>
<pre><code class="language-java">final int nonfairTryAcquireShared(int acquires) {
    for (;;) {
        int available = getState();
        //判断是否还有令牌
        int remaining = available - acquires;
        //无论是否还有令牌，都要返回
        if (remaining &lt; 0 ||
            compareAndSetState(available, remaining))
            return remaining;
    }
}
</code></pre>
<pre><code class="language-java"> // AbstractQueuedSynchronizer.java
 protected final boolean compareAndSetState(int expect, int update) {
     // See below for intrinsics setup to support this
     return unsafe.compareAndSwapInt(this, stateOffset, expect, update);
 }
</code></pre>
<p>从代码可以看出这里主要是根据申请的许可证数量，比较时否有许可证数量，如果可用许可证数量小于0，则直接返回，如果大于0，则通过CAS将state设置为可用许可证数量。</p>
<h3 id="42-doacquiresharedinterruptibly">4.2 doAcquireSharedInterruptibly</h3>
<p>当tryAcquireShared中返回的可用许可证数量小于0时，执行doAcquireSharedInterruptibly流程，代码如下：</p>
<pre><code class="language-java">private void doAcquireSharedInterruptibly(int arg)
    throws InterruptedException {
    //加入同步队列
    final Node node = addWaiter(Node.SHARED);
    boolean failed = true;
    try {
        //自旋获取锁
        for (;;) {
            final Node p = node.predecessor();
            //判断上一个节点是否是头节点
            if (p == head) {
                //如果是头节点则尝试获取锁
                int r = tryAcquireShared(arg);
                if (r &gt;= 0) {
                    //获取到锁，通知其他节点
                    setHeadAndPropagate(node, r);
                    p.next = null; // help GC
                    failed = false;
                    return;
                }
            }
            //判断是否需要阻塞线程，设置waitStatus并阻塞
            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;
                parkAndCheckInterrupt())
                throw new InterruptedException();
        }
    } finally {
        if (failed)
            cancelAcquire(node);
    }
}
</code></pre>
<pre><code class="language-java"> // AbstractQueuedSynchronizer.java
 // 在队尾新建Node对象并添加
 private Node addWaiter(Node mode) {
     Node node = new Node(Thread.currentThread(), mode);
     // Try the fast path of enq; backup to full enq on failure
     Node pred = tail;
     if (pred != null) {
         node.prev = pred;
         if (compareAndSetTail(pred, node)) {
             pred.next = node;
             return node;
         }
     }
     enq(node);
     return node;
 }
</code></pre>
<pre><code class="language-java">private void setHeadAndPropagate(Node node, int propagate) {
    Node h = head; // Record old head for check below
    setHead(node);

    if (propagate &gt; 0 || h == null || h.waitStatus &lt; 0 ||
        (h = head) == null || h.waitStatus &lt; 0) {
        Node s = node.next;
        if (s == null || s.isShared())
            doReleaseShared();
    }
}
</code></pre>
<p>执行setHeadAndPropagate的主要目的在于，这里能获取到说明在该线程自旋过程中有线程释放了许可证，释放的许可证数量有可能还有剩余，所以传递给其他节点的线程，唤醒其他阻塞状态的线程也尝试去获取许可证。</p>
<h2 id="5-semaphorerelease流程分析以非公平锁为例">5 Semaphore.release流程分析(以非公平锁为例)</h2>
<figure data-type="image" tabindex="3"><img src="https://q456qq520.github.io/post-images/1675738215229.png" alt="" loading="lazy"></figure>
<p>Semaphore.release流程相对而言，就比较简单，将release传递到AQS内部通过CAS更新许可证数量信息，更新完成后，遍历队列中Node节点，将Node waitStatus设置为0，并对对应线程执行unpark，相关代码如下：</p>
<pre><code class="language-java">@ReservedStackAccess
public final boolean releaseShared(int arg) {
    if (tryReleaseShared(arg)) {
        doReleaseShared();
        return true;
    }
    return false;
}
</code></pre>
<pre><code class="language-java">protected final boolean tryReleaseShared(int releases) {
    for (;;) {
        int current = getState();
        int next = current + releases;
        if (next &lt; current) // overflow
            throw new Error(&quot;Maximum permit count exceeded&quot;);
        // 通过CAS更新许可证数量
        if (compareAndSetState(current, next))
            return true;
    }
}
</code></pre>
<pre><code class="language-java">private void doReleaseShared() {
    for (;;) {
        Node h = head;
        if (h != null &amp;&amp; h != tail) {
            int ws = h.waitStatus;
            if (ws == Node.SIGNAL) {
                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))
                    continue;            // loop to recheck cases
                unparkSuccessor(h);
            }
            else if (ws == 0 &amp;&amp;
                        !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))
                continue;                // loop on failed CAS
        }
        if (h == head)                   // loop if head changed
            break;
    }
}
</code></pre>
<pre><code class="language-java">private void unparkSuccessor(Node node) {
    int ws = node.waitStatus;
    if (ws &lt; 0)
        compareAndSetWaitStatus(node, ws, 0);

    Node s = node.next;
    if (s == null || s.waitStatus &gt; 0) {
        s = null;
        for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)
            if (t.waitStatus &lt;= 0)
                s = t;
    }
    if (s != null)
        LockSupport.unpark(s.thread);
}

// 许可证数量更新完成后，调用该方法唤醒线程
private void doReleaseShared() {
    // 自旋
    for (;;) {
        Node h = head;
        if (h != null &amp;&amp; h != tail) {
            int ws = h.waitStatus;
            if (ws == Node.SIGNAL) {
                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))
                    continue;            // loop to recheck cases
                // 唤醒后继节点线程抢占许可证
                unparkSuccessor(h);
            }
            else if (ws == 0 &amp;&amp;
                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))
                continue;                // loop on failed CAS
        }
        if (h == head)                   // loop if head changed
            break;
    }
}
</code></pre>
<h2 id="6-公平锁">6 公平锁</h2>
<p>我们分析了Smaphore非公平锁的实现，公平锁的实现其本质区别在于在tryAcquireShared中只有当等待队列为空时，才会去尝试更新剩余许可证数量。</p>
<pre><code class="language-java">protected int tryAcquireShared(int acquires) {
    for (;;) {
        //判断是否是头节点
        if (hasQueuedPredecessors())
            return -1;
        int available = getState();
        int remaining = available - acquires;
        if (remaining &lt; 0 ||
            compareAndSetState(available, remaining))
            return remaining;
    }
}

public final boolean hasQueuedPredecessors() {
    // The correctness of this depends on head being initialized
    // before tail and on head.next being accurate if the current
    // thread is first in queue.
    Node t = tail; // Read fields in reverse initialization order
    Node h = head;
    Node s;
    return h != t &amp;&amp;
        ((s = h.next) == null || s.thread != Thread.currentThread());
}
</code></pre>
<h2 id="7-semaphore和reentrantlock的区别">7 Semaphore和ReentrantLock的区别</h2>
<ol>
<li>可重入的性质<br>
Semaphores在本质上是非可重入的 ，这意味着我们不能在同一个线程中第二次获得Semaphore。试图这样做会导致死锁（一个线程与自己死锁）。<br>
另一方面， 可重入锁在本质上是可重入的，允许一个线程使用lock() 方法多次锁定一个特定的资源。</li>
<li>同步机制<br>
Semaphores很适合信号传递（信号机制），线程使用acquire()&amp;release() 方法来标记访问关键资源的开始和结束。<br>
ReentrantLock 使用锁定机制，使用lock() 方法锁定一个特定的资源 ，在对该资源进行特定操作后，使用unlock() 方法释放该锁。</li>
<li>死锁恢复<br>
Semaphores提供了一个强大的死锁恢复机制，因为它使用了一个非所有权的释放机制，因此任何线程都可以释放一个许可，以恢复一个卡住或等待的线程的死锁情况。<br>
在 ReentrantLock的情况下，死锁恢复是有点困难的，因为它使用线程对资源的所有权，通过物理锁定它，只有所有者线程可以解锁该资源。如果所有者Thread进入无限等待或睡眠状态，就不可能释放该特定资源的锁，从而导致死锁情况。</li>
<li>抛出IllegalMonitorStateException<br>
在Semaphores中，没有线程拥有获取或释放许可的所有权，所以任何线程都可以调用release() 方法来释放任何其他线程的许可，没有线程会引发 IllegalMonitorStateException。<br>
在可重入锁中，一个Thread 通过调用lock() 方法成为一个关键共享资源的所有者，如果其他Thread在没有拥有锁的情况下调用unlock() 方法，那么 它将会产生 IllegalMonitorStateException。</li>
<li>修改<br>
任何线程都可以使用Semaphore的acquire() 和release() 方法来修改它的可用许可。<br>
只有通过lock()方法拥有资源的当前所有者线程可以修改ReentrantLock，而其他线程不允许这样做。</li>
</ol>
<p>Semaphores可以用于非所有权-释放语义，即不止一个Thread 可以进入一个关键部分，并且不需要锁定机制来锁定一个共享资源。根据设计，Semaphore对哪个线程调用acquisition()和release()方法是盲目的，它所关心的是许可成为可用的。<br>
如果我们需要可重入互斥或一个简单的互斥 ，那么 ReentrantLock是最好的选择。可重入锁 提供了对锁机制更好的控制，并且允许每次只有一个线程访问关键部分，从而提供了同步性，并消除了在多线程应用程序中工作时的数据不一致问题。</p>
<h2 id="8-场景问题">8 场景问题</h2>
<p><code>semaphore初始化有10个令牌，11个线程同时各调用1次acquire方法，会发生什么?</code><br>
答案：拿不到令牌的线程阻塞，不会继续往下运行。</p>
<p><code>semaphore初始化有10个令牌，一个线程重复调用11次acquire方法，会发生什么?</code><br>
答案：线程阻塞，不会继续往下运行。可能你会考虑类似于锁的重入的问题，很好，但是，令牌没有重入的概念。你只要调用一次acquire方法，就需要有一个令牌才能继续运行。</p>
<p><code>semaphore初始化有1个令牌，1个线程调用一次acquire方法，然后调用两次release方法，之后另外一个线程调用acquire(2)方法，此线程能够获取到足够的令牌并继续运行吗?</code><br>
答案：能，原因是release方法会添加令牌，并不会以初始化的大小为准。</p>
<p><code>semaphore初始化有2个令牌，一个线程调用1次release方法，然后一次性获取3个令牌，会获取到吗?</code><br>
答案：能，原因是release会添加令牌，并不会以初始化的大小为准。Semaphore中release方法的调用并没有限制要在acquire后调用。</p>
]]></content>
    </entry>
</feed>